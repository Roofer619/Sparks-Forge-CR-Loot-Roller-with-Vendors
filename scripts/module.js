// Sparks Forge CR Loot Roller
console.log("SF CR Loot Roller is loading");

let messageContent = '';

Hooks.once('init', () => {
  game.settings.register("sparks-forge-cr-loot-roller-with-vendors", "enableTashas", {
    name: "Enable Tasha's",
    hint: "Enables Tasha's Cauldron of Everything to appear in CR Loot rolls, when checked. Requires GM browser reload to disable.",
    scope: "world",
    config: true,
    default: false,
    type: Boolean
  });

  const tashasSetting = game.settings.get("sparks-forge-cr-loot-roller-with-vendors", "enableTashas");
  toggleTashas = tashasSetting;
});

Hooks.on("socketlib.ready", () => {
  game.socket.on("createJournalEntry", ({ journalEntry }) => {
    const chatData = {
      user: game.user._id,
      speaker: { actor: null },
      content: `<a class="entity-link" data-entity="JournalEntry" data-id="${journalEntry.id}">${journalEntry.name}</a>`,
      type: CONST.CHAT_MESSAGE_TYPES.OOC,
    };
    ChatMessage.create(chatData, {});
  });
});

let GMOnlyDisabled = false;

function toggleLootRollerButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
  const container = document.getElementById('primary-button-container');
  if (container.style.display === 'none') {
    // show the container
    container.style.display = 'block';
  } else {
    // hide the container
    container.style.display = 'none';
  }
}

function toggleButtons() {
  const container = document.getElementById("button-container");
  container.style.display = container.style.display === "none" ? "block" : "none";

  // Hide both roll containers when opening the button container
  if (container.style.display === "block") {
    hideRollContainers();
  }
}

function hideRollContainers() {
  document.getElementById("individual-roll-container").style.display = "none";
  document.getElementById("hoard-roll-container").style.display = "none";
}

function toggleSFConfig() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
  const configContainer = document.getElementById('sf-config-container');
  if (configContainer.style.display === 'none') {
    // show the container
    configContainer.style.display = 'block';
  } else {
    // hide the container
    configContainer.style.display = 'none';
  }
}

let toggleTashas = false;

function updateToggleTashas() {
  toggleTashas = !toggleTashas;

  console.log(`Tasha's toggle is ${toggleTashas}`);
}

function rollOnTable(table, numItems = 1) {
  const results = [];

  for (let i = 0; i < numItems; i++) {
    const roll = Math.floor(Math.random() * 100) + 1;

    for (const item of table) {
      if (roll >= item.range[0] && roll <= item.range[1]) {
        results.push(item.item);
        break;
      }
    }
  }

  return results;
}  

function showIndividualButtons() {
  hideRollContainers();
  document.getElementById("individual-roll-container").style.display = "block";
}

function showHoardButtons() {
  hideRollContainers();
  document.getElementById("hoard-roll-container").style.display = "block";
}

function rollItems(min, max, itemTypes) {
  const numItems = generateRandomNumber() % (max - min + 1) + min;
  const items = [];
  for (let i = 0; i < numItems; i++) {
    const item = itemTypes[Math.floor(Math.random() * itemTypes.length)];
    items.push(item);
  }
  return items;
}

function generateRandomNumber(min = 1, max = 100) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function roll(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function secondaryRoll(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
async function rollIndividualTreasure(crRange) {
  const treasure = [];
  switch (crRange) {
    case "0-4":
      treasure.push(individualTreasureCR0to4());
      break;
    case "5-10":
      treasure.push(individualTreasureCR5to10());
      break;
    case "11-16":
      treasure.push(individualTreasureCR11to16());
      break;
    case "17+":
      treasure.push(individualTreasureCR17Plus());
      break;
    default:
      break;
  }
  const messageContent = generateIndividualTreasure(crRange);
  await ChatMessage.create({ content: messageContent });
}

function generateIndividualTreasure(crRange, items = []) {
  const treasure = [];
  let cpAmount = 0;
  let spAmount = 0;
  let epAmount = 0;
  let gpAmount = 0;
  let ppAmount = 0;

  if (crRange >= 0 && crRange <= 4) {
    cpAmount = Math.floor(Math.random() * 101);
    spAmount = Math.floor(Math.random() * 21);
    epAmount = Math.floor(Math.random() * 7);
    gpAmount = Math.floor(Math.random() * 31);
    ppAmount = Math.floor(Math.random() * 5);
  }

  if (cpAmount > 0) treasure.push(`${cpAmount} CP`);
  if (spAmount > 0) treasure.push(`${spAmount} SP`);
  if (epAmount > 0) treasure.push(`${epAmount} EP`);
  if (gpAmount > 0) treasure.push(`${gpAmount} GP`);
  if (ppAmount > 0) treasure.push(`${ppAmount} PP`);

  // Get the total amount of each currency
  const totalCP = cpAmount;
  const totalSP = cpAmount / 10 + spAmount;
  const totalEP = (cpAmount + spAmount) / 50 + epAmount;
  const totalGP = (cpAmount + spAmount + epAmount) / 100 + gpAmount;
  const totalPP = (cpAmount + spAmount + epAmount + gpAmount) / 1000 + ppAmount;

  // Add the total amounts to the message content
let messageContent = treasure.join("<br>");
  if (totalCP > 0) messageContent += `<br>Total CP: ${totalCP}`;
  if (totalSP > 0) messageContent += `<br>Total SP: ${totalSP}`;
  if (totalEP > 0) messageContent += `<br>Total EP: ${totalEP}`;
  if (totalGP > 0) messageContent += `<br>Total GP: ${totalGP}`;
  if (totalPP > 0) messageContent += `<br>Total PP: ${totalPP}`;

  if (items.length > 0) messageContent += `<br>Items: ${items.join(",")}`;

  return messageContent;
}

async function showIndividualTreasure() {
  try {
    const treasure = await generateIndividualTreasure();
    const messageContent = treasure + "<br>";
    await ChatMessage.create({ content: messageContent });
  } catch (err) {
    console.error(`Error showing individual treasure: ${err}`);
  }
}

async function individualTreasureCR0to4() {
  const roll = Math.floor(Math.random() * 100) + 1;

  const treasureRanges = [
    {
      range: [1, 30],
      getTreasure: () => {
        const cpAmount = Math.floor(Math.random() * 26) + 5;
        return `${cpAmount} CP`;
      }
    },
    {
      range: [31, 60],
      getTreasure: () => {
        const spAmount = Math.floor(Math.random() * 21) + 4;
        return `${spAmount} SP`;
      }
    },
    {
      range: [61, 70],
      getTreasure: () => {
        const epAmount = Math.floor(Math.random() * 16) + 3;
        return `${epAmount} EP`;
      }
    },
    {
      range: [71, 95],
      getTreasure: () => {
        const gpAmount = Math.floor(Math.random() * 16) + 3;
        return `${gpAmount} GP`;
      }
    },
    {
      range: [96, 100],
      getTreasure: () => {
        const ppAmount = Math.floor(Math.random() * 6) + 1;
        return `${ppAmount} PP`;
      }
    }
  ];

  const { getTreasure } = treasureRanges.find(({ range }) => roll >= range[0] && roll <= range[1]);
  const treasure = [getTreasure()];
  const messageContent = treasure.join(", ") + "<br>";
  await ChatMessage.create({ content: messageContent });
}

async function individualTreasureCR5to10() {
  const roll = Math.floor(Math.random() * 100) + 1;

  const treasureRanges = [
    {
      range: [1, 30],
      getTreasure: () => {
        const cpAmount = Math.floor(Math.random() * 21) + 4;
        const epAmount = (Math.floor(Math.random() * 6) + 1) * 100;
        return `${cpAmount * 100} CP, ${epAmount} EP`;
      }
    },
    {
      range: [31, 60],
      getTreasure: () => {
        const spAmount = Math.floor(Math.random() * 31) + 6;
        const gpAmount = (Math.floor(Math.random() * 11) + 2) * 10;
        return `${spAmount * 10} SP, ${gpAmount * 10} GP`;
      }
    },
    {
      range: [61, 70],
      getTreasure: () => {
        const epAmount = Math.floor(Math.random() * 16) + 3;
        const gpAmount = (Math.floor(Math.random() * 11) + 2) * 10;
        return `${epAmount * 10} EP, ${gpAmount * 10} GP`;
      }
    },
    {
      range: [71, 95],
      getTreasure: () => {
        const gpAmount = Math.floor(Math.random() * 21) + 4;
        return `${gpAmount * 10} GP`;
      }
    },
    {
      range: [96, 100],
      getTreasure: () => {
        const gpAmount = (Math.floor(Math.random() * 11) + 2) * 10;
        const ppAmount = Math.floor(Math.random() * 16) + 3;
        return `${gpAmount * 10} GP, ${ppAmount} PP`;
      }
    }
  ];

  const { getTreasure } = treasureRanges.find(({ range }) => roll >= range[0] && roll <= range[1]);
  const treasure = [getTreasure()];
  const messageContent = treasure.join(", ") + "<br>";
  await ChatMessage.create({ content: messageContent });
}

async function individualTreasureCR11to16() {
  const roll = Math.floor(Math.random() * 100) + 1;
  
  const treasureRanges = [
    {
      range: [1, 20],
      getTreasure: () => {
        const spAmount = Math.floor(Math.random() * 21) + 4;
        const gpAmount = (Math.floor(Math.random() * 6) + 1) * 100;
        return `${spAmount * 100} SP, ${gpAmount} GP`;
      }
    },
    {
      range: [21, 35],
      getTreasure: () => {
        const epAmount = (Math.floor(Math.random() * 6) + 1) * 100;
        const gpAmount = (Math.floor(Math.random() * 6) + 1) * 100;
        return `${epAmount} EP, ${gpAmount} GP`;
      }
    },
    {
      range: [36, 75],
      getTreasure: () => {
        const gpAmount = (Math.floor(Math.random() * 11) + 2) * 100;
        const ppAmount = (Math.floor(Math.random() * 6) + 1) * 10;
        return `${gpAmount} GP, ${ppAmount} PP`;
      }
    },
    {
      range: [76, 100],
      getTreasure: () => {
        const gpAmount = (Math.floor(Math.random() * 11) + 2) * 100;
        const ppAmount = (Math.floor(Math.random() * 11) + 2) * 10;
        return `${gpAmount} GP, ${ppAmount} PP`;
      }
    }
  ];
  
  const { getTreasure } = treasureRanges.find(({ range }) => roll >= range[0] && roll <= range[1]);
  const treasure = [getTreasure()];
  const messageContent = treasure.join(", ") + "<br>";
  await ChatMessage.create({ content: messageContent });
}

async function individualTreasureCR17Plus() {
  const roll = Math.floor(Math.random() * 100) + 1;
  
  const treasureRanges = [
    {
      range: [1, 15],
      getTreasure: () => {
        const epAmount = Math.floor(Math.random() * 11) + 2;
        const gpAmount = (Math.floor(Math.random() * 41) + 8) * 100;
        return `${epAmount * 1000} EP, ${gpAmount} GP`;
      }
    },
    {
      range: [16, 55],
      getTreasure: () => {
        const gpAmount = (Math.floor(Math.random() * 6) + 1) * 1000;
        const ppAmount = (Math.floor(Math.random() * 6) + 1) * 100;
        return `${gpAmount} GP, ${ppAmount * 100} PP`;
      }
    },
    {
      range: [56, 100],
      getTreasure: () => {
        const gpAmount = (Math.floor(Math.random() * 6) + 1) * 1000;
        const ppAmount = (Math.floor(Math.random() * 11) + 2) * 100;
        return `${gpAmount} GP, ${ppAmount * 10} PP`;
      }
    }
  ];
  
  const { getTreasure } = treasureRanges.find(({ range }) => roll >= range[0] && roll <= range[1]);
  const treasure = [getTreasure()];
  const messageContent = treasure.join(", ") + "<br>";
  await ChatMessage.create({ content: messageContent });
}

const tengpgemstonesTypesW = [
    { name:"Azurite (10 GP)",
      uuid: "Azurite (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Banded agate (10 GP)",
      uuid: "Banded agate (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Blue quartz (10 GP)", 
      uuid: "Blue quartz (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Eye agate (10 GP)",
      uuid: "Eye agate (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Hematite (10 GP)", 
      uuid: "Hematite (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Lapis lazuli (10 GP)",
      uuid: "Lapis lazuli (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Malachite (10 GP)", 
      uuid: "Malachite (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Moss agate (10 GP)",
      uuid: "Moss agate (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Obsidian (10 GP)", 
      uuid: "Obsidian (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Rhodochrosite (10 GP)", 
      uuid: "Rhodochrosite (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Tiger eye (10 GP)", 
      uuid: "Tiger eye (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
    { name:"Turquoise (10 GP)",
      uuid: "Turquoise (10 GP)",
      image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const fiftygpgemstoneTypesW = [
  { name:"Bloodstone (50 GP)", 
    uuid: "Bloodstone (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Carnelian (50 GP)",
    uuid: "Carnelian (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Chalcedony (50 GP)", 
    uuid: "Chalcedony (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Chrysoprase (50 GP)",
    uuid: "Chrysoprase (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Citrine (50 GP)", 
    uuid: "Citrine (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Jasper (50 GP)",
    uuid: "Jasper (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Moonstone (50 GP)", 
    uuid: "Moonstone (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Onyx (50 GP)",
    uuid: "Onyx (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Quartz (50 GP)", 
    uuid: "Quartz (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Sardonyx (50 GP)",
    uuid: "Sardonyx (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Star rose quartz (50 GP)", 
    uuid: "Star rose quartz (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
  { name:"Zircon (50 GP)",
    uuid: "Zircon (50 GP)",
    image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const onehundredgpgemstonesTypesW = [
{ name:"Amber (100 GP)", 
  uuid: "Amber (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Amethyst (100 GP)",
  uuid: "Amethyst (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Chrysoberyl (100 GP)", 
  uuid: "Chrysoberyl (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Coral (100 GP)",
  uuid: "Coral (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Garnet (100 GP)",
  uuid: "Garnet (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Jade (100 GP)",
  uuid: "Jade (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Jet (100 GP)", 
  uuid: "Jet (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Pearl (100 GP)",
  uuid: "Pearl (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Spinel (100 GP)", 
  uuid: "Spinel (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Tourmaline (100 GP)",
  uuid: "Tourmaline (100 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const fivehundredgpgemstonesTypesW = [
{ name:"Alexandrite (500 GP)", 
  uuid: "Alexandrite (500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Aquamarine (500 GP)",
  uuid: "Aquamarine (500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Black pearl (500 GP)", 
  uuid: "Black pearl (500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Blue spinel (500 GP)",
  uuid: "Blue spinel (500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Peridot (500 GP)", 
  uuid: "Peridot (500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Topaz (500 GP)",
  uuid: "Topaz (500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const onethousandgpgemstonesTypesW = [
{ name:"Black opal (1000 GP)", 
  uuid: "Black opal (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Blue sapphire (1000 GP)",
  uuid: "Blue sapphire (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Emerald (1000 GP)", 
  uuid: "Emerald (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Fire opal (1000 GP)",
  uuid: "Fire opal (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Opal (1000 GP)", 
  uuid: "Opal (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Star ruby (1000 GP)",
  uuid: "Star ruby (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Star sapphire (1000 GP)", 
  uuid: "Star sapphire (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Yellow sapphire (1000 GP)",
  uuid: "Yellow sapphire (1000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const fivethousandgpgemstonesTypesW = [
{ name:"Black sapphire (5000 GP)", 
  uuid: "Black sapphire (5000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Diamond (5000 GP)",
  uuid: "Diamond (5000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Jacinth (5000 GP)", 
  uuid: "Jacinth (5000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Ruby (5000 GP)",
  uuid: "Ruby (5000 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const twentyfivegpartobjectsTypesW = [
{ name:"Silver ewer (25 GP)", 
  uuid: "Silver ewer (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Carved bone statuette (25 GP)", 
  uuid: "Carved bone statuette (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Small gold bracelet (25 GP)", 
  uuid: "Small gold bracelet (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Cloth-of-gold vestments (25 GP)", 
  uuid: "Cloth-of-gold vestments (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Black velvet mask stitched with silver thread (25 GP)", 
  uuid: "Black velvet mask stitched with silver thread (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Copper chalice with silver filigree (25 GP)", 
  uuid: "Copper chalice with silver filigree (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Pair of engraved bone dice (25 GP)", 
  uuid: "Pair of engraved bone dice (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Small mirror set in a painted wooden frame (25 GP)", 
  uuid: "Small mirror set in a painted wooden frame (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Embroidered silk handkerchief (25 GP)", 
  uuid: "Embroidered silk handkerchief (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Gold locket with a painted portrait inside (25 GP)",
  uuid: "Gold locket with a painted portrait inside (25 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const twofiftygpartobjectsTypesW = [
{ name:"Gold ring set with bloodstones (250 GP)", 
  uuid: "Gold ring set with bloodstones (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Carved ivory statuette (250 GP)", 
  uuid: "Carved ivory statuette (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Large gold bracelet (250 GP)", 
  uuid: "Large gold bracelet (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Silver necklace with a gemstone pendant (250 GP)", 
  uuid: "Silver necklace with a gemstone pendant (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Bronze crown (250 GP)", 
  uuid: "Bronze crown (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Silk robe with gold embroidery (250 GP)", 
  uuid: "Silk robe with gold embroidery (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Large well-made tapestry (250 GP)", 
  uuid: "Large well-made tapestry (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Brass mug with jade inlay (250 GP)", 
  uuid: "Brass mug with jade inlay (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Box of turquoise animal figurines (250 GP)", 
  uuid: "Box of turquoise animal figurines (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Gold bird cage with electrum filigree (250 GP)",
  uuid: "Gold bird cage with electrum filigree (250 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const sevenfiftygpartobjectsTypesW = [
{ name:"Silver chalice set with moonstones (750 GP)", 
  uuid: "Silver chalice set with moonstones (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Silver-plated steel longsword with jet set in hilt (750 GP)",
  uuid: "Silver-plated steel longsword with jet set in hilt (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Carved harp of exotic wood with ivory inlay and zircon gems (750 GP)", 
  uuid: "Carved harp of exotic wood with ivory inlay and zircon gems (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Small gold idol (750 GP)",
  uuid: "Small gold idol (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Gold dragon comb set with red garnets as eyes (750 GP)", 
  uuid: "Gold dragon comb set with red garnets as eyes (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Bottle stopper cork embossed with gold leaf and set with amethysts (750 GP)",
  uuid: "Bottle stopper cork embossed with gold leaf and set with amethysts (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Ceremonial electrum dagger with a black pearl in the pommel (750 GP)", 
  uuid: "Ceremonial electrum dagger with a black pearl in the pommel (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Silver and gold brooch (750 GP)",
  uuid: "Silver and gold brooch (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Obsidian statuette with gold fittings and inlay (750 GP)", 
  uuid: "Obsidian statuette with gold fittings and inlay (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Painted gold war mask (750 GP)",
  uuid: "Painted gold war mask (750 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const twentyfivehundredgpartobjectsTypesW = [
{ name:"Fine gold chain set with a fire opal (2500 GP)", 
  uuid: "Fine gold chain set with a fire opal (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Old masterpiece painting (2500 GP)",
  uuid: "Old masterpiece painting (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Embroidered silk and velvet mantle set with numerous moonstones (2500 GP)", 
  uuid: "Embroidered silk and velvet mantle set with numerous moonstones (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Platinum bracelet set with a sapphire (2500 GP)", 
  uuid: "Platinum bracelet set with a sapphire (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Embroidered glove set with jewel chips (2500 GP)", 
  uuid: "Embroidered glove set with jewel chips (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name: "Jeweled anklet (2500 GP)", 
  uuid: "Jeweled anklet (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name: "Gold music box (2500 GP)", 
  uuid: "Gold music box (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Gold circlet set with four aquamarines (2500 GP)",
  uuid: "Gold circlet set with four aquamarines (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Eye patch with a mock eye set in blue sapphire and moonstone (2500 GP)", 
  uuid: "Eye patch with a mock eye set in blue sapphire and moonstone (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"A necklace string of small pink pearls (2500 GP)",
  uuid: "A necklace string of small pink pearls (2500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const seventyfivehundredgpartobjectsTypesW = [
{ name:"Jeweled gold crown (7500 GP)", 
  uuid: "Jeweled gold crown (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Jeweled platinum ring (7500 GP)", 
  uuid: "Jeweled platinum ring (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Small gold statuette set with rubies (7500 GP)", 
  uuid: "Small gold statuette set with rubies (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Gold cup set with emeralds (7500 GP)", 
  uuid: "Gold cup set with emeralds (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Gold jewelry box with platinum filigree (7500 GP)", 
  uuid: "Gold jewelry box with platinum filigree (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Painted gold childs sarcophagus (7500 GP)", 
  uuid: "Painted gold childs sarcophagus (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
{ name:"Jade game board with solid gold playing pieces (7500 GP)",
  uuid: "Jade game board with solid gold playing pieces (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"}, 
{ name:"Bejeweled ivory drinking horn with gold filigree (7500 GP)",
  uuid: "Bejeweled ivory drinking horn with gold filigree (7500 GP)",
  image: "icons/containers/chest/chest-wooden-tied-white.webp"},
];

const woundingSwordTypes = [
  {
    name: "Greatsword of Wounding",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JpwuGtFkfrGibQpP]{Greatsword of Wounding}", 
    image: "icons/skills/melee/blood-slash-foam-red.webp"
  },
  {
    name: "Longsword of Wounding",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.pG6dddIcb9NmPrdt]{Longsword of Wounding}", 
    image: "icons/skills/melee/blood-slash-foam-red.webp"
  },
  {
    name: "Rapier of Wounding",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KJYqNZgdkRwPmPMl]{Rapier of Wounding}", 
    image: "icons/skills/melee/blood-slash-foam-red.webp"
  },
  {
    name: "Scimitar of Wounding",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L4PxYPtYca283sju]{Scimitar of Wounding}", 
    image: "icons/skills/melee/blood-slash-foam-red.webp"
  },
  {
    name: "Shortsword of Wounding",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.902yxeFDwavpm6cv]{Shortsword of Life Stealing}",
    image: "icons/skills/melee/blood-slash-foam-red.webp"
  },
  ];


  const giantslayerTypes = [
    { name: "Giant Slayer Handaxe",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F3rQcaZvElNEiudk]{Giant Slayer Handaxe}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Battleaxe",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YM6bZNmpync83VFa]{Giant Slayer Battleaxe}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Greataxe",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jmSC8I5awCoxNVv7]{Giant Slayer Greataxe}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Greatsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nBFr5xTWeChM7xrb]{Giant Slayer Greatsword}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Longsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xw2kL7Puwg4wfjW3]{Giant Slayer Longsword}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Rapier",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I5PWgE4IF40Iv9h4]{Giant Slayer Rapier}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Scimitar",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZLpj1bpnWlAFUEHE]{Giant Slayer Scimitar}", 
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
    { name: "Giant Slayer Shortsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tTqixDDmzAfs995G]{Giant Slayer Shortsword}",
      image: "icons/skills/melee/strike-stake-gray.webp",
    },
  ];

  const valhallaSorBTypes = [
    { name: "Silver Horn of Valhalla",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lTfo6OVvAY2iJ4oq]{Silver Horn of Valhalla}", 
      image: "icons/tools/instruments/horn-red-grey.webp",
    },
    { name: "Brass Horn of Valhalla",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QYJyQCnIQeLiMrmJ]{Brass Horn of Valhalla}",
      image: "icons/tools/instruments/horn-red-grey.webp",
    },

];

const swordOfAnsweringTypes = [
  { name: "Sword of Answering, Answerer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yh0xM0qtQnKNOcnw]{SoA, Answerer}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Back Talker",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OY8sdprk0jkizbhN]{SoA, Back Talker}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Concluder",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CBIsWObzGPgx7W4E]{SoA, Concluder}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Last Quip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f4KJ8yk7U5bGj5t5]{SoA, Last Quip}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",  
  },
  { name: "Sword of Answering, Rebutter",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nYD07jP6J62d6VcN]{SoA, Rebutter}",
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Replier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cOn69LtWZ0b5CO33]{SoA, Replier}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Retorter",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KsRxJ9nVvRNzTYEV]{SoA, Retorter}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Scather",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.COcxcgLxltEDUuZk]{SoA, Scather}", 
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
  { name: "Sword of Answering, Squelcher",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.pvs0ckFTFOB6ArUC]{SoA, Squelcher}",
    image: "icons/skills/melee/hand-grip-sword-orange.webp",
  },
];

const lifeStealSwordTypes = [
  {
    name: "Greatsword of Life Stealing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sdHSbitJxgTX6aDG]{Greatsword of Life Stealing}", 
    image: "icons/creatures/claws/claw-curved-poison-purple.webp"
  },
  {
    name: "Longsword of Life Stealing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wtctR6tCcYbQPiS0]{Longsword of Life Stealing}", 
    image: "icons/creatures/claws/claw-curved-poison-purple.webp"
  },
  {
    name: "Rapier of Life Stealing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p01JzD9RpIOkJiqK]{Rapier of Life Stealing}", 
    image: "icons/creatures/claws/claw-curved-poison-purple.webp"
  },
  {
    name: "Scimitar of Life Stealing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sfegfmo59MHJg2YC]{Scimitar of Life Stealing}", 
    image: "icons/creatures/claws/claw-curved-poison-purple.webp"
  },
  {
    name: "Shortsword of Life Stealing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.902yxeFDwavpm6cv]{Shortsword of Life Stealing}",
    image: "icons/creatures/claws/claw-curved-poison-purple.webp"
  },
  ];

const dancingSwordTypes = [
    { name: "Dancing Greatsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zWSB0NCllWaSVoNT]{Dancing Greatsword}", 
      image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
    },
    { name: "Dancing Longsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sIiUbRJItYAs5gtA]{Dancing Longsword}", 
      image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
    },
    { name: "Dancing Rapier",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6n8J07mFo8xs11vS]{Dancing Rapier}", 
      image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
    },
    { name: "Dancing Scimitar",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kOYXMf4GTtD7OqbD]{Dancing Scimitar}", 
      image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
    },
    { name: "Dancing Shortsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.stlFCpqW3ZuAftTi]{Dancing Shortsword}",
      image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
    },
    ];

const figurineTypes = [
      { name: "Figurine of Wondrous Power (Bronze Griffon)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CI58LNiwrTpmWYMp]{Figurine of Wondrous Power (Bronze Griffon)}", 
        image: "icons/commodities/bones/hurn-curved-yellow.webp",
      },
      { name: "Figurine of Wondrous Power (Ebony Fly)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.s2kQs21J3cFg7ZSs]{Figurine of Wondrous Power (Ebony Fly)}", 
        image: "icons/commodities/biological/legs-insect-brown.webp",
      },
      { name: "Figurine of Wondrous Power (Golden Lions)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Minr6xegwoHFvAjG]{Figurine of Wondrous Power (Golden Lions)}", 
        image: "icons/commodities/claws/claw-canine-brown-grey.webp",
      },
      { name: "Figurine of Wondrous Power (Ivory Goats)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kxOU9lx2sJ8vbM5s]{Figurine of Wondrous Power (Ivory Goats)}",
        image: "icons/creatures/mammals/goat-horned-blue.webp",
      },
      { name: "Figurine of Wondrous Power (Marble Elephant)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GP2bvHlxVi30OEmo]{Figurine of Wondrous Power (Marble Elephant)}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
        image: "icons/commodities/bones/horn-simple-grey.webp",
      }, 
      { name: "Figurine of Wondrous Power (Onyx Dog)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9nxSHbqlDdngtuuz]{Figurine of Wondrous Power (Onyx Dog)}", 
        image: "icons/sundries/misc/pet-collar-red.webp",
      },
      { name: "Figurine of Wondrous Power (Onyx Dog)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9nxSHbqlDdngtuuz]{Figurine of Wondrous Power (Onyx Dog)}", 
        image: "icons/sundries/misc/pet-collar-red.webp",
      },
      { name: "Figurine of Wondrous Power (Serpentine Owl)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XEH5YErAN1WSytln]{Figurine of Wondrous Power (Serpentine Owl)}",
        image: "icons/commodities/materials/feather-white.webp",
      },
    ];

const basicWeaponTypes = [
  {
    name: "Club",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nfIRTECQIG81CvM4]{Club}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0E565kQUBmndJ1a2]{Dagger}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QRCsxkCwWNwswL9o]{Greatclub}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eO7Fbv5WBk5zvGOc]{Handaxe}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DWLMnODrnHn8IbAG]{Javelin}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XVK6TOL4sGItssAE]{Light Hammer}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ajyq6nGwF7FtLhDQ]{Mace}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.g2dWN7PQiMRYWzyk]{Quarterstaff}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i4NeNZ30ycwPDHMx]{Sickle}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OG4nBBydvmfWYXIk]{Spear}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WayPSq1eSziedayE]{Yklwa}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomeraang",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W2AyhchcGrZ71aqN]{Boomerang}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ddWvQRLmnnIS0eLF]{Light Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3rCO8MTIdPGSW6IJ]{Dart}",
    image: "icons/weapons/thrown/dart-feathered.webp",
  },
  {
    name: "Shortbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GJv6WkD7D2J6rP6M]{Shortbow}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3gynWO9sN4OLGMWD]{Sling}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I0WocDSuNpGJayPb]{Battleaxe}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UrH3sMdnUDckIHJ6]{Flail}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rOG1OM2ihgPjOvFW]{Glaive}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1Lxk6kmoRhG8qQ0u]{Greataxe}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xMkP8BmFzElcsMaR]{Greatsword}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DMejWAc8r8YvDPP1]{Halberd}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RnuxdHUAIgxccVwj]{Lance}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.10ZP2Bu3vnCuYMIB]{Longsword}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DizirD7eqjh8n95A]{Maul}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dX8AxCh9o0A9CkT3]{Morningstar}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tC0kcqZT9HHAO0PD]{Pike}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Tobce1hexTnDk4sV]{Rapier}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fbC0Mg1a73wdFbqO]{Scimitar}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.osLzOwQdPtrK3rQH]{Shortsword}", 
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F65ANO66ckP8FDMa]{Trident}", 
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YdfjN1PIIrSHZii]{War Pick}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F0Df164Xv1gWcYt0]{Warhammer}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QKTyxoO0YDnAsbYe]{Whip}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wNWK6yJMHG9ANqQV]{Blowgun}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qaSro7kFhxD6INbZ]{Hand Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RmP0mYRn2J7K26rX]{Heavy Crossbow}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3cymOVja8jXbzrdT]{Longbow}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aEiM49V8vWpWw7rU]{Net}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];

const pOneWeaponTypes = [
  {
    name: "Club +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
    image: "icons/weapons/thrown/dagger-simple.webp",
  },
  {
    name: "Shortbow +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];

const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];

const pThreeWeaponTypes = [
  {
    name: "Club +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HdC66U61pDOknaux]{Club +3}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bWI5i4RbyGKT6Eiq]{Dagger +3}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mkyltDYnuzNU3kmF]{Greatclub +3}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cmnBssaWWzWWm70C]{Handaxe +3}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FhtjbeBeP4q5vTyc]{Javelin +3}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y08Al2dMN8he1hFK]{Light Hammer +3}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2CQnAvn06bncXPBt]{Mace +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BmWnprrj0QWQ1BL3]{Quarterstaff +3}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AHn15T1TOuDFS0GH]{Sickle +3}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.62EaozKvcA0aSy2q]{Spear +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p5gg8Rs2nHOBJmny]{Yklwa +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KMss63oWVZm0tPVp]{Boomerang +3}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.amRx3jOYlPeXEiAN]{Light Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.izF3kmyFEVI5TWhp]{Dart +3}",
    image: "icons/weapons/thrown/dagger-ringed-steel.webp",
  },
  {
    name: "Shortbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.egJhGFU3v5OfjPNS]{Shortbow +3}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3WqP3r2emnumyUF]{Sling +3}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kNlvoSTcdMqxJPmI]{Battleaxe +3}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wgBKZNeRN1XsE9I7]{Flail +3}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rc9nkN6YOD7ogtEi]{Glaive +3}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAa2EG5kzmqxcp46]{Greataxe +3}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RfEZvwcLwe6Ih0LQ]{Greatsword +3}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EU78dSbnr91QWZ7g]{Halberd +3}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r97KnMO7Zxgfdh3P]{Lance +3}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H6SIiRIig7OMM2Z0]{Longsword +3}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P8f9o36qxagW2uRW]{Maul +3}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dghpiMWDSUXtQf6X]{Morningstar +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YH1o1Wa4gcdN3fh]{Pike +3}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YevPP0DZXgAcLmzv]{Rapier +3}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wK9ImkAeG3Lzxa0]{Scimitar +3}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uIHXYhnOwETlA5lT]{Shortsword +3}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9fFB1uaGJvcXTf7]{Trident +3}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nrvAo3TznyQrHS1t]{War Pick +3}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.setcTdSZ09rmsqMn]{Warhammer +3}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jcQqI0pxLD2nNNQ4]{Whip +3}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HQJ8tiyyrJJSUSyF]{Blowgun +3}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oG4rvCuMstgl4Nez]{Hand Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sj4zEvuGcSV6anKm]{Heavy Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8W6ULfSqzuHh6Peg]{Longbow +3}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iIuNqnpWCHrLEKWj]{Net +3}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];

const cantripTypes = [
"Acid Splash", "Blade Ward", "Booming Blade", "Chill Touch", "Control Flames", "Create Bonfire", 
"Dancing Lights", "Druidcraft", "Eldritch Blast", "Encode Thoughts", "Fire Bolt", "Friends",
"Frostbite", "Green-Flame Blade", "Guidance", "Gust", "Infestation", "Light", "Lightning Lure",
"Mage Hand", "Magic Stone", "Mending", "Message", "Mind Sliver", "Minor Illusion", "Mold Earth",
"Poison Spray", "Prestidigitation", "Primal Savagery", "Produce Flame", "Ray of Frost", "Resistance", 
"Sacred Flame", "Sapping Sting", "Shape Water", "Shillelagh", "Shocking Grasp", "Spare the Dying", 
"Sword Burst", "Thaumaturgy", "Thorn Whip", "Thunderclap", "Toll the Dead", "True Strike", "Vicious Mockery",
"Word of Radiance",
];

const firstlevelspellTypes = [
  "Absorb Elements", "Alarm", "Animal Friendship", "Armor of Agathys", "Arms of Hadar",
  "Bane", "Beast Bond", "Bless", "Burning Hands", "Catapult", "Cause Fear", "Ceremony", 
  "Chaos Bolt", "Charm Person", "Chromatic Orb", "Color Spray", "Command", "Compelled Duel", 
  "Comprehend Languages", "Create or Destroy Water", "Cure Wounds", "Detect Evil and Good", "Detect Magic",
  "Detect Poison and Disease", "Disguise Self", "Dissonant Whispers", "Distort Value", "Divine Favor",
  "Earth Tremor", "Ensnaring Strike", "Entangle", "Expeditious Retreat", "Faerie Fire", "False Life",
  "Feather Fall", "Find Familiar", "Floating Disk", "Fog Cloud", "Frost Fingers", "Gift of Alacrity",
  "Goodberry", "Grease", "Guiding Bolt", "Hail of Thorns", "Healing Word", "Hellish Rebuke", "Heroism",
  "Hex", "Hideous Laughter", "Hunters Mark", "Ice Knife", "Identify", "Illusory Script", "Inflict Wounds",
  "Jims Magic Missile", "Jump", "Longstrider", "Mage Armor", "Magic Missile", "Magnify Gravity",
  "Protection from Evil and Good", "Purify Food and Drink", "Ray of Sickness", "Sanctuary", "Searing Smite",
  "Shield", "Shield of Faith", "Silent Image", "Silvery Barbs", "Sleep", "Snare", "Speak with Animals", 
  "Tashas Hideous Laughter", "Tashas Caustic Brew", "Tensers Floating Disk", "Thunderous Smite", "Thunderwave",
  "Unseen Servant", "Witch Bolt", "Wrathful Smite","Zephyr Strike",
];

const secondlevelspellTypes = [
  "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
  "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
  "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
  "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
  "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
  "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
  "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
  "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
  "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
  "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
  "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
  "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
  "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
  "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
  "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
  "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
  "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
];

const thirdlevelspellTypes = [
  "Animate Dead", "Ashardalons Stride", "Aura of Vitality", "Beacon of Hope", "Bestow Curse",
  "Blinding Smite", "Blink", "Call Lightning", "Catnap", "Clairvoyance",
  "Conjure Animals", "Conjure Barrage", "Counterspell", "Create Food and Water", "Crusaders Mantle",
  "Daylight", "Dispel Magic", "Elemental Weapon", "Enemies Abound", "Erupting Earth",
  "Fast Friends", "Fear", "Feign Death", "Fireball", "Flame Arrows",
  "Fly", "Freedom of the Waves", "Galders Tower", "Gaseous Form", "Glyph of Warding",
  "Haste", "Hunger of Hadar", "Hypnotic Pattern", "Incite Greed", "Intellect Fortress",
  "Leomunds Tiny Hut", "Life Transference", "Lightning Arrow", "Lightning Bolt", "Magic Circle",
  "Major Image", "Mass Healing Word", "Meld into Stone", " Melfs Minute Meteors", "Motivational Speech",
  "Nondetection", "Phantom Steed", "Plant Growth", "Protection from Energy", "Pulse Wave",
  "Remove Curse", "Revivify", "Sending", "Sleet Storm", "Slow",
  "Speak with Dead", "Speak with Plants", "Spirit Guardians", "Spirit Shroud", "Stinking Cloud",
  "Summon Fey", "Summon Lesser Demon", "Summon Shadowspawn", "Summon Undead", "Thunder Step",
  "Tidal Wave", "Tiny Hut", "Tiny Servant", "Tongues", "Vampiric Touch",
  "Wall of Sand", "Wall of Water", "Water Breathing", "Water Walk", "Wind Wall",
];

const forthlevelspellTypes = [
"Arcane Eye", "Aura of Life", "Aura of Purity", "Banishment", "Black Tentacles",
"Blight", "Charm Monster", "Compulsion", "Confusion", "Conjure Minor Elementals",
"Conjure Woodland Beings", "Control Water", "Death Ward", "Dimension Door", "Divination",
"Dominate Beast", "Elemental Bane", "Evards black tentacles", "Fabricate", "Faithful Hound",
"Find Greater Steed", "Fire Shield", "Freedom of Movement", "Galders Speedy Courier", "Giant Insect",
"Grasping Vine", "Gravity Sinkhole", "Greater Invisibility", "Guardian of Faith", "Guardian of Nature",
"Hallucinatory Terrain", "Ice Storm", "Leomunds secret chest", "Locate Creature", "Mordenkainens Faithful Hound",
"Mordenkainens Private Sanctum", "Otilukes Resilient Sphere", "Phantasmal Killer", "Polymorph", "Private Sanctum",
"Raulothims Psychic Lance", "Resilient Sphere", "Secret Chest", "Shadow of Moil", "Sickening Radiance",
"Staggering Smite", "Stone Shape", "Stoneskin", "Storm Sphere", "Summon Aberration",
"Summon Construct", "Summon Elemental", "Summon Greater Demon", "Vitriolic Sphere", "Wall of Fire",
"Watery Sphere",
];

const fifthlevelspellTypes = [
"Animate Objects", "Antilife Shell", "Arcane Hand", "Awaken", "Banishing Smite",
"Bigbys Hand", "Circle of Power", "Cloudkill", "Commune", "Commune with Nature",
"Cone of Cold", "Conjure Elemental", "Conjure Volley", "Contact Other Plane", "Contagion",
"Control Winds", "Create Spelljamming Helm", "Creation", "Danse Macabre", "Dawn",
"Destructive Wave", "Dispel Evil and Good", "Dominate Person", "Dream", "Enervation",
"Far Step", "Flame Strike", "Freedom of the Winds", "Geas", "Greater Restoration",
"Hallow", "Hold Monster", "Holy Weapon", "Immolation", "Infernal Calling",
"Insect Plague", "Legend Lore", "Maelstrom", "Mass Cure Wounds", "Mislead",
"Modify Memory", "Negative Energy Flood", "Passwall", "Planar Binding", "Raise Dead",
"Rarys Telepathic Bond", "Reincarnate", "Scrying", "Seeming", "Skill Empowerment",
"Steel Wind Strike", "Summon Celestial", "Summon Draconic Spirit", "Swift Quiver", "Synaptic Static",
"Telekinesis", "Telepathic Bond", "Teleportation Circle", "Temporal Shunt", "Transmute Rock",
"Tree Stride", "Wall of Force", "Wall of Light", "Wall of Stone", "Wrath of Nature",
];

const sixthlevelspellTypes = [
  "Arcane Gate", "Blade Barrier", "Bones of the Earth", "Chain Lightning", "Circle of Death",
  "Conjure Fey", "Contingency", "Create Homunculus", "Create Undead", "Disintegrate",
  "Drawmijs Instant Summons", "Druid Grove", "Eyebite", "Find the Path", "Fizbans Platinum Shield",
  "Flesh to Stone", "Forbiddance", "Freezing Sphere", "Globe of Invulnerability", "Gravity Fissure",
  "Guards and Wards", "Harm", "Heal", "Heroes Feast", "Instant Summons",
  "Investiture of Flame", "Investiture of Ice", "Investiture of Stone", "Investiture of Wind", "Magic Jar",
  "Mass Suggestion", "Mental Prison", "Move Earth", "Otilukes Freezing Sphere", "Ottos Irresistible Dance",
  "Planar Ally", "Primordial Ward", "Programmed Illusion", "Scatter", "Soul Cage",
  "Summon Fiend", "Sunbeam", "Tashas Otherworldly Guise", "Tensers Transformation", "Transport via Plants",
  "True Seeing", "Wall of Ice", "Wall of Thorns", "Wind Walk", "Word of Recall",
  ];
  
const seventhlevelspellTypes = [
"Conjure Celestial", "Create Magen", "Crown of Stars", "Delayed Blast Fireball", "Divine Word",
"Draconic Transformation", "Dream of the Blue Veil", "Etherealness", "Finger of Death", "Fire Storm",
"Forcecage", "Magnificent Mansion", "Mirage Arcane", "Mordenkainens Magnificent Mansion", "Mordenkainens Sword",
"Plane Shift", "Power Word Pain", "Prismatic Spray", "Project Image", "Regenerate",
"Resurrection", "Reverse Gravity", "Sequester", "Simulacrum", "Symbol",
"Teleport", "Temple of the Gods", "Tether Essence", "Whirlwind",
];

const eighthlevelspellTypes = [
"Abi-Dalzims Horrid Wilting", "Animal Shapes", "Antimagic Field", "Antipathy/Sympathy", "Clone",
"Control Weather", "Dark Star", "Demiplane", "Dominate Monster", "Earthquake",
"Feeblemind", "Glibness", "Holy Aura", "Illusory Dragon", "Incendiary Cloud",
"Maddening Darkness", "Maze", "Mighty Fortress", "Mind Blank", "Power Word Stun",
"Reality Break", "Sunburst", "Telepathy", "Tsunami",
];

const ninthlevelspellTypes = [
"Astral Projection", "Blade of Disaster", "Foresight", "Gate", "Imprisonment",
"Invulnerability", "Mass Heal", "Mass Polymorph", "Meteor Swarm", "Power Word Heal",
"Power Word Kill", "Prismatic Wall", "Psychic Scream", "Ravenous Void", "Shapechange",
"Storm of Vengeance", "Time Ravage", "Time Stop", "True Polymorph", "True Resurrection",
"Weird", "Wish",
];

const spellWroughtTypes = [
  "Acid Splash", "Blade Ward", "Booming Blade", "Chill Touch", "Control Flames", "Create Bonfire", 
  "Dancing Lights", "Druidcraft", "Eldritch Blast", "Encode Thoughts", "Fire Bolt", "Friends",
  "Frostbite", "Green-Flame Blade", "Guidance", "Gust", "Infestation", "Light", "Lightning Lure",
  "Mage Hand", "Magic Stone", "Mending", "Message", "Mind Sliver", "Minor Illusion", "Mold Earth",
  "Poison Spray", "Prestidigitation", "Primal Savagery", "Produce Flame", "Ray of Frost", "Resistance", 
  "Sacred Flame", "Sapping Sting", "Shape Water", "Shillelagh", "Shocking Grasp", "Spare the Dying", 
  "Sword Burst", "Thaumaturgy", "Thorn Whip", "Thunderclap", "Toll the Dead", "True Strike", "Vicious Mockery",
  "Word of Radiance", "Absorb Elements", "Alarm", "Animal Friendship", "Armor of Agathys", "Arms of Hadar",
  "Bane", "Beast Bond", "Bless", "Burning Hands", "Catapult", "Cause Fear", "Ceremony", 
  "Chaos Bolt", "Charm Person", "Chromatic Orb", "Color Spray", "Command", "Compelled Duel", 
  "Comprehend Languages", "Create or Destroy Water", "Cure Wounds", "Detect Evil and Good", "Detect Magic",
  "Detect Poison and Disease", "Disguise Self", "Dissonant Whispers", "Distort Value", "Divine Favor",
  "Earth Tremor", "Ensnaring Strike", "Entangle", "Expeditious Retreat", "Faerie Fire", "False Life",
  "Feather Fall", "Find Familiar", "Floating Disk", "Fog Cloud", "Frost Fingers", "Gift of Alacrity",
  "Goodberry", "Grease", "Guiding Bolt", "Hail of Thorns", "Healing Word", "Hellish Rebuke", "Heroism",
  "Hex", "Hideous Laughter", "Hunters Mark", "Ice Knife", "Identify", "Illusory Script", "Inflict Wounds",
  "Jims Magic Missile", "Jump", "Longstrider", "Mage Armor", "Magic Missile", "Magnify Gravity",
  "Protection from Evil and Good", "Purify Food and Drink", "Ray of Sickness", "Sanctuary", "Searing Smite",
  "Shield", "Shield of Faith", "Silent Image", "Silvery Barbs", "Sleep", "Snare", "Speak with Animals", 
  "Tashas Hideous Laughter", "Tashas Caustic Brew", "Tensers Floating Disk", "Thunderous Smite", "Thunderwave",
  "Unseen Servant", "Witch Bolt", "Wrathful Smite","Zephyr Strike",
  "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
  "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
  "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
  "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
  "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
  "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
  "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
  "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
  "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
  "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
  "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
  "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
  "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
  "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
  "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
  "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
  "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
  "Animate Dead", "Ashardalons Stride", "Aura of Vitality", "Beacon of Hope", "Bestow Curse",
  "Blinding Smite", "Blink", "Call Lightning", "Catnap", "Clairvoyance",
  "Conjure Animals", "Conjure Barrage", "Counterspell", "Create Food and Water", "Crusaders Mantle",
  "Daylight", "Dispel Magic", "Elemental Weapon", "Enemies Abound", "Erupting Earth",
  "Fast Friends", "Fear", "Feign Death", "Fireball", "Flame Arrows",
  "Fly", "Freedom of the Waves", "Galders Tower", "Gaseous Form", "Glyph of Warding",
  "Haste", "Hunger of Hadar", "Hypnotic Pattern", "Incite Greed", "Intellect Fortress",
  "Leomunds Tiny Hut", "Life Transference", "Lightning Arrow", "Lightning Bolt", "Magic Circle",
  "Major Image", "Mass Healing Word", "Meld into Stone", " Melfs Minute Meteors", "Motivational Speech",
  "Nondetection", "Phantom Steed", "Plant Growth", "Protection from Energy", "Pulse Wave",
  "Remove Curse", "Revivify", "Sending", "Sleet Storm", "Slow",
  "Speak with Dead", "Speak with Plants", "Spirit Guardians", "Spirit Shroud", "Stinking Cloud",
  "Summon Fey", "Summon Lesser Demon", "Summon Shadowspawn", "Summon Undead", "Thunder Step",
  "Tidal Wave", "Tiny Hut", "Tiny Servant", "Tongues", "Vampiric Touch",
  "Wall of Sand", "Wall of Water", "Water Breathing", "Water Walk", "Wind Wall",
  "Arcane Eye", "Aura of Life", "Aura of Purity", "Banishment", "Black Tentacles",
  "Blight", "Charm Monster", "Compulsion", "Confusion", "Conjure Minor Elementals",
  "Conjure Woodland Beings", "Control Water", "Death Ward", "Dimension Door", "Divination",
  "Dominate Beast", "Elemental Bane", "Evards black tentacles", "Fabricate", "Faithful Hound",
  "Find Greater Steed", "Fire Shield", "Freedom of Movement", "Galders Speedy Courier", "Giant Insect",
  "Grasping Vine", "Gravity Sinkhole", "Greater Invisibility", "Guardian of Faith", "Guardian of Nature",
  "Hallucinatory Terrain", "Ice Storm", "Leomunds secret chest", "Locate Creature", "Mordenkainens Faithful Hound",
  "Mordenkainens Private Sanctum", "Otilukes Resilient Sphere", "Phantasmal Killer", "Polymorph", "Private Sanctum",
  "Raulothims Psychic Lance", "Resilient Sphere", "Secret Chest", "Shadow of Moil", "Sickening Radiance",
  "Staggering Smite", "Stone Shape", "Stoneskin", "Storm Sphere", "Summon Aberration",
  "Summon Construct", "Summon Elemental", "Summon Greater Demon", "Vitriolic Sphere", "Wall of Fire",
  "Watery Sphere", "Animate Objects", "Antilife Shell", "Arcane Hand", "Awaken", "Banishing Smite",
  "Bigbys Hand", "Circle of Power", "Cloudkill", "Commune", "Commune with Nature",
  "Cone of Cold", "Conjure Elemental", "Conjure Volley", "Contact Other Plane", "Contagion",
  "Control Winds", "Create Spelljamming Helm", "Creation", "Danse Macabre", "Dawn",
  "Destructive Wave", "Dispel Evil and Good", "Dominate Person", "Dream", "Enervation",
  "Far Step", "Flame Strike", "Freedom of the Winds", "Geas", "Greater Restoration",
  "Hallow", "Hold Monster", "Holy Weapon", "Immolation", "Infernal Calling",
  "Insect Plague", "Legend Lore", "Maelstrom", "Mass Cure Wounds", "Mislead",
  "Modify Memory", "Negative Energy Flood", "Passwall", "Planar Binding", "Raise Dead",
  "Rarys Telepathic Bond", "Reincarnate", "Scrying", "Seeming", "Skill Empowerment",
  "Steel Wind Strike", "Summon Celestial", "Summon Draconic Spirit", "Swift Quiver", "Synaptic Static",
  "Telekinesis", "Telepathic Bond", "Teleportation Circle", "Temporal Shunt", "Transmute Rock",
  "Tree Stride", "Wall of Force", "Wall of Light", "Wall of Stone", "Wrath of Nature",
];

const protectionScrollTypes = [
  {
    name:"Scroll of Protection (Aberrations)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HFhOuMYm5hAT9zrV]{Scroll of Protection (Aberrtions)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name:"Scroll of Protection (Beasts)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ofVljzBddj5AwZVL]{Scroll of Protection (Beasts)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name: "Scroll of Protection (Celestials)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uKjHqaQlEiVRA5co]{Scroll of Protection (Celestials)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name: "Scroll of Protection (Elementals)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0BOfmF8Zqw3WbS1R]{Scroll of Protection (Elementals)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name: "Scroll of Protection (Fey)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dKLZBP8tCWtkb9a3]{Scroll of Protection (Fey)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name: "Scroll of Protection (Fiends)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7TUH4Jz7alampzRB]{Scroll of Protection (Fiends)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name: "Scroll of Protection (Plants)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ohgMcSdLpTP4b000]{Scroll of Protection (Plants)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
  {
    name: "Scroll of Protection (Undead)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lktJvTqWCZ1zMwCK]{Scroll of Protection (Undead)}",
    image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
  },
];

const featherTokenTypes = [
  { name: "Feather Token Anchor", 
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DnlQkH6Bpwkd5n5Y]{Feather Token Anchor}", 
    image: "icons/commodities/materials/feather-blue.webp",},
  { name: "Feather Token Bird",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hWqImieUaLo08l9l]{Feather Token Bird}", 
    image: "icons/commodities/materials/feather-yellow.webp",},
  { name: "Feather Token Fan",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.e98hfROZjztt7ccO]{Feather Token Fan}", 
    image: "icons/commodities/materials/feather-colored-red.webp",},
  { name: "Feather Token Swan Boat",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UgnUJhu0tW1tLt7g]{Feather Token Swan Boat}", 
    image: "icons/commodities/materials/feather-blue-grey.webp",},
  { name: "Feather Token Tree",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NjTgPn2o0M1TGk93]{Feather Token Tree}",
    image: "icons/commodities/materials/feather-colored-green.webp",},
  { name: "Feather Token Whip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fgkj11diTJJ7H3JC]{Feather Token Whip}",   
    image: "icons/commodities/materials/feather-colored-blue.webp",},
];


const shardAlignmentTypes = [
  "Lawful", "Chaotic", "Good", "Evil",
];

const shardElementTypes = [
  "Air", "Earth", "Fire", "Water",
];

const resistanceTypes = [
  "Acid", "Cold", "Fire", "Force", "Lightning",
  "Necrotic", "Poison", "Psychic", "Radiant", "Thunder",
];

const potionResistanceTypes = [
    { name: "Potion of Acid Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zgZkJAyFAfYmyn11]{Potion of Acid Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Cold Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.34YKlIJVVWLeBv7R]{Potion of Cold Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Fire Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Jj4iFQQGvckx8Wsj]{Potion of Fire Resistance}", 
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Force Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kKGJjVVlJVoakWgQ]{Potion of Force Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Lightning Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8MPnSrvEeZhPhtTi]{Potion of Lightning Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Necrotic Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xw99pcqPBVwtMOLw]{Potion of Necrotic Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Poison Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f5chGcpQCi1HYPQw]{Potion of Poison Resistance}", 
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Psychic Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.c0luemOP0iW8L23R]{Potion of Psychic Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Radiant Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LBQWNqX6hZOKhQ8a]{Potion of Radiant Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Thunder Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zBX8LLC2CjC89Dzl]{Potion of Thunder Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  ];

  const ringResistanceTypes = [
    { name: "Ring of Acid Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WO8DLfz3G2QZ5njs]{Ring of Acid Resistance}", 
      image: "icons/equipment/finger/ring-band-engraved-scrolls-silver.webp" 
    },
    { name: "Ring of Cold Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fvezXwRJ5PqUf5NN]{Ring of Cold Resistance}",
      image: "icons/equipment/finger/ring-faceted-silver-orange.webp"
    }, 
    { name: "Ring of Fire Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3X7vdOjnCSpi40yn]{Ring of Fire Resistance}",
      image: "icons/equipment/finger/ring-band-thin-silver-teal.webp"
    },   
    { name: "Ring of Force Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ScxK8YNU5dWELhlQ]{Ring of Force Resistance}", 
      image: "icons/equipment/finger/ring-faceted-gold-purple.webp"
    },
    { name: "Ring of Lightning Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJ8CG4UvLELCmOi2]{Ring of Lightning Resistance}",
      image: "icons/equipment/finger/ring-band-notched-gold.webp"
    },
    { name: "Ring of Necrotic Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qMGkmzfLHfXd7DiJ]{Ring of Necrotic Resistance}", 
      image: "icons/equipment/finger/ring-signet-tech.webp"
    },
    { name: "Ring of Poison Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5SorTMl8NKDO9Yge]{Ring of Poison Resistance}",
      image: "icons/equipment/finger/ring-cabochon-notched-gold-green.webp"
    }, 
    { name: "Ring of Psychic Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Q7E6MgPzVkwBeZ6l]{Ring of Psychic Resistance}",
      image: "icons/equipment/finger/ring-cabochon-engraved-gold-teal.webp"
    }, 
    { name: "Ring of Radiant Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IrC5LPbWNxlAQoK7]{Ring of Radiant Resistance}", 
      image: "icons/equipment/finger/ring-band-studded.webp"
    },
    { name: "Ring of Thunder Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IpBBqr0r7JanyVn0]{Ring of Thunder Resistance}",
      image: "icons/equipment/finger/ring-faceted-grey.webp"
    },
  ];

  const crystalBallLtypes = [
    { name: "Crystal Ball of Mind Reading",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TwYeck6buBZ602mg]{Crystal Ball of Mind Reading}", 
      image: "icons/commodities/gems/pearl-storm.webp",
    },
    { name: "Crystal Ball of Telepathy",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5KiRtMMSTnJmMtBr]{Crystal Ball of Telepathy}", 
      image: "icons/commodities/gems/pearl-swirl-blue.webp",
    },
    { name: "Crystal Ball of True Seeing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ADH0UZ8bf7Op0dgf]{Crystal Ball of True Seeing}", 
      image: "icons/commodities/gems/pearl-fire.webp",
    },
    ];

const armor12Types = [
  { name: "Half Plate Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}", 
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
  },
  { name: "Half Plate Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}", 
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
  }, 
  { name: "Plate Armor +2",      
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}", 
    image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
  },
  { name: "Plate Armor +2",      
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}", 
    image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
  },
  { name: "Studded Leather Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.00BggOkChWztQx6R]{Studded Leather Armor +3}",
    image: "icons/equipment/chest/breastplate-rivited-red.webp",
  }, 
  { name: "Studded Leather Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.00BggOkChWztQx6R]{Studded Leather Armor +3}",
    image: "icons/equipment/chest/breastplate-rivited-red.webp",
  },
  { name: "Breastplate +3",        
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JDTO996oInbiZGHW]{Breastplate +3}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
  }, 
  { name: "Breastplate +3",        
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JDTO996oInbiZGHW]{Breastplate +3}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
  }, 
  { name: "Splint Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwC8hZaNjO7IQc6K]{Splint Armor +3}", 
    image: "icons/equipment/chest/breastplate-layered-steel.webp",
  },
  { name: "Splint Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwC8hZaNjO7IQc6K]{Splint Armor +3}", 
    image: "icons/equipment/chest/breastplate-layered-steel.webp",
  },
  { name: "Half Plate Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xbVpKtrQ6tJsPhXX]{Half Plate Armor +3}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
  },
  { name: "Plate Armor +3", 
  uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.466j8hy4AiENMHVQ]{Plate Armor +3}",
  image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
  },
];

const armorAdamantineTypes = [
  { 
    name: "Adamantine Chain Shirt",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kjTPoUeomTPWJ9h3]{Adamantine Chain Shirt}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  }, 
  { 
    name: "Adamantine Scale Mail",
    uuid:"@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LdAj2ES9EzfnWcA1]{Adamantine Scale Mail}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Adamantine Breastplate",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DevmObXWP9MfwE2c]{Adamantine Breastplate}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  {
    name: "Adamantine Half Plate",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.159agyOuBHCl2WKd]{Adamantine Half Plate Armor}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  {
    name: "Adamantine Ring Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UpHAWqwifZpiZzns]{Adamantine Ring Mail}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Adamantine Chain Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n7fm71CN7qDIBEKk]{Adamantine Chain Mail}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Adamantine Splint Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LDuqUcosOK8Bf76S]{Adamantine Splint Armor}",
    image: "icons/equipment/chest/breastplate-layered-steel.webp"
  },
  {
    name: "Adamantine Plate Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sP8CV5VNEcY1Yh1Q]{Adamantine Plate Armor}",
    image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
  },
];

const marinersArmorTypes = [
  {
    name: "Mariner's Padded Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EzOoPK3tqneyK6Yh]{Mariner's Padded Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Leather Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tU4Knu4VqbeQN6Nn]{Mariner's Leather Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Studded Leather Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cyRLW2TPOIUWrrtR]{Mariner's Studded Leather Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Hide Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qtRpVOkQSAbVmDm0]{Mariner's Hide Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Chain Shirt",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5R8mB9JKe0oW1C64]{Mariner's Chain Shirt}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Scale Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM6O1jBmhk97ilAz]{Mariner's Scale Mail}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Breastplate",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m78aGIvd62sQwIPT]{Mariner's Breastplate}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Half Plate Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwKJYLhH2anOjHZP]{Mariner's Half Plate Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Ring Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P36nZk3bDgibLpXq]{Mariner's Ring Mail}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Chain Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fts0Bt0I3aWpgYYZ]{Mariner's Chain Mail}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Splint Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EsrWR1yllXBZLBim]{Mariner's Splint Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
  {
    name: "Mariner's Plate Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eehnkUUtgy2uZNQa]{Mariner's Plate Armor}",
    image: "icons/tools/navigation/sextant-steel-blue.webp"
  },
];

const simpleArmorTypes = [
  {
    name: "Padded Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
    image: "icons/equipment/chest/breastplate-quilted-brown.webp"
  },  
  { 
    name: "Leather Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
    image: "icons/equipment/chest/breastplate-quilted-brown.webp"
  },  
  {
    name: "Studded Leather Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
    image: "icons/equipment/chest/breastplate-rivited-red.webp"
  },
  { 
    name: "Hide Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
    image: "icons/equipment/chest/breastplate-scale-leather.webp"
  },
  { 
    name: "Chain Shirt",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  { 
    name: "Scale Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  { 
    name: "Breastplate",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  { 
    name: "Half Plate",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  { 
    name: "Ring Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  { 
    name: "Chain Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  { 
    name: "Splint Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
    image: "icons/equipment/chest/breastplate-layered-steel.webp"
  },
  { 
    name: "Plate Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
    image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
  },  
  ];

const pOneArmorTypes = [
    { 
      name: "Padded Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.twRJhPtDQe1HceFt]{Padded Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    }, 
    { 
      name: "Studded Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k2B9P3gm2NGjJ1m0]{Hide Armor +1}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name:  "Scale Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM1dPyKwHw2DyUWA]{Ring Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];

const pTwoArmorTypes = [
  {
    name: "Padded Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G9XQPNLlDXkpVxn1]{Padded Armor +2}",
    image: "icons/equipment/chest/breastplate-quilted-brown.webp"
  },
  {
    name: "Leather Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UT8zCwmdXVQlBiyl]{Leather Armor +2}",
    image: "icons/equipment/chest/breastplate-quilted-brown.webp"
  },
  {
    name: "Studded Leather Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FZixEM5voQkH84xP]{Studded Leather Armor +2}",
    image: "icons/equipment/chest/breastplate-rivited-red.webp"
  },
  {
    name: "Hide Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJFqU9COdk4ycFa2]{Hide Armor +2}",
    image: "icons/equipment/chest/breastplate-scale-leather.webp"
  },
  {
    name: "Chain Shirt +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FLoBS3UnFnZTSsSx]{Chain Shirt +2}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Scale Mail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fO1PuSOtZWLzEHqu]{Scale Mail +2}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Breastplate +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ET8Oo5vaTZqyb7rN]{Breastplate +2}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  {
    name: "Half Plate +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  {
    name: "Ring Mail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M28HYDCueaK7J8u8]{Ring Mail +2}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Chain Mail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.akjpaK4TYkUZbGrN]{Chain Mail +2}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Splint Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zIpNJyuOxp2raizE]{Splint Armor +2}",
    image: "icons/equipment/chest/breastplate-layered-steel.webp"
  },
  {
    name: "Plate Armor +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}",
    image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
  },
];

const pThreeArmorTypes = [
  {
    name: "Padded Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XKnDE8DTrJxIkVCF]{Padded Armor +3}",
    image: "icons/equipment/chest/breastplate-quilted-brown.webp"
  },
  {
    name: "Leather Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZwFCZDgQljlidzns]{Leather Armor +3}",
    image: "icons/equipment/chest/breastplate-quilted-brown.webp"
  },
  {
    name: "Studded Leather Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.00BggOkChWztQx6R]{Studded Leather Armor +3}",
    image: "icons/equipment/chest/breastplate-rivited-red.webp"
  },
  {
    name: "Hide Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IeM5Ha2cg0RA99q3]{Hide Armor +3}",
    image: "icons/equipment/chest/breastplate-scale-leather.webp"
  },
  {
    name: "Chain Shirt +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cI0UhWUux8gIzSHn]{Chain Shirt +3}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Scale Mail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9uT9SXy1Gb1jiiZX]{Scale Mail +3}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Breastplate +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JDTO996oInbiZGHW]{Breastplate +3}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  {
    name: "Half Plate +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xbVpKtrQ6tJsPhXX]{Half Plate Armor +3}",
    image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
  },
  {
    name: "Ring Mail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KhRhwADrTpol3yTx]{Ring Mail +3}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Chain Mail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eHGbr3rqRRxdBPLq]{Chain Mail +3}",
    image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
  },
  {
    name: "Splint Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwC8hZaNjO7IQc6K]{Splint Armor +3}",
    image: "icons/equipment/chest/breastplate-layered-steel.webp"
  },
  {
    name: "Plate Armor +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.466j8hy4AiENMHVQ]{Plate Armor +3}",
    image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
  },
];

const sharpSwordTypes = [
  {
    name: "Greatsword of Sharpness",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QB4CFMTLR6JlD7Kq]{Greatsword of Sharpness}",
    image: "icons/skills/wounds/bone-broken-knee-beam.webp"
  },
  {
    name: "Longsword of Sharpness",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8MNDhKb1Q87QszOJ]{Longsword of Sharpness}",
    image: "icons/skills/wounds/bone-broken-knee-beam.webp"
  },
  {
    name: "Scimitar of Sharpness",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZKyhkS8ud2NpV7ng]{Scimitar of Sharpness}",
    image: "icons/skills/wounds/bone-broken-knee-beam.webp"
  },
];

const vengeanceSwordTypes = [
  {
    name: "Greatsword of Vengeance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4fXvHJ4bDRZTJ9vd]{Greatsword of Vengeance}",
    image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
  },
  {
    name: "Longsword of Vengeance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cDEuHsHXe8y9ffWU]{Longsword of Vengeance}",
    image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
  },
  {
    name: "Rapier of Vengeance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NmAr3hjH6f5uBoVz]{Rapier of Vengeance}",
    image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
  },
  {
    name: "Scimitar of Vengeance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FC36M5CsMnTX6rIC]{Scimitar of Vengeance}",
    image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
  },
  {
    name: "Shortsword of Vengeance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aI0O5zbWTSq7wsi1]{Shortsword of Vengeance}",
    image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
  },
];

const DefenderSwordTypes = [
  { name:  "Defender Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nSNhjX5F7f86AW1a]{Defender Greatsword}", 
    image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
  },
  { name:  "Defender Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ukcKemEoTTRB9yLC]{Defender Longsword}", 
    image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
  },
  { name:  "Defender Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YrkkHa6KN8a9o35k]{Defender Rapier}", 
    image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
  },
  { name:  "Defender Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ilyv71AeobM6AvIn]{Defender Scimitar}", 
    image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
  },
  { name:  "Defender Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.d58CvI0Fiav9Jjt1]{Defender Shortsword}",
    image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
  },
];

const flameTongueSwordTypes = [
    { name: "Flame Tongue Greatsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WWb4vAmh18sMAxfY]{Flame Tongue Greatsword}", 
      image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
    },
    { name: "Flame Tongue Longsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ducaFdrqwLZ0l3c7]{Flame Tongue Longsword}", 
      image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
    },
    { name: "Flame Tongue Rapier",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CoUFHk5keIihsbYL]{Flame Tongue Rapier}", 
      image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
    },
    { name: "Flame Tongue Scimitar",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qVHCzgVvOZAtuk4N]{Flame Tongue Scimitar}", 
      image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
    },
    { name: "Flame Tongue Shortsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Z9FBwEoMi6daDGRj]{Flame Tongue Shortsword}",
      image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
    },
];

const dragonSlayerSwordTypes = [
  { name: "Dragon Slayer Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.orHjq3XDPz4eXcov]{Dragon Slayer Greatsword}",
    image: "icons/skills/melee/strike-dagger-white-orange.webp", 
  },
  { name: "Dragon Slayer Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SXjs8JghAPBv7d6j]{Dragon Slayer Longsword}",
    image: "icons/skills/melee/strike-dagger-white-orange.webp",
  }, 
  { name: "Dragon Slayer Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7TrIOlE600KIOUx]{Dragon Slayer Rapier}", 
    image: "icons/skills/melee/strike-dagger-white-orange.webp",
  },
  { name: "Dragon Slayer Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.feKHv3JUWZdSNKf0]{Dragon Slayer Scimitar}", 
    image: "icons/skills/melee/strike-dagger-white-orange.webp",
  },
  { name: "Dragon Slayer Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MFd96UkSs5g9QO78]{Dragon Slayer Shortsword}",
    image: "icons/skills/melee/strike-dagger-white-orange.webp",
  },
];

const luckSwordTypes = [
  { name: "Luck Blade Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fWR9EFEjR0JtFdCC]{Luck Blade Greatsword}", 
    image:  "icons/magic/light/projectile-beam-yellow.webp"
  },
  { name: "Luck Blade Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.X6PHssSGnwiJRgcx]{Luck Blade Longsword}", 
    image:  "icons/magic/light/projectile-beam-yellow.webp"
  },
  { name: "Luck Blade Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qGH7YqWhi0tHisMi]{Luck Blade Rapier}", 
    image:  "icons/magic/light/projectile-beam-yellow.webp"
  },
  { name: "Luck Blade Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.E7c4zpWdYgkKDHGo]{Luck Blade Scimitar}", 
    image:  "icons/magic/light/projectile-beam-yellow.webp"
  },
  { name: "Luck Blade Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nL0Y0X8SjF58OmBM]{Luck Blade Shortsword}",
    image:  "icons/magic/light/projectile-beam-yellow.webp"
  },
];


const holySwordTypes = [
    { name: "Holy Avenger Greatsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FCxG64QUxsnF4Lis]{Holy Avenger Greatsword}", 
      image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
    },
    { name: "Holy Avenger Longsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dZ9zWfhsIlabadKL]{Holy Avenger Longsword}", 
      image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
    },
    { name: "Holy Avenger Rapier",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kTxi62RTrrdrIBr9]{Holy Avenger Rapier}", 
      image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
    },
    { name: "Holy Avenger Scimitar",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ULL5nkyN3WzazI4l]{Holy Avenger Scimitar}", 
      image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
    },
    { name: "Holy Avenger Shortsword",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bHbbIhbTzu4lYMRz]{Holy Avenger Shortsword}",
      image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
    },
];

const vorpalSwordTypes = [
  { name: "Vorpal Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3FNyS6DeCBZzFbqU]{Vorpal Greatsword}", 
    image: "icons/skills/melee/strike-sword-steel-yellow.webp",
  },
  { name: "Vorpal Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HokQ1loVJTFxt27u]{Vorpal Longsword}", 
    image: "icons/skills/melee/strike-sword-steel-yellow.webp",
  },
  { name: "Vorpal Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I7cOsXsklWkzouHA]{Vorpal Scimitar}",
    image: "icons/skills/melee/strike-sword-steel-yellow.webp",
  },
];

const berserkerAxeTypes = [
  { name: "Berserker Battleaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dvNzJqb7vq6oJlA2]{Berserker Battleaxe}", 
    image: "icons/weapons/axes/axe-broad-jagged.webp",
  },   
  { name: "Berserker Greataxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zSKorO6lwT7vs2uk]{Berserker Greataxe}", 
    image: "icons/weapons/axes/axe-broad-jagged.webp",
  }, 
  { name: "Berserker Handaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gwuffGC4JZ8BbStz]{Berserker Handaxe}",
    image: "icons/weapons/axes/axe-broad-jagged.webp",
  }, 
];

const MithralArmorMetalTypes = [
  { name: "Mithral Breastplate",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CcTGZzQHejxEVLK1]{Mithral Breastplate}", 
  image: "icons/equipment/chest/breastplate-layered-steel-black.webp",},
  { name: "Mithral Chain Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YS9CRHg2yQlOVi3j]{Mithral Chain Mail}",
  image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
  { name: "Mithral Chain Shirt",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3h3ZU6qmQs18FfkA]{Mithral Chain Shirt}", 
  image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
  { name: "Mithral Half Plate Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qRMQH8lRE42JkugE]{Mithral Half Plate Armor}", 
  image: "icons/equipment/chest/breastplate-layered-steel-black.webp",},
  { name: "Mithral Plate Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HVpXIU0zZw0a4Fb7]{Mithral Plate Armor}", 
  image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",},
  { name: "Mithral Ring Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tJQXAJx92wL6GM1v]{Mithral Ring Mail}", 
  image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
  { name: "Mithral Scale Mail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iRDmig2qZ7LdP0ug]{Mithral Scale Mail}", 
  image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
  { name: "Mithral Splint Armor",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GKQSxYvS3m9qKVac]{Mithral Splint Armor}", 
  image: "icons/equipment/chest/breastplate-layered-steel.webp",},
];

const elementalGemTypes = [
  { name: "Elemental Gem of Air",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zDJ4oEt5HArN1xmP]{Elemental Gem of Air}", 
    image: "icons/containers/bags/coinpouch-simple-tan.webp",
},
  { name: "Elemental Gem of Earth",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IGwDN9gtYxCrlrCr]{Elemental Gem of Earth}",  
    image: "icons/containers/bags/coinpouch-simple-tan.webp",
},
  { name: "Elemental Gem of Fire",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dsjke4vPPsc9gsxH]{Elemental Gem of Fire}",  
    image: "icons/containers/bags/coinpouch-simple-tan.webp",
},
  { name: "Elemental Gem of Water",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HLEhnzLbpRbYdAHo]{Elemental Gem of Water}",  
    image: "icons/containers/bags/coinpouch-simple-tan.webp",
},
];

const flyingCarpetTypes = [
  { name: "Carpet of Flying (3x5)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XwqNHyox5OQQio8q]{Carpet of Flying (3x5)}", 
    image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
  },
  { name: "Carpet of Flying (4x6)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DeK9uQvNJj3JzFwe]{Carpet of Flying (4x6)}",
    image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
  },
  { name: "Carpet of Flying (5x7)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XAr1SR4POx5BAArk]{Carpet of Flying (5x7)}",
    image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
  },
  { name: "Carpet of Flying (6x9)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TjWk2mpNXjDdfIDM]{Carpet of Flying (6x9)}",
    image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
  },
];


const HpPotionTypes = [
  { name: "Potion of Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
    image: "icons/consumables/potions/potion-tube-corked-red.webp"},
  { name: "Potion of Greater Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}",
    image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp"},
  { name: "Potion of Superior Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5m9ErO9In8Uc5yyf]{Potion of Superior Healing}", 
    image: "icons/consumables/potions/bottle-round-corked-red.webp"},
  { name: "Potion of Supreme Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JFiSlgcm3uSSBM5t]{Potion of Supreme Healing}",
    image: "icons/consumables/potions/potion-flask-stopped-red.webp"},

];

const starterHpPotionTypes = [
  { name: "Potion of Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
  image: "icons/consumables/potions/potion-tube-corked-red.webp"},
  {name: "Potion of Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
  image: "icons/consumables/potions/potion-tube-corked-red.webp"},
  {name: "Potion of Greater Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}",
  image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp"},
  {name: "Potion of Greater Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}",
  image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp"},
];

const basicPotionTypes = [
  { name: "Potion of Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
    image: "icons/consumables/potions/potion-tube-corked-red.webp"},
  { name: "Potion of Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
    image: "icons/consumables/potions/potion-tube-corked-red.webp"},
  { name: "Potion of Greater Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}",
    image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp"},
  { name: "Potion of Greater Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}",
    image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp"},
  { name: "Potion of Superior Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5m9ErO9In8Uc5yyf]{Potion of Superior Healing}", 
    image: "icons/consumables/potions/bottle-round-corked-red.webp"},
];

const commonPotionTypes = [
  { name: "Potion of Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
    image: "icons/consumables/potions/potion-tube-corked-red.webp"},
  { name: "Potion of Climbing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aMnWi1WXWpxRHq4r]{Potion of Climbing}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
];

const uncommonPotionTypes = [
  { name: "Potion of Acid Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zgZkJAyFAfYmyn11]{Potion of Acid Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Advantage",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1Y13SzUMVUSDBPUS]{Potion of Advantage}", 
    image: "icons/consumables/potions/flask-corked-yellow-glow.webp"},
  { name: "Potion of Animal Friendship",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nXWevqtV6p484N59]{Potion of Animal Friendship}",
    image: "icons/consumables/potions/bottle-bulb-corked-green.webp"},
  { name: "Potion of Cold Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.34YKlIJVVWLeBv7R]{Potion of Cold Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Fire Breath",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nYeBlfx1rtNws4fR]{Potion of Fire Breath}",
    image: "icons/consumables/potions/bottle-round-corked-orange.webp"},
  { name: "Potion of Fire Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Jj4iFQQGvckx8Wsj]{Potion of Fire Resistance}", 
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Force Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kKGJjVVlJVoakWgQ]{Potion of Force Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Growth",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gTRFQLdVD1gsKtPi]{Potion of Growth}",
    image: "icons/consumables/potions/potion-tube-corked-glowing-red.webp"},
  { name: "Potion of Greater Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}",
    image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp"},
  { name: "Potion of Hill Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mhFBTY0egW8AeCHe]{Potion of Hill Giant Strength}", 
    image: "icons/consumables/potions/vial-cork-empty.webp"},
  { name: "Potion of Lightning Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8MPnSrvEeZhPhtTi]{Potion of Lightning Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Necrotic Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xw99pcqPBVwtMOLw]{Potion of Necrotic Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Poison",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qBSEGJyHxdKIlBfj]{Potion of Poison}",
    image: "icons/consumables/potions/vial-cork-red.webp"},
  { name: "Potion of Poison Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f5chGcpQCi1HYPQw]{Potion of Poison Resistance}", 
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Psychic Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.c0luemOP0iW8L23R]{Potion of Psychic Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Radiant Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LBQWNqX6hZOKhQ8a]{Potion of Radiant Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Thunder Resistance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zBX8LLC2CjC89Dzl]{Potion of Thunder Resistance}",
    image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  { name: "Potion of Water Breathing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CAZMwFBWp9VC0ZCg]{Potion of Water Breathing}",
    image: "icons/consumables/potions/bottle-round-ring-teal.webp"},
];

const rarePotionTypes = [
  { name: "Potion of Superior Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5m9ErO9In8Uc5yyf]{Potion of Superior Healing}",
    image: "icons/consumables/potions/bottle-round-corked-red.webp"},
  { name: "Potion of Diminution",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HY8duCwmvlXOruTG]{Potion of Diminution}", 
    image: "icons/consumables/potions/potion-tube-corked-glowing-red.webp"},
  { uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bEZOY6uvHRweMM56]{Potion of Fire Giant Strength}",
    image: "icons/consumables/potions/vial-cork-empty.webp"},
  { name: "Potion of Frost Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TevMHicE3A70AlmP]{Potion of Frost Giant Strength}",
    image: "icons/consumables/potions/vial-cork-empty.webp"},
  { name: "Potion of Gaseous Form",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bqZ6NTLDCUB98YjV]{Potion of Gaseous Form}",
    image: "icons/consumables/potions/bottle-corked-empty.webp"},
  { name: "Potion of Superior Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5m9ErO9In8Uc5yyf]{Potion of Superior Healing}", 
    image: "icons/consumables/potions/bottle-round-corked-red.webp"},
  { name: "Potion of Heroism",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AgZrBArxJiDL7o7y]{Potion of Heroism}",
    image: "icons/consumables/potions/flask-corked-blue-glow.webp"},
  { name: "Potion of Invulnerability",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GflFn97s6YnHqI6K]{Potion of Invulnerability}",
    image: "icons/consumables/potions/bottle-round-empty-glass.webp"},
  { name: "Potion of Mind Control (Beast)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.a1P881320fXUaQKE]{Potion of Mind Control (Beast)}",
    image: "icons/consumables/potions/potion-flask-corked-tied-necklace-teal.webp"},
  { name: "Potion of Mind Control (Humanoid)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cgJdcOmmGvGFREfw]{Potion of Mind Control (Humanoid)}", 
    image: "icons/consumables/potions/potion-flask-corked-tied-necklace-teal.webp"},
  { name: "Potion of Mind Reading",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ct9LR9Ft1FG4a6Y1]{Potion of Mind Reading}",
    image: "icons/consumables/potions/bottle-bulb-corked-purple.webp"},
  { name: "Potion of Stone Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4ZiJsDTRA1GgcWKP]{Potion of Stone Giant Strength}",
    image: "icons/consumables/potions/vial-cork-empty.webp"},
];

const veryRarePotionTypes = [
  { name: "Potion of Cloud Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lAcTZgNtpmks2Mo5]{Potion of Cloud Giant Strength}",
    image: "icons/consumables/potions/vial-cork-empty.webp"},
  { name: "Potion of Flying",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eTNc8XPtvZNe3yQs]{Potion of Flying}", 
    image: "icons/consumables/potions/potion-tube-corked-bat-gold-red.webp"},
  { name: "Potion of Supreme Healing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JFiSlgcm3uSSBM5t]{Potion of Supreme Healing}",
    image: "icons/consumables/potions/potion-flask-stopped-red.webp"},
  { name: "Potion of Invisibility",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rTn4p9nJr4Aq2GPB]{Potion of Invisibility}",
    image: "icons/consumables/potions/bottle-bulb-empty-glass.webp"},
  { name: "Potion of Longevity",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HBqfFdnS5WO6wIpq]{Potion of Longevity}",
    image: "icons/consumables/potions/potion-jar-corked-labeled-red.webp"},
  { name: "Potion of Mind Control (Monster)",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EzDdA6VZa39GJEkr]{Potion of Mind Control (Monster)}", 
    image: "icons/consumables/potions/potion-flask-corked-tied-necklace-teal.webp"},
  { name: "Potion of Speed",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ctKfjHjk9gs9UtZI]{Potion of Speed}",
    image: "icons/consumables/potions/potion-bottle-corked-fancy-orange.webp"},
  { name: "Potion of Vitality",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G8KlJ9gjyWMXGVQy]{Potion of Vitality}",
    image: "icons/consumables/potions/bottle-round-corked-orante-red.webp"},
];

const magicItemTableA = [
  { range: [1, 50], item: () => {
    const potionofHealing = [
    { name: "Potion of Healing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing}",
      image: "icons/consumables/potions/potion-tube-corked-red.webp"
    }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofHealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofHealing[randomIndex].name,
      uuid: potionofHealing[randomIndex].uuid,
      image: potionofHealing[randomIndex].image}
    }; 
    }
    },
{ range: [51, 60], item: () => {
    const cantripTypes = [
        "Acid Splash", "Blade Ward", "Booming Blade", "Chill Touch", "Control Flames", "Create Bonfire", 
        "Dancing Lights", "Druidcraft", "Eldritch Blast", "Encode Thoughts", "Fire Bolt", "Friends",
        "Frostbite", "Green-Flame Blade", "Guidance", "Gust", "Infestation", "Light", "Lightning Lure",
        "Mage Hand", "Magic Stone", "Mending", "Message", "Mind Sliver", "Minor Illusion", "Mold Earth",
        "Poison Spray", "Prestidigitation", "Primal Savagery", "Produce Flame", "Ray of Frost", "Resistance", 
        "Sacred Flame", "Sapping Sting", "Shape Water", "Shillelagh", "Shocking Grasp", "Spare the Dying", 
        "Sword Burst", "Thaumaturgy", "Thorn Whip", "Thunderclap", "Toll the Dead", "True Strike", "Vicious Mockery",
        "Word of Radiance",
    ];

        const randomIndex = Math.floor(Math.random() * cantripTypes.length);
    return { 
      roll: randomIndex + 1,
      item:{  name: `Spell Scroll Cantrip (${cantripTypes[randomIndex]})`,
              uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rQ6sO7HDWzqMhSI3]{Spell Scroll Cantrip} (${cantripTypes[randomIndex]})`,
              image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp" }
        }; 
        }
        },
  { range: [61, 70], item: () => {
    const potionofClimbing = [
    { name: "Potion of Climbing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aMnWi1WXWpxRHq4r]{Potion of Climbing}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"
    }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofClimbing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofClimbing[randomIndex].name,
      uuid: potionofClimbing[randomIndex].uuid,
      image: potionofClimbing[randomIndex].image
    }
  }; 
  }
  },  
  { range: [71, 90],   item: () => {
    const firstlevelspellTypes = [
        "Absorb Elements", "Alarm", "Animal Friendship", "Armor of Agathys", "Arms of Hadar",
        "Bane", "Beast Bond", "Bless", "Burning Hands", "Catapult", "Cause Fear", "Ceremony", 
        "Chaos Bolt", "Charm Person", "Chromatic Orb", "Color Spray", "Command", "Compelled Duel", 
        "Comprehend Languages", "Create or Destroy Water", "Cure Wounds", "Detect Evil and Good", "Detect Magic",
        "Detect Poison and Disease", "Disguise Self", "Dissonant Whispers", "Distort Value", "Divine Favor",
        "Earth Tremor", "Ensnaring Strike", "Entangle", "Expeditious Retreat", "Faerie Fire", "False Life",
        "Feather Fall", "Find Familiar", "Floating Disk", "Fog Cloud", "Frost Fingers", "Gift of Alacrity",
        "Goodberry", "Grease", "Guiding Bolt", "Hail of Thorns", "Healing Word", "Hellish Rebuke", "Heroism",
        "Hex", "Hideous Laughter", "Hunters Mark", "Ice Knife", "Identify", "Illusory Script", "Inflict Wounds",
        "Jims Magic Missile", "Jump", "Longstrider", "Mage Armor", "Magic Missile", "Magnify Gravity",
        "Protection from Evil and Good", "Purify Food and Drink", "Ray of Sickness", "Sanctuary", "Searing Smite",
        "Shield", "Shield of Faith", "Silent Image", "Silvery Barbs", "Sleep", "Snare", "Speak with Animals", 
        "Tashas Hideous Laughter", "Tashas Caustic Brew", "Tensers Floating Disk", "Thunderous Smite", "Thunderwave",
        "Unseen Servant", "Witch Bolt", "Wrathful Smite","Zephyr Strike",
    ];
    
    const randomIndex = Math.floor(Math.random() * firstlevelspellTypes.length);
    return { 
      roll: randomIndex + 1,
      item:{  name: `Spell Scroll 1st Level (${firstlevelspellTypes[randomIndex]})`,
              uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9GSfMg0VOA2b4uFN]{Spell Scroll 1st Level} (${firstlevelspellTypes[randomIndex]})`,
              image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp" }
        }; 
        }
        },
  { range: [91, 94],   item: () => {
    const secondlevelspellTypes = [
        "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
        "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
        "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
        "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
        "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
        "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
        "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
        "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
        "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
        "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
        "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
        "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
        "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
        "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
        "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
        "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
        "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
    ];
    
    const randomIndex = Math.floor(Math.random() * secondlevelspellTypes.length);
    return { 
      roll: randomIndex + 1,
      item:{  name: `Spell Scroll 2nd Level (${secondlevelspellTypes[randomIndex]})`,
              uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XdDp6CKh9qEvPTuS]{Spell Scroll 2nd Level} (${secondlevelspellTypes[randomIndex]})`,
              image: "icons/sundries/scrolls/scroll-bound-gold-brown.webp" }
        }; 
        }
        },
  { range: [95, 98], item: () => {
    const potionofGreaterHealing = [
    { name: "Potion of Greater Healing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}", 
      image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofGreaterHealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofGreaterHealing[randomIndex].name,
      uuid: potionofGreaterHealing[randomIndex].uuid,
      image: potionofGreaterHealing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [99, 99], item: () => {
    const bagofHolding = [
      { name: "Bag of Holding",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDHRuUs29SrumWfq]{Bag of Holding}", 
        image: "icons/containers/bags/satchel-leather-embossed-tan.webp",
    }, 
    ];
    const randomIndex = Math.floor(Math.random() * bagofHolding .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: bagofHolding[randomIndex].name,
        uuid: bagofHolding[randomIndex].uuid,
        image: bagofHolding[randomIndex].image
      }
    }; 
    }
    },  
  { range: [100, 100], item: () => {
    const DriftglobeSolo = [
      { name: "Driftglobe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8bDnTRLrP2AC1BDP]{Driftglobe}", 
        image: "icons/commodities/gems/pearl-swirl-teal.webp",
    }, 
    ];
    const randomIndex = Math.floor(Math.random() * DriftglobeSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: DriftglobeSolo[randomIndex].name,
        uuid: DriftglobeSolo[randomIndex].uuid,
        image: DriftglobeSolo[randomIndex].image
      }
    }; 
    }
    }, 
];

const magicItemTableB = [
  { range: [1, 15], item: () => {
    const potionofGreaterHealing = [
    { name: "Potion of Greater Healing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L887NdWEP5NqHCrQ]{Potion of Greater Healing}", 
      image: "icons/consumables/potions/bottle-bulb-corked-glowing-red.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofGreaterHealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofGreaterHealing[randomIndex].name,
      uuid: potionofGreaterHealing[randomIndex].uuid,
      image: potionofGreaterHealing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [16, 22], item: () => {
    const potionofFireBreath = [
    { name: "Potion of Fire Breath",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nYeBlfx1rtNws4fR]{Potion of Fire Breath}", 
      image: "icons/consumables/potions/bottle-round-corked-orange.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofFireBreath .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofFireBreath[randomIndex].name,
      uuid: potionofFireBreath[randomIndex].uuid,
      image: potionofFireBreath[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [23, 29], item: () => {
    const potionResistanceTypes = [
    { name: "Potion of Acid Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zgZkJAyFAfYmyn11]{Potion of Acid Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Cold Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.34YKlIJVVWLeBv7R]{Potion of Cold Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Fire Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Jj4iFQQGvckx8Wsj]{Potion of Fire Resistance}", 
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Force Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kKGJjVVlJVoakWgQ]{Potion of Force Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Lightning Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8MPnSrvEeZhPhtTi]{Potion of Lightning Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Necrotic Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xw99pcqPBVwtMOLw]{Potion of Necrotic Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Poison Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f5chGcpQCi1HYPQw]{Potion of Poison Resistance}", 
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Psychic Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.c0luemOP0iW8L23R]{Potion of Psychic Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Radiant Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LBQWNqX6hZOKhQ8a]{Potion of Radiant Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
    { name: "Potion of Thunder Resistance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zBX8LLC2CjC89Dzl]{Potion of Thunder Resistance}",
      image: "icons/consumables/potions/potion-tube-corked-orange.webp"},
  ];
  
  const randomIndex = Math.floor(Math.random() * potionResistanceTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
    name: potionResistanceTypes[randomIndex].name,
    uuid: potionResistanceTypes[randomIndex].uuid,
    image: potionResistanceTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [30, 34], item: () => {
    const pOneAmmoTypes = [
       {name: "Ammunition +1, 20 units",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yGS0xCYJpePAAWpr]{Ammunition +1, 20 units}", 
        image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
      },  
    ];    
    const randomIndex = Math.floor(Math.random() * pOneAmmoTypes.length);
    return { 
    roll: randomIndex + 1,
    item: {
    name: pOneAmmoTypes[randomIndex].name,
    uuid: pOneAmmoTypes[randomIndex].uuid,
    image: pOneAmmoTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [35, 39], item: () => {
    const potionofAnimalFriendship = [
    { name: "Potion of Animal Friendship",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nXWevqtV6p484N59]{Potion of Animal Friendship}", 
      image: "icons/consumables/potions/potion-tube-corked-orange.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofAnimalFriendship .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofAnimalFriendship[randomIndex].name,
      uuid: potionofAnimalFriendship[randomIndex].uuid,
      image: potionofAnimalFriendship[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [40, 44], item: () => {
    const potionofHillGiantStrength = [
    { name: "Potion of Hill Giant Strength",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mhFBTY0egW8AeCHe]{Potion of Hill Giant Strength}", 
      image: "icons/consumables/potions/vial-cork-empty.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofHillGiantStrength .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofHillGiantStrength[randomIndex].name,
      uuid: potionofHillGiantStrength[randomIndex].uuid,
      image: potionofHillGiantStrength[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [45, 49], item: () => {
    const potionofGrowth = [
    { name: "Potion of Growth",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gTRFQLdVD1gsKtPi]{Potion of Growth}", 
      image: "icons/consumables/potions/potion-tube-corked-glowing-red.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofGrowth .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofGrowth[randomIndex].name,
      uuid: potionofGrowth[randomIndex].uuid,
      image: potionofGrowth[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [50, 54], item: () => {
    const potionofWaterBreathing = [
    { name: "Potion of Water Breathing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CAZMwFBWp9VC0ZCg]{Potion of Water Breathing}", 
      image: "icons/consumables/potions/bottle-round-ring-teal.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofWaterBreathing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofWaterBreathing[randomIndex].name,
      uuid: potionofWaterBreathing[randomIndex].uuid,
      image: potionofWaterBreathing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [55, 59], item: () => {
    const secondlevelspellTypes = [
        "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
        "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
        "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
        "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
        "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
        "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
        "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
        "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
        "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
        "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
        "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
        "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
        "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
        "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
        "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
        "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
        "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
    ];
    
    const randomIndex = Math.floor(Math.random() * secondlevelspellTypes.length);
      return { 
        roll: randomIndex + 1,
        item:{  name: `Spell Scroll 2nd Level (${secondlevelspellTypes[randomIndex]})`,
                uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XdDp6CKh9qEvPTuS]{Spell Scroll 2nd Level} (${secondlevelspellTypes[randomIndex]})`,
                image: "icons/sundries/scrolls/scroll-bound-gold-brown.webp" 
            }
          }; 
          }
          },
  { range: [60, 64], item: () => {
    const thirdlevelspellTypes = [
        "Animate Dead", "Ashardalons Stride", "Aura of Vitality", "Beacon of Hope", "Bestow Curse",
        "Blinding Smite", "Blink", "Call Lightning", "Catnap", "Clairvoyance",
        "Conjure Animals", "Conjure Barrage", "Counterspell", "Create Food and Water", "Crusaders Mantle",
        "Daylight", "Dispel Magic", "Elemental Weapon", "Enemies Abound", "Erupting Earth",
        "Fast Friends", "Fear", "Feign Death", "Fireball", "Flame Arrows",
        "Fly", "Freedom of the Waves", "Galders Tower", "Gaseous Form", "Glyph of Warding",
        "Haste", "Hunger of Hadar", "Hypnotic Pattern", "Incite Greed", "Intellect Fortress",
        "Leomunds Tiny Hut", "Life Transference", "Lightning Arrow", "Lightning Bolt", "Magic Circle",
        "Major Image", "Mass Healing Word", "Meld into Stone", " Melfs Minute Meteors", "Motivational Speech",
        "Nondetection", "Phantom Steed", "Plant Growth", "Protection from Energy", "Pulse Wave",
        "Remove Curse", "Revivify", "Sending", "Sleet Storm", "Slow",
        "Speak with Dead", "Speak with Plants", "Spirit Guardians", "Spirit Shroud", "Stinking Cloud",
        "Summon Fey", "Summon Lesser Demon", "Summon Shadowspawn", "Summon Undead", "Thunder Step",
        "Tidal Wave", "Tiny Hut", "Tiny Servant", "Tongues", "Vampiric Touch",
        "Wall of Sand", "Wall of Water", "Water Breathing", "Water Walk", "Wind Wall",
    ];
    
    const randomIndex = Math.floor(Math.random() * thirdlevelspellTypes.length);
    return { 
    roll: randomIndex + 1,
    item:{  name: `Spell Scroll 3rd Level (${thirdlevelspellTypes[randomIndex]})`,
            uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hqVKZie7x9w3Kqds]{Spell Scroll 3rd Level} (${thirdlevelspellTypes[randomIndex]})`,
            image: "icons/sundries/scrolls/scroll-bound-gold-brown.webp" 
        }
      }; 
      }
      },
{ range: [65, 67], item: () => {
    const bagofHolding = [
    { name: "Bag of Holding",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDHRuUs29SrumWfq]{Bag of Holding}", 
      image: "icons/containers/bags/satchel-leather-embossed-tan.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * bagofHolding .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bagofHolding[randomIndex].name,
      uuid: bagofHolding[randomIndex].uuid,
      image: bagofHolding[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [68, 70], item: () => {
    const restorativeOintment = [
    { name: "Restorative Ointment",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VmcgAIsRCyrjBguC]{Restorative Ointment}", 
      image: "icons/commodities/materials/liquid-orange.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * restorativeOintment .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: restorativeOintment[randomIndex].name,
      uuid: restorativeOintment[randomIndex].uuid,
      image: restorativeOintment[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [71, 73], item: () => {
    const oilofSharpness = [
    { name: "Oil of Sharpness",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.C0MNXWA81ufzGlp5]{Oil of Sharpness}", 
      image: "icons/consumables/potions/potion-faceted-corked-blue.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * oilofSharpness .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: oilofSharpness[randomIndex].name,
      uuid: oilofSharpness[randomIndex].uuid,
      image: oilofSharpness[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [74, 75], item: () => {
    const dustofDisappearance = [
    { name: "Dust of Disappearance",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cGUPm15mLfhGDz2b]{Dust of Disappearance}", 
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * dustofDisappearance .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: dustofDisappearance[randomIndex].name,
      uuid: dustofDisappearance[randomIndex].uuid,
      image: dustofDisappearance[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [76, 77], item: () => {
    const dustofDryness = [
    { name: "Dust of Dryness",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eMR6B4bIoJPUDJG8]{Dust of Dryness}", 
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * dustofDryness .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: dustofDryness[randomIndex].name,
      uuid: dustofDryness[randomIndex].uuid,
      image: dustofDryness[randomIndex].image
    }
  }; 
  }
  },
{ range: [78, 79], item: () => {
    const dustofSneezingandChoking = [
    { name: "Dust of Sneezing and Choking",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9eyZY9tL3fXD1Mbm]{Dust of Sneezing and Choking}", 
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * dustofSneezingandChoking .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: dustofSneezingandChoking[randomIndex].name,
      uuid: dustofSneezingandChoking[randomIndex].uuid,
      image: dustofSneezingandChoking[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [80, 81], item: () => {
  const elementalGemTypes = [
    { name: "Elemental Gem of Air",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zDJ4oEt5HArN1xmP]{Elemental Gem of Air}", 
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  },
    { name: "Elemental Gem of Earth",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IGwDN9gtYxCrlrCr]{Elemental Gem of Earth}",  
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  },
    { name: "Elemental Gem of Fire",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dsjke4vPPsc9gsxH]{Elemental Gem of Fire}",  
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  },
    { name: "Elemental Gem of Water",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HLEhnzLbpRbYdAHo]{Elemental Gem of Water}",  
      image: "icons/containers/bags/coinpouch-simple-tan.webp",
  },
  ];
  
  const randomIndex = Math.floor(Math.random() * elementalGemTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: elementalGemTypes[randomIndex].name,
      uuid: elementalGemTypes[randomIndex].uuid,
      image: elementalGemTypes[randomIndex].image
    }
  }; 
  }
  },
{ range: [82, 83], item: () => {
    const philterofLove = [
    { name: "Philter of Love",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.63nb14yQRJMc4bIn]{Philter of Love}", 
      image: "icons/consumables/potions/potion-flask-corked-labeled-pink.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * philterofLove .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: philterofLove[randomIndex].name,
      uuid: philterofLove[randomIndex].uuid,
      image: philterofLove[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [84, 84], item: () => {
    const alchemyJug = [
    { name: "Alchemy Jug",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TZggpdbOYqOCG7mY]{Alchemy Jug}", 
      image: "icons/containers/kitchenware/jug-bottle-clay-brown-gold-blue.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * alchemyJug .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: alchemyJug[randomIndex].name,
      uuid: alchemyJug[randomIndex].uuid,
      image: alchemyJug[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [85, 85], item: () => {
    const capofWaterBreathing = [
    { name: "Cap of Water Breathing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xcJofwv5umV2togh]{Cap of Water Breathing}",
      image: "icons/equipment/head/hood-cloth-blue.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * capofWaterBreathing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: capofWaterBreathing[randomIndex].name,
      uuid: capofWaterBreathing[randomIndex].uuid,
      image: capofWaterBreathing[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [86, 86], item: () => {
    const cloakoftheMantaRay = [
    { name: "Cloak of the Manta Ray",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hGrxC676XmlnS9y0]{Cloak of the Manta Ray}",
      image: "icons/equipment/back/cape-layered-blue-accent.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * cloakoftheMantaRay .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: cloakoftheMantaRay[randomIndex].name,
      uuid: cloakoftheMantaRay[randomIndex].uuid,
      image: cloakoftheMantaRay[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [87, 87], item: () => {
    const DriftglobeSolo = [
    { name: "Driftglobe",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8bDnTRLrP2AC1BDP]{Driftglobe}", 
      image: "icons/commodities/gems/pearl-swirl-teal.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * DriftglobeSolo .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: DriftglobeSolo[randomIndex].name,
      uuid: DriftglobeSolo[randomIndex].uuid,
      image: DriftglobeSolo[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [88, 88], item: () => {
    const gogglesofNight = [
    { name: "Goggles of Night",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XGAWqtmhK6SYBL6A]{Goggles of Night}",
     image: "icons/equipment/head/goggles-leather-blue.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * gogglesofNight .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: gogglesofNight[randomIndex].name,
      uuid: gogglesofNight[randomIndex].uuid,
      image: gogglesofNight[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [89, 89], item: () => {
    const helmofComprehendingLanguages = [
    { name: "Helm of Comprehending Languages",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rY9sRFQp5CFSfsat]{Helm of Comprehending Languages}",
      image: "icons/magic/defensive/illusion-evasion-echo-purple.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * helmofComprehendingLanguages .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: helmofComprehendingLanguages[randomIndex].name,
      uuid: helmofComprehendingLanguages[randomIndex].uuid,
      image: helmofComprehendingLanguages[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [90, 90], item: () => {
    const immovableRod = [
    { name: "Immovable Rod",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eQNXan0zp279jDtk]{Immovable Rod}", 
      image: "icons/magic/symbols/runes-etched-steel-blade.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * immovableRod .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: immovableRod[randomIndex].name,
      uuid: immovableRod[randomIndex].uuid,
      image: immovableRod[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [91, 91], item: () => {
    const lanternofRevealing = [
    { name: "Lantern of Revealing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7FLs8qIGdOFnz9oL]{Lantern of Revealing}", 
      image: "icons/sundries/lights/lantern-iron-lit-yellow.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * lanternofRevealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: lanternofRevealing[randomIndex].name,
      uuid: lanternofRevealing[randomIndex].uuid,
      image: lanternofRevealing[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [92, 92], item: () => {
  const marinersArmorTypes = [
    {
      name: "Mariner's Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EzOoPK3tqneyK6Yh]{Mariner's Padded Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tU4Knu4VqbeQN6Nn]{Mariner's Leather Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cyRLW2TPOIUWrrtR]{Mariner's Studded Leather Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qtRpVOkQSAbVmDm0]{Mariner's Hide Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5R8mB9JKe0oW1C64]{Mariner's Chain Shirt}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM6O1jBmhk97ilAz]{Mariner's Scale Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m78aGIvd62sQwIPT]{Mariner's Breastplate}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwKJYLhH2anOjHZP]{Mariner's Half Plate Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P36nZk3bDgibLpXq]{Mariner's Ring Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fts0Bt0I3aWpgYYZ]{Mariner's Chain Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EsrWR1yllXBZLBim]{Mariner's Splint Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eehnkUUtgy2uZNQa]{Mariner's Plate Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
];
const randomIndex = Math.floor(Math.random() * marinersArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: marinersArmorTypes[randomIndex].name,
    uuid: marinersArmorTypes[randomIndex].uuid,
    image: marinersArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [93, 93], item: () => {
  const MithralArmorMetalTypes = [
    { name: "Mithral Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CcTGZzQHejxEVLK1]{Mithral Breastplate}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp",},
    { name: "Mithral Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YS9CRHg2yQlOVi3j]{Mithral Chain Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
    { name: "Mithral Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3h3ZU6qmQs18FfkA]{Mithral Chain Shirt}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
    { name: "Mithral Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qRMQH8lRE42JkugE]{Mithral Half Plate Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp",},
    { name: "Mithral Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HVpXIU0zZw0a4Fb7]{Mithral Plate Armor}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",},
    { name: "Mithral Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tJQXAJx92wL6GM1v]{Mithral Ring Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
    { name: "Mithral Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iRDmig2qZ7LdP0ug]{Mithral Scale Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",},
    { name: "Mithral Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GKQSxYvS3m9qKVac]{Mithral Splint Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp",},
  ];
const randomIndex = Math.floor(Math.random() * MithralArmorMetalTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: MithralArmorMetalTypes[randomIndex].name,
    uuid: MithralArmorMetalTypes[randomIndex].uuid,
    image: MithralArmorMetalTypes[randomIndex].image
  }
}; 
}
},
{ range: [94, 94], item: () => {
    const potionofPoison = [
    { name: "Potion of Poison",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qBSEGJyHxdKIlBfj]{Potion of Poison}", 
      image: "icons/consumables/potions/vial-cork-red.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofPoison .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofPoison[randomIndex].name,
      uuid: potionofPoison[randomIndex].uuid,
      image: potionofPoison[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [95, 95], item: () => {
    const ringofSwimming = [
    { name: "Ring of Swimming",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aA7MbjnpHYoYvmuW]{Ring of Swimming}", 
      image: "icons/equipment/finger/ring-cabochon-white-teal.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * ringofSwimming .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ringofSwimming[randomIndex].name,
      uuid: ringofSwimming[randomIndex].uuid,
      image: ringofSwimming[randomIndex].image
    }
  }; 
  }
  },
{ range: [96, 96], item: () => {
    const robeofUsefulItems = [
    { name: "Robe of Useful Items",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2ksm2KXCY3vBHTAx]{Robe of Useful Items}", 
      image: "icons/equipment/back/mantle-collared-black.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * robeofUsefulItems .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: robeofUsefulItems[randomIndex].name,
      uuid: robeofUsefulItems[randomIndex].uuid,
      image: robeofUsefulItems[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [97, 97], item: () => {
    const ropeofClimbing = [
    { name: "Rope of Climbing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.29e6gHwWKNLaRUoz]{Rope of Climbing}", 
      image: "icons/sundries/survival/rope-wrapped-brown.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * ropeofClimbing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ropeofClimbing[randomIndex].name,
      uuid: ropeofClimbing[randomIndex].uuid,
      image: ropeofClimbing[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [98, 98], item: () => {
    const saddleoftheCavalier = [
    { name: "Saddle of the Cavalier",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yN5CLnYKP1hBJtVf]{Saddle of the Cavalier}", 
      image: "icons/equipment/shoulder/shoulderpad-steel-blue.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * saddleoftheCavalier .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: saddleoftheCavalier[randomIndex].name,
      uuid: saddleoftheCavalier[randomIndex].uuid,
      image: saddleoftheCavalier[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [99, 99], item: () => {
    const wandofMagicDetection = [
    { name: "Wand of Magic Detection",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.18fbyArtidKzON01]{Wand of Magic Detection}", 
      image: "icons/weapons/staves/staff-simple-green.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * wandofMagicDetection .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: wandofMagicDetection[randomIndex].name,
      uuid: wandofMagicDetection[randomIndex].uuid,
      image: wandofMagicDetection[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [100, 100], item: () => {
    const wandofSecrets = [
    { name: "Wand of Secrets",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VQ6NWjWV37wiB29O]{Wand of Secrets}", 
      image: "icons/weapons/staves/staff-simple-spiral-green.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * wandofSecrets .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: wandofSecrets[randomIndex].name,
      uuid: wandofSecrets[randomIndex].uuid,
      image: wandofSecrets[randomIndex].image
    }
  }; 
  }
  }, 
];

const magicItemTableC = [
  { range: [1, 15], item: () => {
    const potionofSuperiorHealing = [
    { name: "Potion of Superior Healing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5m9ErO9In8Uc5yyf]{Potion of Superior Healing}", 
      image: "icons/consumables/potions/bottle-round-corked-red.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofSuperiorHealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofSuperiorHealing[randomIndex].name,
      uuid: potionofSuperiorHealing[randomIndex].uuid,
      image: potionofSuperiorHealing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [16, 22], item: () => {
    const forthlevelspellTypes = [
        "Arcane Eye", "Aura of Life", "Aura of Purity", "Banishment", "Black Tentacles",
        "Blight", "Charm Monster", "Compulsion", "Confusion", "Conjure Minor Elementals",
        "Conjure Woodland Beings", "Control Water", "Death Ward", "Dimension Door", "Divination",
        "Dominate Beast", "Elemental Bane", "Evards black tentacles", "Fabricate", "Faithful Hound",
        "Find Greater Steed", "Fire Shield", "Freedom of Movement", "Galders Speedy Courier", "Giant Insect",
        "Grasping Vine", "Gravity Sinkhole", "Greater Invisibility", "Guardian of Faith", "Guardian of Nature",
        "Hallucinatory Terrain", "Ice Storm", "Leomunds secret chest", "Locate Creature", "Mordenkainens Faithful Hound",
        "Mordenkainens Private Sanctum", "Otilukes Resilient Sphere", "Phantasmal Killer", "Polymorph", "Private Sanctum",
        "Raulothims Psychic Lance", "Resilient Sphere", "Secret Chest", "Shadow of Moil", "Sickening Radiance",
        "Staggering Smite", "Stone Shape", "Stoneskin", "Storm Sphere", "Summon Aberration",
        "Summon Construct", "Summon Elemental", "Summon Greater Demon", "Vitriolic Sphere", "Wall of Fire",
        "Watery Sphere",
    ];
    
    const randomIndex = Math.floor(Math.random() * forthlevelspellTypes.length);
return { 
  roll: randomIndex + 1,
  item:{  name: `Spell Scroll 6th Level (${forthlevelspellTypes[randomIndex]})`,
          uuid:`@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DM7hzgL836ZyUFB1]{Spell Scroll 4th Level} (${forthlevelspellTypes[randomIndex]})`,
          image: "icons/sundries/scrolls/scroll-plain-red.webp" }
}; 
}
},
  { range: [23, 27], item: () => {
    const pTwoAmmoTypes = [
       {name: "Ammunition +2",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZRo6IoRMYun1OYJU]{Ammunition +2, 20 units}", 
        image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
      },  
    ];    
    const randomIndex = Math.floor(Math.random() * pTwoAmmoTypes.length);
    return { 
    roll: randomIndex + 1,
    item: {
    name: pTwoAmmoTypes[randomIndex].name,
    uuid: pTwoAmmoTypes[randomIndex].uuid,
    image: pTwoAmmoTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [28, 32], item: () => {
  const potionofClairvoyance = [
  { name: "Potion of Clairvoyance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bAyr7j5Peq9wIJTa]{Potion of Clairvoyance}",
    image: "icons/consumables/potions/potion-bottle-corked-stopper-ornate-yellow.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofClairvoyance .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofClairvoyance[randomIndex].name,
    uuid: potionofClairvoyance[randomIndex].uuid,
    image: potionofClairvoyance[randomIndex].image
  }
}; 
}
},
  { range: [33, 37], item: () => {
  const potionofDiminution = [
  { name: "Potion of Diminution",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HY8duCwmvlXOruTG]{Potion of Diminution}",
    image: "icons/consumables/potions/potion-tube-corked-glowing-red.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofDiminution .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofDiminution[randomIndex].name,
    uuid: potionofDiminution[randomIndex].uuid,
    image: potionofDiminution[randomIndex].image
  }
}; 
}
},
  { range: [38, 42], item: () => {
  const potionofGaseousForm = [
  { name: "Potion of Gaseous Form",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bqZ6NTLDCUB98YjV]{Potion of Gaseous Form}",
    image: "icons/consumables/potions/bottle-corked-empty.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofGaseousForm .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofGaseousForm[randomIndex].name,
    uuid: potionofGaseousForm[randomIndex].uuid,
    image: potionofGaseousForm[randomIndex].image
  }
}; 
}
}, 
  { range: [43, 47], item: () => {
  const potionofFrostGiantStrength = [
  { name: "Potion of Frost Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TevMHicE3A70AlmP]{Potion of Frost Giant Strength}",
    image: "icons/consumables/potions/vial-cork-empty.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofFrostGiantStrength .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofFrostGiantStrength[randomIndex].name,
    uuid: potionofFrostGiantStrength[randomIndex].uuid,
    image: potionofFrostGiantStrength[randomIndex].image
  }
}; 
}
}, 
  { range: [48, 52], item: () => {
  const potionofStoneGiantStrength = [
  { name: "Potion of Stone Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4ZiJsDTRA1GgcWKP]{Potion of Stone Giant Strength}",
    image: "icons/consumables/potions/potion-faceted-corked-blue.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofStoneGiantStrength .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofStoneGiantStrength[randomIndex].name,
    uuid: potionofStoneGiantStrength[randomIndex].uuid,
    image: potionofStoneGiantStrength[randomIndex].image
  }
}; 
}
}, 
  { range: [53, 57], item: () => {
  const potionofHeroism = [
  { name: "Potion of Heroism",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wNKYbKYwOHbA7SH8]{Potion of Heroism}",
    image: "icons/consumables/potions/flask-corked-blue-glow.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofHeroism .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofHeroism[randomIndex].name,
    uuid: potionofHeroism[randomIndex].uuid,
    image: potionofHeroism[randomIndex].image
  }
}; 
}
}, 
  { range: [58, 62], item: () => {
  const potionofInvulnerability = [
  { name: "Potion of Invulnerability",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GflFn97s6YnHqI6K]{Potion of Invulnerability}",
    image: "icons/consumables/potions/bottle-round-empty-glass.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofInvulnerability .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofInvulnerability[randomIndex].name,
    uuid: potionofInvulnerability[randomIndex].uuid,
    image: potionofInvulnerability[randomIndex].image
  }
}; 
}
}, 
  { range: [63, 67], item: () => {
  const potionofMindReading = [
  { name: "Potion of Mind Reading",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ct9LR9Ft1FG4a6Y1]{Potion of Mind Reading}",
    image: "icons/consumables/potions/bottle-bulb-corked-purple.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofMindReading .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofMindReading[randomIndex].name,
    uuid: potionofMindReading[randomIndex].uuid,
    image: potionofMindReading[randomIndex].image
  }
}; 
}
}, 
  { range: [68, 72], item: () => {
    const fifthlevelspellTypes = [
        "Animate Objects", "Antilife Shell", "Arcane Hand", "Awaken", "Banishing Smite",
        "Bigbys Hand", "Circle of Power", "Cloudkill", "Commune", "Commune with Nature",
        "Cone of Cold", "Conjure Elemental", "Conjure Volley", "Contact Other Plane", "Contagion",
        "Control Winds", "Create Spelljamming Helm", "Creation", "Danse Macabre", "Dawn",
        "Destructive Wave", "Dispel Evil and Good", "Dominate Person", "Dream", "Enervation",
        "Far Step", "Flame Strike", "Freedom of the Winds", "Geas", "Greater Restoration",
        "Hallow", "Hold Monster", "Holy Weapon", "Immolation", "Infernal Calling",
        "Insect Plague", "Legend Lore", "Maelstrom", "Mass Cure Wounds", "Mislead",
        "Modify Memory", "Negative Energy Flood", "Passwall", "Planar Binding", "Raise Dead",
        "Rarys Telepathic Bond", "Reincarnate", "Scrying", "Seeming", "Skill Empowerment",
        "Steel Wind Strike", "Summon Celestial", "Summon Draconic Spirit", "Swift Quiver", "Synaptic Static",
        "Telekinesis", "Telepathic Bond", "Teleportation Circle", "Temporal Shunt", "Transmute Rock",
        "Tree Stride", "Wall of Force", "Wall of Light", "Wall of Stone", "Wrath of Nature",
    ];
    
    const randomIndex = Math.floor(Math.random() * fifthlevelspellTypes.length);
return { 
  roll: randomIndex + 1,
  item:{  name: `Spell Scroll 6th Level (${fifthlevelspellTypes[randomIndex]})`,
          uuid:`@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wa1VF8TXHmkrrR35]{Spell Scroll 5th Level} (${fifthlevelspellTypes[randomIndex]})`,
          image: "icons/sundries/scrolls/scroll-plain-red.webp" }
}; 
}
},
  { range: [73, 75], item: () => {
  const elixerofHealth = [
  { name: "Elixir of Health",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sGvFbm9PryFJRQyn]{Elixir of Health}",
    image: "icons/consumables/potions/vial-cork-red.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * elixerofHealth .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: elixerofHealth[randomIndex].name,
    uuid: elixerofHealth[randomIndex].uuid,
    image: elixerofHealth[randomIndex].image
  }
}; 
}
}, 
  { range: [76, 78], item: () => {
  const oilofEtherealness = [
  { name: "Oil of Etherealness",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Xbq8CyXSRV358SfP]{Oil of Etherealness}",
    image: "icons/consumables/potions/bottle-conical-corked-labeled-shell-cyan.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * oilofEtherealness .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: oilofEtherealness[randomIndex].name,
    uuid: oilofEtherealness[randomIndex].uuid,
    image: oilofEtherealness[randomIndex].image
  }
}; 
}
}, 
  { range: [79, 81], item: () => {
    const potionofFireGiantStrength = [
    { name: "Potion of Fire Giant Strength",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bEZOY6uvHRweMM56]{Potion of Fire Giant Strength}",
      image: "icons/consumables/potions/vial-cork-empty.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * potionofFireGiantStrength .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofFireGiantStrength[randomIndex].name,
      uuid: potionofFireGiantStrength[randomIndex].uuid,
      image: potionofFireGiantStrength[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [82, 84], item: () => {
    const featherTokenTypes = [
      { name: "Feather Token Anchor", 
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DnlQkH6Bpwkd5n5Y]{Feather Token Anchor}", 
        image: "icons/commodities/materials/feather-blue.webp",},
      { name: "Feather Token Bird",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hWqImieUaLo08l9l]{Feather Token Bird}", 
        image: "icons/commodities/materials/feather-yellow.webp",},
      { name: "Feather Token Fan",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.e98hfROZjztt7ccO]{Feather Token Fan}", 
        image: "icons/commodities/materials/feather-colored-red.webp",},
      { name: "Feather Token Swan Boat",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UgnUJhu0tW1tLt7g]{Feather Token Swan Boat}", 
        image: "icons/commodities/materials/feather-blue-grey.webp",},
      { name: "Feather Token Tree",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NjTgPn2o0M1TGk93]{Feather Token Tree}",
        image: "icons/commodities/materials/feather-colored-green.webp",},
      { name: "Feather Token Whip",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fgkj11diTJJ7H3JC]{Feather Token Whip}",   
        image: "icons/commodities/materials/feather-colored-blue.webp",},
    ];
      
    const randomIndex = Math.floor(Math.random() * featherTokenTypes.length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: featherTokenTypes[randomIndex].name,
        uuid: featherTokenTypes[randomIndex].uuid,
        image: featherTokenTypes[randomIndex].image
      }
    }; 
    }
    }, 
  { range: [85, 87], item: () => {
    const protectionScrollTypes = [
      {
        name:"Scroll of Protection (Aberrations)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HFhOuMYm5hAT9zrV]{Scroll of Protection (Aberrtions)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name:"Scroll of Protection (Beasts)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ofVljzBddj5AwZVL]{Scroll of Protection (Beasts)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Celestials)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uKjHqaQlEiVRA5co]{Scroll of Protection (Celestials)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Elementals)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0BOfmF8Zqw3WbS1R]{Scroll of Protection (Elementals)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Fey)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dKLZBP8tCWtkb9a3]{Scroll of Protection (Fey)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Fiends)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7TUH4Jz7alampzRB]{Scroll of Protection (Fiends)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Plants)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ohgMcSdLpTP4b000]{Scroll of Protection (Plants)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Undead)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lktJvTqWCZ1zMwCK]{Scroll of Protection (Undead)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
  ];
      
    const randomIndex = Math.floor(Math.random() * protectionScrollTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: protectionScrollTypes[randomIndex].name,
      uuid: protectionScrollTypes[randomIndex].uuid,
      image: protectionScrollTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [88, 89], item: () => {
  const bagofBeans = [
  { name: "Bag of Beans",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F8QpasPjLrw2POzE]{Bag of Beans}",
    image: "icons/containers/bags/sack-cloth-green-blue.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * bagofBeans .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: bagofBeans[randomIndex].name,
    uuid: bagofBeans[randomIndex].uuid,
    image: bagofBeans[randomIndex].image
  }
}; 
}
},  
  { range: [90, 91], item: () => {
  const beadofForce = [
  { name: "Bead of Force",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SqTtbBCfiEsmZ36N]{Bead of Force}",
    image: "icons/magic/water/orb-ice-opaque.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * beadofForce .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: beadofForce[randomIndex].name,
    uuid: beadofForce[randomIndex].uuid,
    image: beadofForce[randomIndex].image
  }
}; 
}
},  
  { range: [92, 92], item: () => {
  const chimeofOpening = [
  { name: "Chime of Opening",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vZdLYfHlLcZqQ8zc]{Chime of Opening}",
    image: "icons/magic/sonic/bell-alarm-red-purple.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * chimeofOpening .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: chimeofOpening[randomIndex].name,
    uuid: chimeofOpening[randomIndex].uuid,
    image: chimeofOpening[randomIndex].image
  }
}; 
}
},  
  { range: [93, 93], item: () => {
  const decanterofEndlessWater = [
  { name: "Decanter of Endless Water",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qXcUKfCVxEvV3VU8]{Decanter of Endless Water}",
    image: "icons/skills/trades/farming-watering-can-green.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * decanterofEndlessWater .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: decanterofEndlessWater[randomIndex].name,
    uuid: decanterofEndlessWater[randomIndex].uuid,
    image: decanterofEndlessWater[randomIndex].image
  }
}; 
}
},  
  { range: [94, 94], item: () => {
  const eyesofMinuteSeeing = [
  { name: "Eyes of Minute Seeing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BsyPV6eTNghT3Fho]{Eyes of Minute Seeing}",
    image: "icons/equipment/head/goggles-leather-grey.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * eyesofMinuteSeeing .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: eyesofMinuteSeeing[randomIndex].name,
    uuid: eyesofMinuteSeeing[randomIndex].uuid,
    image: eyesofMinuteSeeing[randomIndex].image
  }
}; 
}
},  
  { range: [95, 95], item: () => {
  const foldingBoat = [
  { name: "Folding Boat",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.u4ewpAFZjLrWrmQv]{Folding Boat}",
    image: "icons/tools/nautical/steering-wheel.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * foldingBoat .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: foldingBoat[randomIndex].name,
    uuid: foldingBoat[randomIndex].uuid,
    image: foldingBoat[randomIndex].image
  }
}; 
}
}, 
  { range: [96, 96], item: () => {
  const handyHaversack = [
  { name: "Handy Haversack",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7vqs5AqI4VCmuszx]{Handy Haversack}",
    image: "icons/containers/bags/pack-leather-white-tan.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * handyHaversack .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: handyHaversack[randomIndex].name,
    uuid: handyHaversack[randomIndex].uuid,
    image: handyHaversack[randomIndex].image
  }
}; 
}
},  
  { range: [97, 97], item: () => {
  const horseshoesofSpeed = [
  { name: "Horseshoes of Speed",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nAqDwI9GyXS1diiz]{Horseshoes of Speed}",
    image: "icons/tools/smithing/horseshoe-steel-grey.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * horseshoesofSpeed .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: horseshoesofSpeed[randomIndex].name,
    uuid: horseshoesofSpeed[randomIndex].uuid,
    image: horseshoesofSpeed[randomIndex].image
  }
}; 
}
},  
  { range: [98, 98], item: () => {
  const necklaceofFireballs = [
  { name: "Necklace of Fireballs",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3ALOhh6JNInIK4o7]{Necklace of Fireballs}",
    image: "icons/equipment/neck/collar-rounded-red.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * necklaceofFireballs .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: necklaceofFireballs[randomIndex].name,
    uuid: necklaceofFireballs[randomIndex].uuid,
    image: necklaceofFireballs[randomIndex].image
  }
}; 
}
},  
  { range: [99, 99], item: () => {
  const periaptofHealth = [
  { name: "Periapt of Health",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9v0TPDXNa9S7aNB4]{Periapt of Health}",
    image: "icons/equipment/neck/amulet-geometric-stone-red.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * periaptofHealth .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: periaptofHealth[randomIndex].name,
    uuid: periaptofHealth[randomIndex].uuid,
    image: periaptofHealth[randomIndex].image
  }
}; 
}
},  
  { range: [100, 100], item: () => {
    const sendingStones = [
    { name: "Sending Stones",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BRuFlCIxZUWjuxS9]{Sending Stones}",
      image: "icons/commodities/gems/pearl-rough-white.webp",
  }, 
  ];
  const randomIndex = Math.floor(Math.random() * sendingStones .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: sendingStones[randomIndex].name,
      uuid: sendingStones[randomIndex].uuid,
      image: sendingStones[randomIndex].image
    }
  }; 
  }
  },  
];

const magicItemTableD = [
{ range: [1, 20], item: () => {
  const potionofSupremeHealing = [
    { name: "Potion of Supreme Healing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JFiSlgcm3uSSBM5t]{Potion of Supreme Healing}",
      image: "icons/consumables/potions/potion-flask-stopped-red.webp",
  }, 
];
  const randomIndex = Math.floor(Math.random() * potionofSupremeHealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofSupremeHealing[randomIndex].name,
      uuid: potionofSupremeHealing[randomIndex].uuid,
      image: potionofSupremeHealing[randomIndex].image
    }
  }; 
  }
  }, 
{ range: [21, 30], item: () => {
  const potionofInvisibility = [
    {uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rTn4p9nJr4Aq2GPB]{Potion of Invisibility}",
    image: "icons/consumables/potions/bottle-bulb-empty-glass.webp",
    image: "icons/consumables/potions/vial-cork-empty.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofInvisibility .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofInvisibility[randomIndex].name,
    uuid: potionofInvisibility[randomIndex].uuid,
    image: potionofInvisibility[randomIndex].image
  }
}; 
}
}, 
{ range: [31, 40], item: () => {
  const potionofSpeed = [
  { name: "Potion of Speed",
  uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ctKfjHjk9gs9UtZI]{Potion of Speed}",
  image: "icons/consumables/potions/potion-bottle-corked-fancy-orange.webp"
} 
];
const randomIndex = Math.floor(Math.random() * potionofSpeed .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofSpeed[randomIndex].name,
    uuid: potionofSpeed[randomIndex].uuid,
    image: potionofSpeed[randomIndex].image
  }
}; 
}
}, 
{ range: [41, 50], item: () => {
  const sixthlevelspellTypes = [
    "Arcane Gate", "Blade Barrier", "Bones of the Earth", "Chain Lightning", "Circle of Death",
    "Conjure Fey", "Contingency", "Create Homunculus", "Create Undead", "Disintegrate",
    "Drawmijs Instant Summons", "Druid Grove", "Eyebite", "Find the Path", "Fizbans Platinum Shield",
    "Flesh to Stone", "Forbiddance", "Freezing Sphere", "Globe of Invulnerability", "Gravity Fissure",
    "Guards and Wards", "Harm", "Heal", "Heroes Feast", "Instant Summons",
    "Investiture of Flame", "Investiture of Ice", "Investiture of Stone", "Investiture of Wind", "Magic Jar",
    "Mass Suggestion", "Mental Prison", "Move Earth", "Otilukes Freezing Sphere", "Ottos Irresistible Dance",
    "Planar Ally", "Primordial Ward", "Programmed Illusion", "Scatter", "Soul Cage",
    "Summon Fiend", "Sunbeam", "Tashas Otherworldly Guise", "Tensers Transformation", "Transport via Plants",
    "True Seeing", "Wall of Ice", "Wall of Thorns", "Wind Walk", "Word of Recall",
];
    
  const randomIndex = Math.floor(Math.random() * sixthlevelspellTypes.length);
  return { 
  roll: randomIndex + 1,
  item:{  name: `Spell Scroll 6th Level (${sixthlevelspellTypes[randomIndex]})`,
          uuid:`@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tI3rWx4bxefNCexS]{Spell Scroll 6th Level} (${sixthlevelspellTypes[randomIndex]})`,
          image: "icons/sundries/scrolls/scroll-bound-sealed-red-green.webp" }
}; 
}
},
{ range: [51, 57], item: () => {
const seventhlevelspellTypes = [
    "Conjure Celestial", "Create Magen", "Crown of Stars", "Delayed Blast Fireball", "Divine Word",
    "Draconic Transformation", "Dream of the Blue Veil", "Etherealness", "Finger of Death", "Fire Storm",
    "Forcecage", "Magnificent Mansion", "Mirage Arcane", "Mordenkainens Magnificent Mansion", "Mordenkainens Sword",
    "Plane Shift", "Power Word Pain", "Prismatic Spray", "Project Image", "Regenerate",
    "Resurrection", "Reverse Gravity", "Sequester", "Simulacrum", "Symbol",
    "Teleport", "Temple of the Gods", "Tether Essence", "Whirlwind",
];
    
  const randomIndex = Math.floor(Math.random() * seventhlevelspellTypes.length);
  return { 
  roll: randomIndex + 1,
  item: {name: `Spell Scroll 7th Level (${seventhlevelspellTypes[randomIndex]})`,
        uuid:  `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mtyw4NS1s7j2EJaD]{Spell Scroll 7th Level} (${seventhlevelspellTypes[randomIndex]})`,
        image: "icons/sundries/scrolls/scroll-bound-sealed-red-green.webp" }
  }; 
}
},
{ range: [58, 62], item: () => {
  const pThreeAmmoTypes = [
     {name: "Ammunition +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OQBQJ0xtLvILTh5V]{Ammunition +3, 20 units}", 
      image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
    },  
  ];    
  const randomIndex = Math.floor(Math.random() * pThreeAmmoTypes.length);
  return { 
  roll: randomIndex + 1,
  item: {
  name: pThreeAmmoTypes[randomIndex].name,
  uuid: pThreeAmmoTypes[randomIndex].uuid,
  image: pThreeAmmoTypes[randomIndex].image
  }
  }; 
  }
  },
{ range: [63, 67], item: () => {
  const oilofSharpness = [
  { name: "Potion of Storm Giant Strength",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.C0MNXWA81ufzGlp5]{Oil of Sharpness}",
    image: "icons/consumables/potions/potion-faceted-corked-blue.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * oilofSharpness .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: oilofSharpness[randomIndex].name,
    uuid: oilofSharpness[randomIndex].uuid,
    image: oilofSharpness[randomIndex].image
  }
}; 
}
}, 
{ range: [73, 77], item: () => {
  const potionofCloudGiantStrength = [
  { name: "Potion of Cloud Giant Strength",
  uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lAcTZgNtpmks2Mo5]{Potion of Cloud Giant Strength}",
  image: "icons/consumables/potions/vial-cork-empty.webp"
},
];
const randomIndex = Math.floor(Math.random() * potionofCloudGiantStrength .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofCloudGiantStrength[randomIndex].name,
    uuid: potionofCloudGiantStrength[randomIndex].uuid,
    image: potionofCloudGiantStrength[randomIndex].image
  }
}; 
}
}, 
{ range: [78, 82], item: () => {
  const potionofLongevity = [
  { name: "Potion of Longevity",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HBqfFdnS5WO6wIpq]{Potion of Longevity}",
    image: "icons/consumables/potions/potion-jar-corked-labeled-red.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofLongevity .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofLongevity[randomIndex].name,
    uuid: potionofLongevity[randomIndex].uuid,
    image: potionofLongevity[randomIndex].image
  }
}; 
}
}, 
{ range: [83, 87], item: () => {
  const potionofVitality = [
  { name: "Potion of Vitality",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G8KlJ9gjyWMXGVQy]{Potion of Vitality}",
    image: "icons/consumables/potions/bottle-round-corked-orante-red.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * potionofVitality .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: potionofVitality[randomIndex].name,
    uuid: potionofVitality[randomIndex].uuid,
    image: potionofVitality[randomIndex].image
  }
}; 
}
}, 
{ range: [88, 92], item: () => {
  const eighthlevelspellTypes = [
    "Abi-Dalzims Horrid Wilting", "Animal Shapes", "Antimagic Field", "Antipathy/Sympathy", "Clone",
    "Control Weather", "Dark Star", "Demiplane", "Dominate Monster", "Earthquake",
    "Feeblemind", "Glibness", "Holy Aura", "Illusory Dragon", "Incendiary Cloud",
    "Maddening Darkness", "Maze", "Mighty Fortress", "Mind Blank", "Power Word Stun",
    "Reality Break", "Sunburst", "Telepathy", "Tsunami",
  ];
    
  const randomIndex = Math.floor(Math.random() * eighthlevelspellTypes.length);
  return { 
  roll: randomIndex + 1,
  item:{name: `Spell scroll (${eighthlevelspellTypes[randomIndex]})`,
        uuid:`Spell scroll (${eighthlevelspellTypes[randomIndex]})`,
        image: "icons/sundries/scrolls/scroll-bound-sealed-red-green.webp"}
  }; 
}
},
{ range: [93, 95], item: () => {
  const horseshoesofAZephyr = [
  { name: "Horseshoes of a Zephyr",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2mvXGvDmHHhzbT04]{Horseshoes of a Zephyr}",
    image: "icons/tools/smithing/horseshoe-steel-blue.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * horseshoesofAZephyr .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: horseshoesofAZephyr[randomIndex].name,
    uuid: horseshoesofAZephyr[randomIndex].uuid,
    image: horseshoesofAZephyr[randomIndex].image
  }
}; 
}
}, 
{ range: [96, 98], item: () => {
  const marvelousPigments = [
  { name: "Marvelous Pigments",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.e3XQygrXkzNvkDGF]{Marvelous Pigments}",
    image: "icons/commodities/materials/powder-red-green-yellow.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * marvelousPigments .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: marvelousPigments[randomIndex].name,
    uuid: marvelousPigments[randomIndex].uuid,
    image: marvelousPigments[randomIndex].image
  }
}; 
}
}, 
{ range: [99, 99], item: () => {
  const bagofDevouring = [
  { name: "Bag of Devouring",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YG9QW0flem4SLL6A]{Bag of Devouring}",
    image: "icons/containers/bags/sack-simple-leather-tan.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * bagofDevouring .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: bagofDevouring[randomIndex].name,
    uuid: bagofDevouring[randomIndex].uuid,
    image: bagofDevouring[randomIndex].image
  }
}; 
}
}, 
{ range: [100, 100], item: () => {
  const portableHole = [
  { name: "Portable Hole",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rvxGvcUzoQXVNbAu]{Portable Hole}",
    image: "icons/consumables/potions/vial-cork-empty.webp",
}, 
];
const randomIndex = Math.floor(Math.random() * portableHole .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: portableHole[randomIndex].name,
    uuid: portableHole[randomIndex].uuid,
    image: portableHole[randomIndex].image
  }
}; 
}
}, 
];

const magicItemTableE = [
  { range: [1, 30], item: () => {
    const eighthlevelspellTypes = [
        "Abi-Dalzims Horrid Wilting", "Animal Shapes", "Antimagic Field", "Antipathy/Sympathy", "Clone",
        "Control Weather", "Dark Star", "Demiplane", "Dominate Monster", "Earthquake",
        "Feeblemind", "Glibness", "Holy Aura", "Illusory Dragon", "Incendiary Cloud",
        "Maddening Darkness", "Maze", "Mighty Fortress", "Mind Blank", "Power Word Stun",
        "Reality Break", "Sunburst", "Telepathy", "Tsunami",
    ];
    
    const randomIndex = Math.floor(Math.random() * eighthlevelspellTypes.length);
    return { 
      roll: randomIndex + 1,
      item:{
      name: `Spell scroll (${eighthlevelspellTypes[randomIndex]})`,
      uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aOrinPg7yuDZEuWr]{Spell Scroll 8th Level} (${eighthlevelspellTypes[randomIndex]})`,
      image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"}
    }; 
}
},
  { range: [31, 55], item: () => {
    const potionofStormGiantStrength = [
    { name: "Potion of Storm Giant Strength",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1KMSpOSU0EliUBm2]{Potion of Storm Giant Strength}",
      image: "icons/consumables/potions/vial-cork-empty.webp",
  }, 
];
  const randomIndex = Math.floor(Math.random() * potionofStormGiantStrength .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofStormGiantStrength[randomIndex].name,
      uuid: potionofStormGiantStrength[randomIndex].uuid,
      image: potionofStormGiantStrength[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [56, 70], item: () => {
    const potionofSupremeHealing = [
    { name: "Potion of Supreme Healing",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JFiSlgcm3uSSBM5t]{Potion of Supreme Healing}",
      image: "icons/consumables/potions/potion-flask-stopped-red.webp",
  }, 
];
  const randomIndex = Math.floor(Math.random() * potionofSupremeHealing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: potionofSupremeHealing[randomIndex].name,
      uuid: potionofSupremeHealing[randomIndex].uuid,
      image: potionofSupremeHealing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [71, 85], item: () => {
    const ninthlevelspellTypes = [
        "Astral Projection", "Blade of Disaster", "Foresight", "Gate", "Imprisonment",
        "Invulnerability", "Mass Heal", "Mass Polymorph", "Meteor Swarm", "Power Word Heal",
        "Power Word Kill", "Prismatic Wall", "Psychic Scream", "Ravenous Void", "Shapechange",
        "Storm of Vengeance", "Time Ravage", "Time Stop", "True Polymorph", "True Resurrection",
        "Weird", "Wish",
    ];

        const randomIndex = Math.floor(Math.random() * ninthlevelspellTypes.length);
        return { 
          roll: randomIndex + 1,
          item: {
          name: `Spell scroll (${ninthlevelspellTypes[randomIndex]})`,
          uuid: `@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.O4YbkJkLlnsgUszZ]{Spell Scroll 9th Level} (${ninthlevelspellTypes[randomIndex]})`,
          image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"},
        }; 
    }
    },
  { range: [86, 93], item: () => {
    const universalSolvent = [
    { name: "Universal Solvent",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MAwoj2suj6cvb9Ti]{Universal Solvent}",
      image: "icons/commodities/materials/material-cotton-white.webp",
  }, 
];
  const randomIndex = Math.floor(Math.random() * universalSolvent .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: universalSolvent[randomIndex].name,
      uuid: universalSolvent[randomIndex].uuid,
      image: universalSolvent[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [94, 98], item: () => {
    const arrowofSlaying = [
    { name: "Arrow of Slaying",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aXsfZvDCdpuv3Yvb]{Arrow of Slaying}",
      image: "icons/weapons/ammunition/arrow-head-war-flight.webp",
  }, 
];
  const randomIndex = Math.floor(Math.random() * arrowofSlaying .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: arrowofSlaying[randomIndex].name,
      uuid: arrowofSlaying[randomIndex].uuid,
      image: arrowofSlaying[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [99, 100], item: () => {
    const sovereignGlue = [
    { name: "Sovereign Glue",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zJ5LhDvTxYKzPIx4]{Sovereign Glue}",
      image: "icons/consumables/drinks/tea-jug-gourd-brown.webp",
  }, 
];
  const randomIndex = Math.floor(Math.random() * sovereignGlue .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: sovereignGlue[randomIndex].name,
      uuid: sovereignGlue[randomIndex].uuid,
      image: sovereignGlue[randomIndex].image
    }
  }; 
  }
  }, 
];

const magicItemTableF = [
  { range: [1, 15], item: () => {
    const pOneWeaponTypes = [
      {
        name: "Club +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
        image: "icons/weapons/clubs/club-simple-barbed.webp",
      },
      {
        name: "Dagger +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
        image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
      },
      {
        name: "Greatclub +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
        image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
      },
      {
        name: "Handaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
        image: "icons/weapons/axes/axe-broad-black.webp",
      },
      {
        name: "Javelin +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
        image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
      },
      {
        name: "Light Hammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
        image: "icons/weapons/hammers/hammer-war-spiked.webp",
      },
      {
        name: "Mace +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Quarterstaff +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
        image: "icons/weapons/staves/staff-simple-gold.webp",
      },
      {
        name: "Sickle +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
        image: "icons/weapons/sickles/sickle-curved.webp",
      },
      {
        name: "Spear +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Yklwa +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Boomerang +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
        image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
      },
      {
        name: "Light Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Dart +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
        image: "icons/weapons/thrown/dagger-simple.webp",
      },
      {
        name: "Shortbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
        image: "icons/weapons/bows/shortbow-recurve.webp",
      },
      {
        name: "Sling +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
        image: "icons/weapons/slings/slingshot-wood.webp",
      },
      {
        name: "Battleaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
        image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
      },
      {
        name: "Flail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
        image: "icons/weapons/maces/flail-ball-grey.webp",
      },
      {
        name: "Glaive +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
        image: "icons/weapons/polearms/glaive-simple.webp",
      },
      {
        name: "Greataxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
        image: "icons/weapons/axes/axe-double.webp",
      },
      {
        name: "Greatsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
        image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
      },
      {
        name: "Halberd +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
        image: "icons/weapons/polearms/halberd-worn-steel.webp",
      },
      {
        name: "Lance +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
        image: "icons/skills/targeting/target-strike-triple-blue.webp",
      },
      {
        name: "Longsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
        image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
      },
      {
        name: "Maul +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
        image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
      },
      {
        name: "Morningstar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Pike +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
        image: "icons/weapons/polearms/spear-simple-engraved.webp",
      },
      {
        name: "Rapier +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
        image: "icons/skills/melee/sword-twirl-orange.webp",
      },
      {
        name: "Scimitar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
        image: "icons/weapons/swords/sword-katana.webp",
      },
      {
        name: "Shortsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
        image: "icons/weapons/swords/sword-guard-brown.webp",
      },
      {
        name: "Trident +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
        image: "icons/weapons/polearms/trident-silver-blue.webp",
      },
      {
        name: "War Pick +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
        image: "icons/weapons/axes/pickaxe-double-brown.webp",
      },
      {
        name: "Warhammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
        image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
      },
      {
        name: "Whip +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
      },
      {
        name: "Blowgun +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
        image: "icons/weapons/staves/staff-simple-brown.webp",
      },
      {
        name: "Hand Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Heavy Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-purple.webp",
      },
      {
        name: "Longbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
        image: "icons/weapons/bows/longbow-leather-green.webp",
      },
      {
        name: "Net +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
        image: "icons/tools/fishing/net-simple-tan.webp",
      },

        ];
          
      
    const randomIndex = Math.floor(Math.random() * pOneWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pOneWeaponTypes[randomIndex].name,
        uuid: pOneWeaponTypes[randomIndex].uuid,
        image: pOneWeaponTypes[randomIndex].image
      }
    }; 
    }
    },
  { range: [16, 18], item: () => {
    const shieldpone = [
      { name: "Shield +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NgwrqNa6kkgoPW2Q]{Shield +1}",
        image:  "icons/equipment/shield/heater-wooden-brown-notched.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * shieldpone .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: shieldpone[randomIndex].name,
      uuid: shieldpone[randomIndex].uuid,
      image: shieldpone[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [19, 21], item: () => {
    const sentinelShield = [
      { name: "Sentinel Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.D2LlaPwl1m5BLx6K]{Sentinel Shield}",
        image:  "icons/equipment/shield/targe-copper-eye.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * sentinelShield .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: sentinelShield[randomIndex].name,
      uuid: sentinelShield[randomIndex].uuid,
      image: sentinelShield[randomIndex].image
    }
  }; 
  }
  },
  { range: [22, 23], item: () => {
    const amuletofProofagainstDetectionandLocation = [
      { name: "Amulet of Proof against Detection and Location",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.50N8zf58FR4JWR05]{Amulet of Proof against Detection and Location}",
        image:  "icons/equipment/neck/pendant-faceted-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * amuletofProofagainstDetectionandLocation .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: amuletofProofagainstDetectionandLocation[randomIndex].name,
      uuid: amuletofProofagainstDetectionandLocation[randomIndex].uuid,
      image: amuletofProofagainstDetectionandLocation[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [24, 25], item: () => {
    const bootsofElvenkind = [
      { name: "Boots of Elvenkind",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KKWBLKQIWHtcpymp]{Boots of Elvenkind}",
        image:  "icons/equipment/feet/boots-leather-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bootsofElvenkind .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bootsofElvenkind[randomIndex].name,
      uuid: bootsofElvenkind[randomIndex].uuid,
      image: bootsofElvenkind[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [26, 27], item: () => {
    const bootsofStridingandSpringing = [
      { name: "Boots of Striding and Springing",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hSY1b8yi8JWw2blf]{Boots of Striding and Springing}",
        image:  "icons/equipment/feet/shoes-leather-simple-brown.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bootsofStridingandSpringing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bootsofStridingandSpringing[randomIndex].name,
      uuid: bootsofStridingandSpringing[randomIndex].uuid,
      image: bootsofStridingandSpringing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [28, 29], item: () => {
    const bracersofArchery = [
      { name: "Bracers of Archery",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZYEqOSY9BLZs2GPx]{Bracers of Archery}",
        image:  "icons/equipment/wrist/bracer-studded-leather-steel.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bracersofArchery .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bracersofArchery[randomIndex].name,
      uuid: bracersofArchery[randomIndex].uuid,
      image: bracersofArchery[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [30, 31], item: () => {
    const broochofShielding = [
      { name: "Brooch of Shielding",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZdcEtbtU3VkuxIFE]{Brooch of Shielding}",
        image:  "icons/equipment/neck/pendant-bronze-gem-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * broochofShielding .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: broochofShielding[randomIndex].name,
      uuid: broochofShielding[randomIndex].uuid,
      image: broochofShielding[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [32, 33], item: () => {
    const broomofFlying = [
      { name: "Broom of Flying",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hFAVm9pTJDm0nu3g]{Broom of Flying}",
        image:  "icons/skills/melee/hand-grip-staff-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * broomofFlying .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: broomofFlying[randomIndex].name,
      uuid: broomofFlying[randomIndex].uuid,
      image: broomofFlying[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [34, 35], item: () => {
    const cloakofElvenkind = [
      { name: "Cloak of Elvenkind",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Jvf1NWFxcjfHnMQ5]{Cloak of Elvenkind}",
        image:  "icons/equipment/back/cloak-collared-leaves-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * cloakofElvenkind .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: cloakofElvenkind[randomIndex].name,
      uuid: cloakofElvenkind[randomIndex].uuid,
      image: cloakofElvenkind[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [36, 37], item: () => {
    const cloakofProtection = [
      { name: "Cloak of Protection",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lvaMqEhfidfHDGf5]{Cloak of Protection}",
        image:  "icons/equipment/back/mantle-collared-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * cloakofProtection .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: cloakofProtection[randomIndex].name,
      uuid: cloakofProtection[randomIndex].uuid,
      image: cloakofProtection[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [38, 39], item: () => {
    const shieldpone = [
      { name: "Gauntlets of Ogre Power",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3TWT5bv3z5zGUZCe]{Gauntlets of Ogre Power}",
        image:  "icons/equipment/hand/gauntlet-simple-leather-brown-gold.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * shieldpone .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: shieldpone[randomIndex].name,
      uuid: shieldpone[randomIndex].uuid,
      image: shieldpone[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [40, 41], item: () => {
    const hatOfDisguise = [
      { name: "Hat of Disguise",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dQxqcjDm0IxYusCV]{Hat of Disguise}",
        image:  "icons/magic/control/silhouette-hold-change-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * hatOfDisguise .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: hatOfDisguise[randomIndex].name,
      uuid: hatOfDisguise[randomIndex].uuid,
      image: hatOfDisguise[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [42, 43], item: () => {
    const javelinofLightning = [
      { name: "Javelin of Lightning",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LEC1wkaAUnWzDPDD]{Javelin of Lightning}",
        image:  "icons/magic/lightning/bolt-beam-strike-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * javelinofLightning .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: javelinofLightning[randomIndex].name,
      uuid: javelinofLightning[randomIndex].uuid,
      image: javelinofLightning[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [44, 45], item: () => {
    const pearlofPower = [
      { name: "Pearl of Power",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.44XNWmMGnwXn7bNW]{Pearl of Power}",
        image:  "icons/commodities/gems/pearl-natural.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * pearlofPower .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: pearlofPower[randomIndex].name,
      uuid: pearlofPower[randomIndex].uuid,
      image: pearlofPower[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [46, 47], item: () => {
    const rodOfThePactKeeperpOne = [
      { name: "Shield +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.03Bdy80rRyPqjjeU]{Rod of the Pact Keeper, +1}",
        image:  "icons/weapons/maces/mace-skull-ram.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * rodOfThePactKeeperpOne .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: rodOfThePactKeeperpOne[randomIndex].name,
      uuid: rodOfThePactKeeperpOne[randomIndex].uuid,
      image: rodOfThePactKeeperpOne[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [48, 49], item: () => {
    const slippersofSpiderClimbing = [
      { name: "Slippers of Spider Climbing",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZgXJE9pjvZLMCeHg]{Slippers of Spider Climbing}",
        image:  "icons/commodities/materials/material-webbing.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * slippersofSpiderClimbing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: slippersofSpiderClimbing[randomIndex].name,
      uuid: slippersofSpiderClimbing[randomIndex].uuid,
      image: slippersofSpiderClimbing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [50, 51], item: () => {
    const staffoftheAdder = [
      { name: "Staff of the Adder",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rzfxVnY9QqApasXO]{Staff of the Adder}",
        image:  "icons/weapons/staves/staff-simple-spiral-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * staffoftheAdder .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: staffoftheAdder[randomIndex].name,
      uuid: staffoftheAdder[randomIndex].uuid,
      image: staffoftheAdder[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [52, 53], item: () => {
    const staffofthePython = [
      { name: "Staff of the Python",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MOeFq5MLAQzVQC7z]{Staff of the Python}",
        image:  "icons/weapons/staves/staff-simple-spiral-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * staffofthePython .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: staffofthePython[randomIndex].name,
      uuid: staffofthePython[randomIndex].uuid,
      image: staffofthePython[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [54, 55], item: () => {
    const vengeanceSwordTypes = [
      {
        name: "Greatsword of Vengeance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4fXvHJ4bDRZTJ9vd]{Greatsword of Vengeance}",
        image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
      },
      {
        name: "Longsword of Vengeance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cDEuHsHXe8y9ffWU]{Longsword of Vengeance}",
        image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
      },
      {
        name: "Rapier of Vengeance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NmAr3hjH6f5uBoVz]{Rapier of Vengeance}",
        image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
      },
      {
        name: "Scimitar of Vengeance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FC36M5CsMnTX6rIC]{Scimitar of Vengeance}",
        image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
      },
      {
        name: "Shortsword of Vengeance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aI0O5zbWTSq7wsi1]{Shortsword of Vengeance}",
        image: "icons/skills/wounds/anatomy-organ-brain-pink-red.webp"
      },
    ];
    const randomIndex = Math.floor(Math.random() * vengeanceSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: vengeanceSwordTypes[randomIndex].name,
        uuid: vengeanceSwordTypes[randomIndex].uuid,
        image: vengeanceSwordTypes[randomIndex].image
      }
    }; 
    }
    },
  { range: [56, 57], item: () => {
    const tridentofFishCommand = [
      { name: "Trident of Fish Command",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.o4Irx3hHiD3FnPbL]{Trident of Fish Command}",
        image:  "icons/weapons/polearms/trident-ice-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * tridentofFishCommand .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: tridentofFishCommand[randomIndex].name,
      uuid: tridentofFishCommand[randomIndex].uuid,
      image: tridentofFishCommand[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [58, 59], item: () => {
    const wandofMagicMissiles = [
      { name: "Wand of Magic Missiles",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1taRIMF9w7jpnonN]{Wand of Magic Missiles}",
        image:  "icons/equipment/shield/heater-wooden-brown-notched.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * wandofMagicMissiles .length);
  return { 
    roll: randomIndex + 1, 
    item: { 
      name: wandofMagicMissiles[randomIndex].name,
      uuid: wandofMagicMissiles[randomIndex].uuid,
      image: wandofMagicMissiles[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [60, 61], item: () => {
    const wandOfTheWarMagepOne = [
      { name: "Wand of the War Mage +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OPbdSlrhkUDNpgcS]{Wand of the War Mage +1}",
        image:  "icons/weapons/staves/staff-engraved-red.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * wandOfTheWarMagepOne .length);
  return { 
    roll: randomIndex + 1, 
    item: { 
      name: wandOfTheWarMagepOne[randomIndex].name,
      uuid: wandOfTheWarMagepOne[randomIndex].uuid,
      image: wandOfTheWarMagepOne[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [62, 63], item: () => {
    const wandofWeb = [
      { name: "Shield +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4sR5HOah6KwVPHOb]{Wand of Web}",
        image:  "icons/weapons/staves/staff-simple-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * wandofWeb .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: wandofWeb[randomIndex].name,
      uuid: wandofWeb[randomIndex].uuid,
      image: wandofWeb[randomIndex].image
    }
  }; 
  }
  },
  { range: [64, 65], item: () => {
const warningWeaponTypes = [
  { name: "Club of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijVXXudsAXmLIefB]{Club of Warning}", 
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Dagger of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vd6PT3JAmJ2d2Cxz]{Dagger of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Greatclub of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Almxxbq8YbfunMq0]{Greatclub of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Handaxe of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PuaYWLdHFYVJM7N6]{Handaxe of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Javelin of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NXfRZXG6axKjwH0h]{Javelin of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Light Hammer of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FSouo06T8gh3wRbG]{Light Hammer of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Mace of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CcB9vykT4x9liGK3]{Mace of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Quarterstaff of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DewFNYbXGGUPGVW1]{Quarterstaff of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Sickle of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jBKsIbev9bZQQ8Ki]{Sickle of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Spear of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8w5P3WSXgInywA8N]{Spear of warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Yklwa of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.U0sYzfQCEhfGSx3e]{Yklwa of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Light Crossbow of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8aVJBRVxkt266EA1]{Light Crossbow of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Dart of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hfgyVMor6493eJYH]{Dart of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Shortbow of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VguTNeu2e5o2vI3A]{Shortbow of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Sling of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y1HGVwzh1rRGyVxf]{Sling of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Battleaxe of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4hwAvOACEB09Iqs5]{Battleaxe of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Flail of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bmCF1asf9OFnua93]{Flail of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Glaive of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IOHZxJGb1Yu1ou0k]{Glaive of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Greataxe of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5Uzz3CKWOhO2xVY0]{Greataxe of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Greataxe of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5Uzz3CKWOhO2xVY0]{Greataxe of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Halberd of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KaqgW5lbyR2UmQRx]{Halberd of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Lance of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zWO4ge4TXbhvNp5k]{Lance of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Longsword of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VvX2JnW4IqOQm4Av]{Longsword of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Maul of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mUzHoePcAVMsjngq]{Maul of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Morningstar of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mkn24dTlYMgJa0SK]{Morningstar of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Pike of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HVM2nQD7KlOSdnME]{Pike of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Rapier of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mtSqOYZZOmZOLSh6]{Rapier of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Scimitar of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YsgOt77RNfuL5dE6]{Scimitar of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Shortsword of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rm8qyYNB82PYXAoZ]{Shortsword of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Trident of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kdZuxQ8LpulLXPKl]{Trident of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "War Pick of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.apdsApxTFkSZz6kh]{War Pick of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Warhammer of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BhocvSd8Y8KAPS36]{Warhammer of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Whip of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KdG6bAz0BpiajLvh]{Whip of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Blowgun of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YE3zvSqDoTAHHJjl]{Blowgun of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Hand Crossbow of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2WqKtBJyjlXTp3tY]{Hand Crossbow of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Heavy Crossbow of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2vmftnpri983DxhH]{Heavy Crossbow of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Longbow of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4slLl3LBzgorUVJx]{Longbow of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},
  { name: "Net of Warning",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7M4eeuJOP9lpsHQ2]{Net of Warning}",  
  image: "icons/magic/control/hypnosis-mesmerism-eye-tan.webp"},

    ];
    
    const randomIndex = Math.floor(Math.random() * warningWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: warningWeaponTypes[randomIndex].name,
        uuid: warningWeaponTypes[randomIndex].uuid,
        image: warningWeaponTypes[randomIndex].image
      }
    }; 
    }
    },
  { range: [66, 66], item: () => {
    const adamantineChainMailSolo = [
      { name: "Adamantine Chain Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n7fm71CN7qDIBEKk]{Adamantine Chain Mail}",
        image:  "icons/equipment/chest/breastplate-metal-scaled-grey.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * adamantineChainMailSolo .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: adamantineChainMailSolo[randomIndex].name,
      uuid: adamantineChainMailSolo[randomIndex].uuid,
      image: adamantineChainMailSolo[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [67, 67], item: () => {
    const adamantineChainShirtSolo = [
      { name: "Adamantine Chain Shirt",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kjTPoUeomTPWJ9h3]{Adamantine Chain Shirt}",
        image:  "icons/equipment/chest/breastplate-metal-scaled-grey.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * adamantineChainShirtSolo .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: adamantineChainShirtSolo[randomIndex].name,
      uuid: adamantineChainShirtSolo[randomIndex].uuid,
      image: adamantineChainShirtSolo[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [68, 68], item: () => {
    const adamantineScaleMailSolo = [
      { name: "Adamantine Scale Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LdAj2ES9EzfnWcA1]{Adamantine Scale Mail}",
        image:  "icons/equipment/chest/breastplate-metal-scaled-grey.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * adamantineScaleMailSolo .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: adamantineScaleMailSolo[randomIndex].name,
      uuid: adamantineScaleMailSolo[randomIndex].uuid,
      image: adamantineScaleMailSolo[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [69, 69], item: () => {
    const bagofTricksGrey = [
      { name: "Bag of Tricks (Grey)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9Ifr8fGvJ1bArzOW]{Bag of Tricks (Grey)}",
        image:  "icons/containers/bags/sack-leather-grey.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bagofTricksGrey .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bagofTricksGrey[randomIndex].name,
      uuid: bagofTricksGrey[randomIndex].uuid,
      image: bagofTricksGrey[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [70, 70], item: () => {
    const bagofTricksRust = [
      { name: "Bag of Tricks (Rust)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DxIdfGoJEYQj8o3D]{Bag of Tricks (Rust)}",
        image:  "icons/containers/bags/sack-leather-red.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bagofTricksRust .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bagofTricksRust[randomIndex].name,
      uuid: bagofTricksRust[randomIndex].uuid,
      image: bagofTricksRust[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [71, 71], item: () => {
    const bagofTricksTan = [
      { name: "Bag of Tricks (Tan)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LHaqMvrx3PfSzWMQ]{Bag of Tricks (Tan)}",
        image:  "icons/containers/bags/sack-simple-leather-tan.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bagofTricksTan .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bagofTricksTan[randomIndex].name,
      uuid: bagofTricksTan[randomIndex].uuid,
      image: bagofTricksTan[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [72, 72], item: () => {
    const bootsofTheWinterlands = [
      { name: "Boots of the Winterlands",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RDPFmUR9exTEXFc8]{Boots of the Winterlands}",
        image:  "icons/equipment/feet/boots-leather-banded-furred.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * bootsofTheWinterlands .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: bootsofTheWinterlands[randomIndex].name,
      uuid: bootsofTheWinterlands[randomIndex].uuid,
      image: bootsofTheWinterlands[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [73, 73], item: () => {
    const circletofBlasting = [
      { name: "Circlet of Blasting",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9UvWQTY5yIgkJmmb]{Circlet of Blasting}",
        image:  "icons/equipment/finger/ring-crown-teal-gold.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * circletofBlasting .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: circletofBlasting[randomIndex].name,
      uuid: circletofBlasting[randomIndex].uuid,
      image: circletofBlasting[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [74, 74], item: () => {
    const deckofIllusions = [
      { name: "Deck of Illusions",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Wk7EOYoY3b2tgGoS]{Deck of Illusions}",
        image:  "icons/sundries/gaming/playing-cards-black.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * deckofIllusions .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: deckofIllusions[randomIndex].name,
      uuid: deckofIllusions[randomIndex].uuid,
      image: deckofIllusions[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [75, 75], item: () => {
    const eversmokingBottle = [
      { name: "Eversmoking Bottle",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CvzjhUy9ekRieR1A]{Eversmoking Bottle}",
        image:  "icons/commodities/tech/smoke-bomb-purple.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * eversmokingBottle .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: eversmokingBottle[randomIndex].name,
      uuid: eversmokingBottle[randomIndex].uuid,
      image: eversmokingBottle[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [76, 76], item: () => {
    const eyesofCharming = [
      { name: "Eyes of Charming",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8dfhaa1g3VDjhtm3]{Eyes of Charming}",
        image:  "icons/equipment/head/goggles-leather-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * eyesofCharming .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: eyesofCharming[randomIndex].name,
      uuid: eyesofCharming[randomIndex].uuid,
      image: eyesofCharming[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [77, 77], item: () => {
    const eyesofTheEagle = [
      { name: "Eyes of the Eagle",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.U4PI6l96QJUk6TGb]{Eyes of the Eagle}",
        image:  "icons/equipment/head/goggles-leather-tan.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * eyesofTheEagle .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: eyesofTheEagle[randomIndex].name,
      uuid: eyesofTheEagle[randomIndex].uuid,
      image: eyesofTheEagle[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [78, 78], item: () => {
    const figurineowpSilverRaven = [
      { name: "Figurine of Wondrous Power (Silver Raven)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nMtmxeYrbyFdv0bg]{Figurine of Wondrous Power (Silver Raven)}",
        image:  "icons/commodities/materials/feather-blue-grey.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * figurineowpSilverRaven .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: figurineowpSilverRaven[randomIndex].name,
      uuid: figurineowpSilverRaven[randomIndex].uuid,
      image: figurineowpSilverRaven[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [79, 79], item: () => {
    const gemofBrightness = [
      { name: "Gem of Brightness",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.thkvJ5QBRORIwkkV]{Gem of Brightness}",
        image:  "icons/commodities/gems/gem-faceted-teardrop-teal.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * gemofBrightness .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: gemofBrightness[randomIndex].name,
      uuid: gemofBrightness[randomIndex].uuid,
      image: gemofBrightness[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [80, 80], item: () => {
    const glovesofMissileSnaring = [
      { name: "Gloves of Missile Snaring",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.otYAEwhsANKHZAmk]{Gloves of Missile Snaring}",
        image:  "icons/equipment/hand/glove-tooled-leather-brown.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * glovesofMissileSnaring .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: glovesofMissileSnaring[randomIndex].name,
      uuid: glovesofMissileSnaring[randomIndex].uuid,
      image: glovesofMissileSnaring[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [81, 81], item: () => {
    const glovesofSwimmingandClimbing = [
      { name: "Gloves of Swimming and Climbing",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PRhtLbRLb9LjHZG7]{Gloves of Swimming and Climbing}",
        image:  "icons/equipment/hand/glove-simple-leather-brown-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * glovesofSwimmingandClimbing .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: glovesofSwimmingandClimbing[randomIndex].name,
      uuid: glovesofSwimmingandClimbing[randomIndex].uuid,
      image: glovesofSwimmingandClimbing[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [82, 82], item: () => {
    const glovesofThievery = [
      { name: "Gloves of Thievery",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3nCKINbsgramYPO]{Gloves of Thievery}",
        image:  "icons/equipment/hand/glove-simple-leather-purple.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * glovesofThievery .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: glovesofThievery[randomIndex].name,
      uuid: glovesofThievery[randomIndex].uuid,
      image: glovesofThievery[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [83, 83], item: () => {
    const headbandofIntellect = [
      { name: "Headband of Intellect",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.a26LjC4QxP1oorXC]{Headband of Intellect}",
        image:  "icons/equipment/waist/belt-thick-gemmed-steel-grey.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * headbandofIntellect .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: headbandofIntellect[randomIndex].name,
      uuid: headbandofIntellect[randomIndex].uuid,
      image: headbandofIntellect[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [84, 84], item: () => {
    const helmofTelepathy = [
      { name: "Helm of Telepathy",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EJVaAvNfCq6gn6VG]{Helm of Telepathy}",
        image:  "icons/equipment/head/helm-norman-black-gilded.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * helmofTelepathy .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: helmofTelepathy[randomIndex].name,
      uuid: helmofTelepathy[randomIndex].uuid,
      image: helmofTelepathy[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [85, 85], item: () => {
    const iotbDossLute = [
      { name: "Instrument of the bards (Doss lute)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3DGSRiumbUyLqtqt]{Instrument of the bards (Doss lute)}",
        image:  "icons/tools/instruments/lute-gold-brown.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * iotbDossLute .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: iotbDossLute[randomIndex].name,
      uuid: iotbDossLute[randomIndex].uuid,
      image: iotbDossLute[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [86, 86], item: () => {
    const iotbFochlucanBandore = [
      { name: "Instrument of the bards (Fochlucan bandore)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0jSablM7H9wNzrez]{Instrument of the bards (Fochlucan bandore)}",
        image:  "icons/tools/instruments/lute-gold-brown.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * iotbFochlucanBandore .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: iotbFochlucanBandore[randomIndex].name,
      uuid: iotbFochlucanBandore[randomIndex].uuid,
      image: iotbFochlucanBandore[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [87, 87], item: () => {
    const iotbMacFuirmidhCittern = [
      { name: "Instrument of the bards (Mac-Fuirmidh cittern)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mAUYi4DcMb8hsBPX]{Instrument of the bards (Mac-Fuirmidh cittern)}",
        image:  "icons/tools/instruments/lute-gold-brown.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * iotbMacFuirmidhCittern .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: iotbMacFuirmidhCittern[randomIndex].name,
      uuid: iotbMacFuirmidhCittern[randomIndex].uuid,
      image: iotbMacFuirmidhCittern[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [88, 88], item: () => {
    const medallionofThoughts = [
      { name: "Medallion of Thoughts",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.skoUe223EvRYGPL6]{Medallion of Thoughts}",
        image:  "icons/equipment/neck/pendant-bronze-gem-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * medallionofThoughts .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: medallionofThoughts[randomIndex].name,
      uuid: medallionofThoughts[randomIndex].uuid,
      image: medallionofThoughts[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [89, 89], item: () => {
    const necklaceofAdaptation = [
      { name: "Necklace of Adaptation",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wwNpAz2KMukovewN]{Necklace of Adaptation}",
        image:  "icons/equipment/neck/pendant-round-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * necklaceofAdaptation .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: necklaceofAdaptation[randomIndex].name,
      uuid: necklaceofAdaptation[randomIndex].uuid,
      image: necklaceofAdaptation[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [90, 90], item: () => {
    const periaptofWoundClosure = [
      { name: "Periapt of Wound Closure",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DWwBkOFuYf5VN3M2]{Periapt of Wound Closure}",
        image:  "icons/equipment/neck/pendant-faceted-blue.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * periaptofWoundClosure .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: periaptofWoundClosure[randomIndex].name,
      uuid: periaptofWoundClosure[randomIndex].uuid,
      image: periaptofWoundClosure[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [91, 91], item: () => {
    const pipesofHaunting = [
      { name: "Pipes of Haunting",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oNLfJNRQgUHpU8c7]{Pipes of Haunting}",
        image:  "icons/tools/instruments/flute-simple-wood.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * pipesofHaunting .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: pipesofHaunting[randomIndex].name,
      uuid: pipesofHaunting[randomIndex].uuid,
      image: pipesofHaunting[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [92, 92], item: () => {
    const pipesoftheSewers = [
      { name: "Pipes of the Sewers",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nvhk1quD0Dg1ZtSH]{Pipes of the Sewers}",
        image:  "icons/tools/instruments/flute-simple-wood.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * pipesoftheSewers .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: pipesoftheSewers[randomIndex].name,
      uuid: pipesoftheSewers[randomIndex].uuid,
      image: pipesoftheSewers[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [93, 93], item: () => {
    const ringOfJumping = [
      { name: "Ring of Jumping",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x7LfMrLafLKfemGH]{Ring of Jumping}",
        image:  "icons/equipment/finger/ring-cabochon-curved-gold-green.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * ringOfJumping .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ringOfJumping[randomIndex].name,
      uuid: ringOfJumping[randomIndex].uuid,
      image: ringOfJumping[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [94, 94], item: () => {
    const ringofMindShielding = [
      { name: "Ring of Mind Shielding",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dGnkwePemh7ovuDv]{Ring of Mind Shielding}",
        image:  "icons/equipment/finger/ring-eye-gold-red.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * ringofMindShielding .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ringofMindShielding[randomIndex].name,
      uuid: ringofMindShielding[randomIndex].uuid,
      image: ringofMindShielding[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [95, 95], item: () => {
    const ringofWarmth = [
      { name: "Ring of Warmth",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2veAOEyfbDJuxR8Y]{Ring of Warmth}",
        image:  "icons/equipment/finger/ring-cabochon-gold-orange.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * ringofWarmth .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ringofWarmth[randomIndex].name,
      uuid: ringofWarmth[randomIndex].uuid,
      image: ringofWarmth[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [96, 96], item: () => {
    const ringofWaterWalking = [
      { name: "Ring of Water Walking",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LC5LsQOPwoHQW9Mi]{Ring of Water Walking}",
        image:  "icons/equipment/shield/heater-wooden-brown-notched.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * ringofWaterWalking .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ringofWaterWalking[randomIndex].name,
      uuid: ringofWaterWalking[randomIndex].uuid,
      image: ringofWaterWalking[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [97, 97], item: () => {
    const ehlonnaQuiver = [
      { name: "Quiver of Ehlonna",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LSKxwpjTEsOHdTc5]{Quiver of Ehlonna}",
        image:  "icons/containers/ammunition/arrows-quiver-purple-silver.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * ehlonnaQuiver .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: ehlonnaQuiver[randomIndex].name,
      uuid: ehlonnaQuiver[randomIndex].uuid,
      image: ehlonnaQuiver[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [98, 98], item: () => {
    const stoneofGoodLuckLuckstone = [
      { name: "Stone of Good Luck (Luckstone)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.296Zgo9RhltWShE1]{Stone of Good Luck (Luckstone)}",
        image:  "icons/commodities/gems/gem-faceted-octagon-yellow.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * stoneofGoodLuckLuckstone .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: stoneofGoodLuckLuckstone[randomIndex].name,
      uuid: stoneofGoodLuckLuckstone[randomIndex].uuid,
      image: stoneofGoodLuckLuckstone[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [99, 99], item: () => {
    const windFan = [
      { name: "Wind Fan",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mYFfH24uzuKh4IPS]{Wind Fan}",
        image:  "icons/commodities/treasure/trinket-wing-white.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * windFan .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: windFan[randomIndex].name,
      uuid: windFan[randomIndex].uuid,
      image: windFan[randomIndex].image
    }
  }; 
  }
  }, 
  { range: [100, 100], item: () => {
    const wingedBoots = [
      { name: "Winged Boots",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YjImJ3cVnArHH4ES]{Winged Boots}",
        image:  "icons/skills/movement/feet-winged-boots-brown.webp"}, 
];
  const randomIndex = Math.floor(Math.random() * wingedBoots .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: wingedBoots[randomIndex].name,
      uuid: wingedBoots[randomIndex].uuid,
      image: wingedBoots[randomIndex].image
    }
  }; 
  }
  }, 
  ];

  const magicItemTableG = [
    { range: [1, 11], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},
  { range: [12, 14], item: () => {
    const figurineTypes = [
      { name: "Figurine of Wondrous Power (Bronze Griffon)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CI58LNiwrTpmWYMp]{Figurine of Wondrous Power (Bronze Griffon)}", 
        image: "icons/commodities/bones/hurn-curved-yellow.webp",
      },
      { name: "Figurine of Wondrous Power (Ebony Fly)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.s2kQs21J3cFg7ZSs]{Figurine of Wondrous Power (Ebony Fly)}", 
        image: "icons/commodities/biological/legs-insect-brown.webp",
      },
      { name: "Figurine of Wondrous Power (Golden Lions)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Minr6xegwoHFvAjG]{Figurine of Wondrous Power (Golden Lions)}", 
        image: "icons/commodities/claws/claw-canine-brown-grey.webp",
      },
      { name: "Figurine of Wondrous Power (Ivory Goats)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kxOU9lx2sJ8vbM5s]{Figurine of Wondrous Power (Ivory Goats)}",
        image: "icons/creatures/mammals/goat-horned-blue.webp",
      },
      { name: "Figurine of Wondrous Power (Marble Elephant)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GP2bvHlxVi30OEmo]{Figurine of Wondrous Power (Marble Elephant)}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
        image: "icons/commodities/bones/horn-simple-grey.webp",
      }, 
      { name: "Figurine of Wondrous Power (Onyx Dog)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9nxSHbqlDdngtuuz]{Figurine of Wondrous Power (Onyx Dog)}", 
        image: "icons/sundries/misc/pet-collar-red.webp",
      },
      { name: "Figurine of Wondrous Power (Onyx Dog)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9nxSHbqlDdngtuuz]{Figurine of Wondrous Power (Onyx Dog)}", 
        image: "icons/sundries/misc/pet-collar-red.webp",
      },
      { name: "Figurine of Wondrous Power (Serpentine Owl)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XEH5YErAN1WSytln]{Figurine of Wondrous Power (Serpentine Owl)}",
        image: "icons/commodities/materials/feather-white.webp",
      },
    ];
  
  const randomIndex = Math.floor(Math.random() * figurineTypes .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: figurineTypes[randomIndex].name,
      uuid: figurineTypes[randomIndex].uuid,
      image: figurineTypes[randomIndex].image
    }
  }; 
  }
  },
    { range: [15, 15], item: () => {
      const adamantineBreastplateSolo = [
      { name: "Adamantine Breastplate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DevmObXWP9MfwE2c]{Adamantine Breastplate}",
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * adamantineBreastplateSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: adamantineBreastplateSolo[randomIndex].name,
        uuid: adamantineBreastplateSolo[randomIndex].uuid,
        image: adamantineBreastplateSolo[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [16, 16], item: () => {
      const adamantineSplintArmorSolo = [
      { name: "Adamantine Splint Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LDuqUcosOK8Bf76S]{Adamantine Splint Armor}",
        image: "icons/equipment/chest/breastplate-layered-steel.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * adamantineSplintArmorSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: adamantineSplintArmorSolo[randomIndex].name,
        uuid: adamantineSplintArmorSolo[randomIndex].uuid,
        image: adamantineSplintArmorSolo[randomIndex].image
      }
    }; 
    }
    },  
    { range: [17, 17], item: () => {
      const amuletofHealth = [
      { name: "Amulet of Health",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iiQxTvDOhPGW5spF]{Amulet of Health}",
        image: "icons/equipment/neck/pendant-faceted-red.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * amuletofHealth .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: amuletofHealth[randomIndex].name,
        uuid: amuletofHealth[randomIndex].uuid,
        image: amuletofHealth[randomIndex].image
      }
    }; 
    }
    },  
    { range: [18, 18], item: () => {
      const armorofVulnerability = [
      { name: "Armor of Vulnerability",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YwS4pESpfsiq0JZv]{Armor of Vulnerability}",
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * armorofVulnerability .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: armorofVulnerability[randomIndex].name,
        uuid: armorofVulnerability[randomIndex].uuid,
        image: armorofVulnerability[randomIndex].image
      }
    }; 
    }
    },  
    { range: [19, 19], item: () => {
      const arrowCatchingShield = [
      { name: "Arrow-Catching Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uWUD93jwuO2Jxkti]{Arrow-Catching Shield}",
        image: "icons/equipment/shield/buckler-boss-iron-wood-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * arrowCatchingShield .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: arrowCatchingShield[randomIndex].name,
        uuid: arrowCatchingShield[randomIndex].uuid,
        image: arrowCatchingShield[randomIndex].image
      }
    }; 
    }
    },  
    { range: [20, 20], item: () => {
      const beltofDwarvenkind = [
      { name: "Belt of Dwarvenkind",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.j2ZGEwx8MhHZXds4]{Belt of Dwarvenkind}",
        image: "icons/equipment/waist/belt-buckle-horned.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * beltofDwarvenkind .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: beltofDwarvenkind[randomIndex].name,
        uuid: beltofDwarvenkind[randomIndex].uuid,
        image: beltofDwarvenkind[randomIndex].image
      }
    }; 
    }
    },  
    { range: [21, 21], item: () => {
      const beltofHillGiantStrength = [
      { name: "Belt of Hill Giant Strength",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ER75WHewYN04Zp11]{Belt of Hill Giant Strength}",
        image: "icons/equipment/waist/belt-rope.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * beltofHillGiantStrength .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: beltofHillGiantStrength[randomIndex].name,
        uuid: beltofHillGiantStrength[randomIndex].uuid,
        image: beltofHillGiantStrength[randomIndex].image
      }
    }; 
    }
    },  
    { range: [22, 22], item: () => {
      const berserkerAxeTypes = [
      { name: "Berserker Battleaxe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dvNzJqb7vq6oJlA2]{Berserker Battleaxe}", 
        image: "icons/weapons/axes/axe-broad-jagged.webp",
      },   
      { name: "Berserker Greataxe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zSKorO6lwT7vs2uk]{Berserker Greataxe}", 
        image: "icons/weapons/axes/axe-broad-jagged.webp",
      }, 
      { name: "Berserker Handaxe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gwuffGC4JZ8BbStz]{Berserker Handaxe}",
        image: "icons/weapons/axes/axe-broad-jagged.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * berserkerAxeTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: berserkerAxeTypes[randomIndex].name,
        uuid: berserkerAxeTypes[randomIndex].uuid,
        image: berserkerAxeTypes[randomIndex].image
    }
    }; 
    }
    },
    { range: [23, 23], item: () => {
      const bootsofLevitation = [
      { name: "Boots of Levitation",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HLhFCDGfI8EK7uV9]{Boots of Levitation}",
        image: "icons/equipment/feet/shoes-collared-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * bootsofLevitation .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: bootsofLevitation[randomIndex].name,
        uuid: bootsofLevitation[randomIndex].uuid,
        image: bootsofLevitation[randomIndex].image
      }
    }; 
    }
    },  
    { range: [24, 24], item: () => {
      const bootsofSpeed = [
      { name: "Boots of Speed",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MCMSZrhcD40oMJ9v]{Boots of Speed}",
        image: "icons/equipment/feet/boots-collared-simple-leather.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * bootsofSpeed .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: bootsofSpeed[randomIndex].name,
        uuid: bootsofSpeed[randomIndex].uuid,
        image: bootsofSpeed[randomIndex].image
      }
    }; 
    }
    },  
    { range: [25, 25], item: () => {
      const bowlofCommandingWaterElementals = [
      { name: "Bowl of Commanding Water Elementals",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rRMaaGZ7qbzqMvoI]{Bowl of Commanding Water Elementals}",
        image: "icons/magic/water/pseudopod-swirl-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * bowlofCommandingWaterElementals .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: bowlofCommandingWaterElementals[randomIndex].name,
        uuid: bowlofCommandingWaterElementals[randomIndex].uuid,
        image: bowlofCommandingWaterElementals[randomIndex].image
      }
    }; 
    }
    },  
    { range: [26, 26], item: () => {
      const bracersofDefense = [
      { name: "Bracers of Defense",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DSHi7yT6OUyDoCcu]{Bracers of Defense}",
        image: "icons/equipment/wrist/bracer-segmented-leather.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * bracersofDefense .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: bracersofDefense[randomIndex].name,
        uuid: bracersofDefense[randomIndex].uuid,
        image: bracersofDefense[randomIndex].image
      }
    }; 
    }
    },  
    { range: [27, 27], item: () => {
      const brazierofCommandingFireElementals = [
      { name: "Brazier of Commanding Fire Elementals",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OcjcplcUWH07Kn9k]{Brazier of Commanding Fire Elementals}" ,
        image: "icons/magic/fire/blast-jet-stream-splash.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * brazierofCommandingFireElementals .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: brazierofCommandingFireElementals[randomIndex].name,
        uuid: brazierofCommandingFireElementals[randomIndex].uuid,
        image: brazierofCommandingFireElementals[randomIndex].image
      }
    }; 
    }
    },  
    { range: [28, 28], item: () => {
      const capeoftheMountebank = [
      { name: "Cape of the Mountebank",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gpHgWLsD8k2yzbfR]{Cape of the Mountebank}",
        image: "icons/equipment/back/cloak-heavy-black-red.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * capeoftheMountebank .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: capeoftheMountebank[randomIndex].name,
        uuid: capeoftheMountebank[randomIndex].uuid,
        image: capeoftheMountebank[randomIndex].image
      }
    }; 
    }
    },  
    { range: [29, 29], item: () => {
      const censerofControllingAirElementals = [
      { name: "Censer of Controlling Air Elementals",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sXEkkTDXWQDUMzsC]{Censer of Controlling Air Elementals}",
        image: "icons/commodities/treasure/lantern-stone-grey.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * censerofControllingAirElementals .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: censerofControllingAirElementals[randomIndex].name,
        uuid: censerofControllingAirElementals[randomIndex].uuid,
        image: censerofControllingAirElementals[randomIndex].image
      }
    }; 
    }
    },  
    { range: [30, 30], item: () => {
      const chainMailpOneSolo = [
      { name: "Chain Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * chainMailpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainMailpOneSolo[randomIndex].name,
        uuid: chainMailpOneSolo[randomIndex].uuid,
        image: chainMailpOneSolo[randomIndex].image
      }
    }; 
    }
    },  
    { range: [31, 31], item: () => {
      const chainMailresistanceTypes = [
      { name: "Chain Mail Armor of Resistance to Acid",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Acid",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Cold", 
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Cold",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      }, 
      { name: "Chain Mail Armor of Resistance to Fire",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Fire", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Force",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Force",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      }, 
      { name: "Chain Mail Armor of Resistance to Lightning",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Lightning",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Necrotic",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Necrotic", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Poison",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Poison", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Psychic",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Psychic", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Radiant",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Radiant", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
      { name: "Chain Mail Armor of Resistance to Thunder",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BQw5lyopqLmf8B6u]{Chain Mail Armor of Resistance} to Thunder",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
      },
    ];
    
    const randomIndex = Math.floor(Math.random() * chainMailresistanceTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainMailresistanceTypes[randomIndex].name,
        uuid: chainMailresistanceTypes[randomIndex].uuid,
        image: chainMailresistanceTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [32, 32], item: () => {
      const chainShirtpOneSolo = [
      { name: "Chain Shirt +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}",
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * chainShirtpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainShirtpOneSolo[randomIndex].name,
        uuid: chainShirtpOneSolo[randomIndex].uuid,
        image: chainShirtpOneSolo[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [33, 33], item: () => {
      const chainShirtResistanceTypes = [
        { name: "Chain Shirt of Resistance to Acid",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Acid", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Cold",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Cold", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Fire",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Fire", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp", 
        },
        { name: "Chain Shirt of Resistance to Force",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Force", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Lightning",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Lightning",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Necrotic",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Necrotic", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Poison",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Poison", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Psychic",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Psychic", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Radiant",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Radiant", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
        { name: "Chain Shirt of Resistance to Thunder",
          uuid: "UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Thunder",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    
    const randomIndex = Math.floor(Math.random() * chainShirtResistanceTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainShirtResistanceTypes[randomIndex].name,
        uuid: chainShirtResistanceTypes[randomIndex].uuid,
        image: chainShirtResistanceTypes[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [34, 34], item: () => {
      const cloakofDisplacement = [
      { name: "Cloak of Displacement",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LpD064ilKEeFzVI8]{Cloak of Displacement}" ,
        image: "icons/equipment/back/cloak-collared-blue-iron.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * cloakofDisplacement .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: cloakofDisplacement[randomIndex].name,
        uuid: cloakofDisplacement[randomIndex].uuid,
        image: cloakofDisplacement[randomIndex].image
      }
    }; 
    }
    },  
    { range: [35, 35], item: () => {
      const cloakoftheBat = [
      { name: "Cloak of the Bat",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Aq1rhgcgFnwu2T4I]{Cloak of the Bat}",
        image: "icons/equipment/back/cape-layered-tattered-brown-grey.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * cloakoftheBat .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: cloakoftheBat[randomIndex].name,
        uuid: cloakoftheBat[randomIndex].uuid,
        image: cloakoftheBat[randomIndex].image
      }
    }; 
    }
    },  
    { range: [36, 36], item: () => {
      const cubeofForce = [
      { name: "Cube of Force",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.s4fR8bxQGSt4wbH7]{Cube of Force}",
        image: "icons/sundries/gaming/dice-runed-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * cubeofForce .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: cubeofForce[randomIndex].name,
        uuid: cubeofForce[randomIndex].uuid,
        image: cubeofForce[randomIndex].image
      }
    }; 
    }
    },  
    { range: [37, 37], item: () => {
      const instantFortress = [
      { name: "Instant Fortress",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9stfX2i2I1YPo8vx]{Instant Fortress}",
        image: "icons/environment/settlement/watchtower-silhouette-yellow.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * instantFortress .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: instantFortress[randomIndex].name,
        uuid: instantFortress[randomIndex].uuid,
        image: instantFortress[randomIndex].image
      }
    }; 
    }
    },  
    { range: [38, 38], item: () => {
      const daggerofVenom = [
      { name: "Dagger of Venom",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7i4s9msZWpAw4Ynv]{Dagger of Venom}",
        image: "icons/skills/melee/strike-dagger-poison-dripping-green.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * daggerofVenom .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: daggerofVenom[randomIndex].name,
        uuid: daggerofVenom[randomIndex].uuid,
        image: daggerofVenom[randomIndex].image
      }
    }; 
    }
    },  
    { range: [39, 39], item: () => {
      const dimensionalShackles = [
      { name: "Dimensional Shackles",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wGKykLRS8UqChNXI]{Dimensional Shackles}",
        image: "icons/magic/unholy/orb-swirling-teal.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * dimensionalShackles .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: dimensionalShackles[randomIndex].name,
        uuid: dimensionalShackles[randomIndex].uuid,
        image: dimensionalShackles[randomIndex].image
      }
    }; 
    }
    },  
    { range: [40, 40], item: () => {
      const dragonSlayerSwordTypes = [
      { name: "Dragon Slayer Greatsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.orHjq3XDPz4eXcov]{Dragon Slayer Greatsword}",
        image: "icons/skills/melee/strike-dagger-white-orange.webp", 
      },
      { name: "Dragon Slayer Longsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SXjs8JghAPBv7d6j]{Dragon Slayer Longsword}",
        image: "icons/skills/melee/strike-dagger-white-orange.webp",
      }, 
      { name: "Dragon Slayer Rapier",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7TrIOlE600KIOUx]{Dragon Slayer Rapier}", 
        image: "icons/skills/melee/strike-dagger-white-orange.webp",
      },
      { name: "Dragon Slayer Scimitar",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.feKHv3JUWZdSNKf0]{Dragon Slayer Scimitar}", 
        image: "icons/skills/melee/strike-dagger-white-orange.webp",
      },
      { name: "Dragon Slayer Shortsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MFd96UkSs5g9QO78]{Dragon Slayer Shortsword}",
        image: "icons/skills/melee/strike-dagger-white-orange.webp",
      },
    ];
    
    const randomIndex = Math.floor(Math.random() * dragonSlayerSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: dragonSlayerSwordTypes[randomIndex].name,
        uuid: dragonSlayerSwordTypes[randomIndex].uuid,
        image: dragonSlayerSwordTypes[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [41, 41], item: () => {
      const elvenChain = [
      { name: "Elven Chain",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6067acDZGv7KNOkP]{Elven Chain}",
        image: "icons/equipment/chest/breastplate-collared-steel-green.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * elvenChain .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: elvenChain[randomIndex].name,
        uuid: elvenChain[randomIndex].uuid,
        image: elvenChain[randomIndex].image
      }
    }; 
    }
    },  
    { range: [42, 42], item: () => {
      const flameTongueSwordTypes = [
      { name: "Flame Tongue Greatsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WWb4vAmh18sMAxfY]{Flame Tongue Greatsword}", 
        image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
      },
      { name: "Flame Tongue Longsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ducaFdrqwLZ0l3c7]{Flame Tongue Longsword}", 
        image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
      },
      { name: "Flame Tongue Rapier",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CoUFHk5keIihsbYL]{Flame Tongue Rapier}", 
        image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
      },
      { name: "Flame Tongue Scimitar",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qVHCzgVvOZAtuk4N]{Flame Tongue Scimitar}", 
        image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
      },
      { name: "Flame Tongue Shortsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Z9FBwEoMi6daDGRj]{Flame Tongue Shortsword}",
        image: "icons/magic/fire/projectile-bolt-zigzag-orange.webp",
      },
    ];
    
    const randomIndex = Math.floor(Math.random() * flameTongueSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: flameTongueSwordTypes[randomIndex].name,
        uuid: flameTongueSwordTypes[randomIndex].uuid,
        image: flameTongueSwordTypes[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [43, 43], item: () => {
      const gemofSeeing = [
      { name: "Gem of Seeing",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jJU8vFhHLQeKe2wu]{Gem of Seeing}",
        image: "icons/commodities/gems/gem-rough-rose-teal.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * gemofSeeing .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: gemofSeeing[randomIndex].name,
        uuid: gemofSeeing[randomIndex].uuid,
        image: gemofSeeing[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [44, 44], item: () => {
      const giantslayerTypes = [
      { name: "Giant Slayer Handaxe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F3rQcaZvElNEiudk]{Giant Slayer Handaxe}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Battleaxe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YM6bZNmpync83VFa]{Giant Slayer Battleaxe}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Greataxe",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jmSC8I5awCoxNVv7]{Giant Slayer Greataxe}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Greatsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nBFr5xTWeChM7xrb]{Giant Slayer Greatsword}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Longsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xw2kL7Puwg4wfjW3]{Giant Slayer Longsword}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Rapier",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I5PWgE4IF40Iv9h4]{Giant Slayer Rapier}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Scimitar",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZLpj1bpnWlAFUEHE]{Giant Slayer Scimitar}", 
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
      { name: "Giant Slayer Shortsword",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tTqixDDmzAfs995G]{Giant Slayer Shortsword}",
        image: "icons/skills/melee/strike-stake-gray.webp",
      },
    ];
    const randomIndex = Math.floor(Math.random() * giantslayerTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: giantslayerTypes[randomIndex].name,
        uuid: giantslayerTypes[randomIndex].uuid,
        image: giantslayerTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [45, 45], item: () => {
      const glamouredStuddedLeather = [
      { name: "Glamoured Studded Leather",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SypSoinJkES0o5FB]{Glamoured Studded Leather}",
        image: "icons/equipment/chest/coat-collared-studded-red.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * glamouredStuddedLeather .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: glamouredStuddedLeather[randomIndex].name,
        uuid: glamouredStuddedLeather[randomIndex].uuid,
        image: glamouredStuddedLeather[randomIndex].image
      }
    }; 
    }
    },  
    { range: [46, 46], item: () => {
      const helmofTeleportation = [
      { name: "Helm of Teleportation",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DEQkJiQdGyfmSNkV]{Helm of Teleportation}",
        image: "icons/equipment/head/helm-goggles-leather.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * helmofTeleportation .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: helmofTeleportation[randomIndex].name,
        uuid: helmofTeleportation[randomIndex].uuid,
        image: helmofTeleportation[randomIndex].image
      }
    }; 
    }
    },  
    { range: [47, 47], item: () => {
      const hornofBlasting = [
      { name: "Horn of Blasting",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t7GfyRp3dB3lqS9i]{Horn of Blasting}",
        image: "icons/tools/instruments/horn-flared-wood.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * hornofBlasting .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: hornofBlasting[randomIndex].name,
        uuid: hornofBlasting[randomIndex].uuid,
        image: hornofBlasting[randomIndex].image
      }
    }; 
    }
    },  
    { range: [48, 48], item: () => {
      const valhallaSorBTypes = [
        { name: "Silver Horn of Valhalla",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lTfo6OVvAY2iJ4oq]{Silver Horn of Valhalla}", 
          image: "icons/tools/instruments/horn-red-grey.webp",
        },
        { name: "Brass Horn of Valhalla",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QYJyQCnIQeLiMrmJ]{Brass Horn of Valhalla}",
          image: "icons/tools/instruments/horn-red-brown.webp",
        },

    ];
    
    const randomIndex = Math.floor(Math.random() * valhallaSorBTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: valhallaSorBTypes[randomIndex].name,
        uuid: valhallaSorBTypes[randomIndex].uuid,
        image: valhallaSorBTypes[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [49, 49], item: () => {
      const iotbCanaithmandolin = [
      { name: "Instrument of the bards (Canaith mandolin)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vgRWMDsYXR2F2hcJ]{Instrument of the bards (Canaith mandolin)}",
        image: "icons/tools/instruments/lute-gold-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * iotbCanaithmandolin .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: iotbCanaithmandolin[randomIndex].name,
        uuid: iotbCanaithmandolin[randomIndex].uuid,
        image: iotbCanaithmandolin[randomIndex].image
      }
    }; 
    }
    },  
    { range: [50, 50], item: () => {
      const iotbClilyre = [
      { name: "Instrument of the bards (Cli lyre)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DBXIsVGRI6Yu4GTl]{Instrument of the bards (Cli lyre)}",
        image: "icons/tools/instruments/lute-gold-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * iotbClilyre .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: iotbClilyre[randomIndex].name,
        uuid: iotbClilyre[randomIndex].uuid,
        image: iotbClilyre[randomIndex].image
      }
    }; 
    }
    },  
    { range: [51, 51], item: () => {
      const isoAwareness = [
      { name: "Ioun Stone of Awareness",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.h8rS84jKsMHl9J1i]{Ioun Stone of Awareness}",
        image: "icons/commodities/gems/gem-rough-cushion-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * isoAwareness .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoAwareness[randomIndex].name,
        uuid: isoAwareness[randomIndex].uuid,
        image: isoAwareness[randomIndex].image
      }
    }; 
    }
    },  
    { range: [52, 52], item: () => {
      const isoProtection = [
      { name: "Ioun Stone of Protection",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.v4uNbmiz4ECTI89n]{Ioun Stone of Protection}" ,
        image: "icons/commodities/gems/gem-rough-ball-purple.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * isoProtection .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoProtection[randomIndex].name,
        uuid: isoProtection[randomIndex].uuid,
        image: isoProtection[randomIndex].image
      }
    }; 
    }
    },  
    { range: [53, 53], item: () => {
      const isoReserve = [
      { name: "Ioun Stone of Reserve",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jvKmgJYL33E8gev5]{Ioun Stone of Reserve}",
        image: "icons/commodities/gems/gem-rough-cushion-purple-pink.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * isoReserve .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoReserve[randomIndex].name,
        uuid: isoReserve[randomIndex].uuid,
        image: isoReserve[randomIndex].image
      }
    }; 
    }
    },  
    { range: [54, 54], item: () => {
      const isoSustenance = [
      { name: "Ioun Stone of Sustenance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6MDTnMG4Hcw7qZsy]{Ioun Stone of Sustenance}",
        image: "icons/commodities/stone/geode-raw-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * isoSustenance .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoSustenance[randomIndex].name,
        uuid: isoSustenance[randomIndex].uuid,
        image: isoSustenance[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [55, 55], item: () => {
      const ironBandsofBinding = [
      { name: "Iron Bands of Binding",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.E9G4jALlSA96fKAN]{Iron Bands of Binding}",
        image: "icons/commodities/metal/clasp-steel-braid.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ironBandsofBinding .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ironBandsofBinding[randomIndex].name,
        uuid: ironBandsofBinding[randomIndex].uuid,
        image: ironBandsofBinding[randomIndex].image
      }
    }; 
    }
    },  
    { range: [56, 56], item: () => {
      const leatherArmorpOneSolo = [
      { name: "Leather Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * leatherArmorpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: leatherArmorpOneSolo[randomIndex].name,
        uuid: leatherArmorpOneSolo[randomIndex].uuid,
        image: leatherArmorpOneSolo[randomIndex].image
      }
    }; 
    }
    },  
    { range: [57, 57], item: () => {
      const leatherArmorresistanceTypes = [
      { name:   "Leather Armor of Resistance to Acid",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Acid", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Cold",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Cold", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Fire",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Fire", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Force",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Force", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Lightning",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Lightning",
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Necrotic",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Necrotic", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Poison",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Poison", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Psychic",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Psychic", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Radiant",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Radiant", 
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
      { name:   "Leather Armor of Resistance to Thunder",
        uuid:   "@UUID[Compendium.dnd5e.items.dRtb9Tg34NKX9mGF]{Leather Armor of Resistance} to Thunder",
        image:  "icons/equipment/chest/breastplate-quilted-brown.webp",
      },
    ];
    
    const randomIndex = Math.floor(Math.random() * leatherArmorresistanceTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: leatherArmorresistanceTypes[randomIndex].name,
        uuid: leatherArmorresistanceTypes[randomIndex].uuid,
        image: leatherArmorresistanceTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [58, 58], item: () => {
      const maceofDisruption = [
      { name: "Mace of Disruption",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m7RubLd1lUcMjYgY]{Mace of Disruption}",
        image: "icons/weapons/maces/shortmace-ornate-gold.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * maceofDisruption .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: maceofDisruption[randomIndex].name,
        uuid: maceofDisruption[randomIndex].uuid,
        image: maceofDisruption[randomIndex].image
      }
    }; 
    }
    },  
    { range: [59, 59], item: () => {
      const maceofSmiting = [
      { name: "Mace of Smiting",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.w56FIjFafs2rN6iK]{Mace of Smiting}",
        image: "icons/weapons/maces/mace-cube-spiked-steel.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * maceofSmiting .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: maceofSmiting[randomIndex].name,
        uuid: maceofSmiting[randomIndex].uuid,
        image: maceofSmiting[randomIndex].image
      }
    }; 
    }
    },  
    { range: [60, 60], item: () => {
      const maceofTerror = [
      { name: "Mace of Terror",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b46t42bMruQf9v3O]{Mace of Terror}",
        image: "icons/weapons/maces/mace-spiked-skull.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * maceofTerror .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: maceofTerror[randomIndex].name,
        uuid: maceofTerror[randomIndex].uuid,
        image: maceofTerror[randomIndex].image
      }
    }; 
    }
    },  
    { range: [61, 61], item: () => {
      const mantleofSpellResistance = [
      { name: "Mantle of Spell Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oxzUb5j1TMsccGW4]{Mantle of Spell Resistance}",
        image: "icons/magic/unholy/silhouette-robe-evil-power.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * mantleofSpellResistance .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: mantleofSpellResistance[randomIndex].name,
        uuid: mantleofSpellResistance[randomIndex].uuid,
        image: mantleofSpellResistance[randomIndex].image
      }
    }; 
    }
    },  
    { range: [62, 62], item: () => {
      const necklaceofPrayerBeads = [
      { name: "Necklace of Prayer Beads",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wqVSRfkcTjuhvDyx]{Necklace of Prayer Beads}",
        image: "icons/equipment/neck/necklace-runed-white-red.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * necklaceofPrayerBeads .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: necklaceofPrayerBeads[randomIndex].name,
        uuid: necklaceofPrayerBeads[randomIndex].uuid,
        image: necklaceofPrayerBeads[randomIndex].image
      }
    }; 
    }
    },  
    { range: [63, 63], item: () => {
      const periaptofProofAgainstPoison = [
      { name: "Periapt of Proof against Poison",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oYZNXHth1UYxPwVi]{Periapt of Proof against Poison}",
        image: "icons/equipment/neck/amulet-round-brown.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * periaptofProofAgainstPoison .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: periaptofProofAgainstPoison[randomIndex].name,
        uuid: periaptofProofAgainstPoison[randomIndex].uuid,
        image: periaptofProofAgainstPoison[randomIndex].image
      }
    }; 
    }
    },  
    { range: [64, 64], item: () => {
      const ringofAnimalInfluence = [
      { name: "Ring of Animal Influence",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ElLfmohtIFMagr5f]{Ring of Animal Influence}" ,
        image: "icons/equipment/finger/ring-eye-silver-green.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofAnimalInfluence .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofAnimalInfluence[randomIndex].name,
        uuid: ringofAnimalInfluence[randomIndex].uuid,
        image: ringofAnimalInfluence[randomIndex].image
      }
    }; 
    }
    },  
    { range: [65, 65], item: () => {
      const ringofEvasion = [
      { name: "Ring of Evasion",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wxqnjpnPmkpPCC5]{Ring of Evasion}",
        image: "icons/equipment/finger/ring-faceted-engraved-gold-purple.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofEvasion .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofEvasion[randomIndex].name,
        uuid: ringofEvasion[randomIndex].uuid,
        image: ringofEvasion[randomIndex].image
      }
    }; 
    }
    },  
    { range: [66, 66], item: () => {
      const ringofFeatherFalling = [
      { name: "Ring of Feather Falling",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JyYwliYiWEw2g0yJ]{Ring of Feather Falling}",
        image: "icons/equipment/finger/ring-winged-gold-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofFeatherFalling .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofFeatherFalling[randomIndex].name,
        uuid: ringofFeatherFalling[randomIndex].uuid,
        image: ringofFeatherFalling[randomIndex].image
      }
    }; 
    }
    },  
    { range: [67, 67], item: () => {
      const ringofFreeAction = [
      { name: "Ring of Free Action",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i2puCDRaTxkuFfB4]{Ring of Free Action}",
        image: "icons/equipment/finger/ring-faceted-ornate-silver-red.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofFreeAction .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofFreeAction[randomIndex].name,
        uuid: ringofFreeAction[randomIndex].uuid,
        image: ringofFreeAction[randomIndex].image
      }
    }; 
    }
    },  
    { range: [68, 68], item: () => {
      const ringofSpellStoring = [
      { name: "Ring of Protection",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QtmVEreNIWEVOoLR]{Ring of Protection}",
        image: "icons/equipment/finger/ring-shield-silver.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofSpellStoring .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofSpellStoring[randomIndex].name,
        uuid: ringofSpellStoring[randomIndex].uuid,
        image: ringofSpellStoring[randomIndex].image
      }
    }; 
    }
    },  
    { range: [69, 69], item: () => {
      const ringResistanceTypes = [
      { name: "Ring of Acid Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WO8DLfz3G2QZ5njs]{Ring of Acid Resistance}", 
        image: "icons/equipment/finger/ring-band-engraved-scrolls-silver.webp" 
      },
      { name: "Ring of Cold Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fvezXwRJ5PqUf5NN]{Ring of Cold Resistance}",
        image: "icons/equipment/finger/ring-faceted-silver-orange.webp"
      }, 
      { name: "Ring of Fire Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3X7vdOjnCSpi40yn]{Ring of Fire Resistance}",
        image: "icons/equipment/finger/ring-band-thin-silver-teal.webp"
      },   
      { name: "Ring of Force Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ScxK8YNU5dWELhlQ]{Ring of Force Resistance}", 
        image: "icons/equipment/finger/ring-faceted-gold-purple.webp"
      },
      { name: "Ring of Lightning Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJ8CG4UvLELCmOi2]{Ring of Lightning Resistance}",
        image: "icons/equipment/finger/ring-band-notched-gold.webp"
      },
      { name: "Ring of Necrotic Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qMGkmzfLHfXd7DiJ]{Ring of Necrotic Resistance}", 
        image: "icons/equipment/finger/ring-signet-tech.webp"
      },
      { name: "Ring of Poison Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5SorTMl8NKDO9Yge]{Ring of Poison Resistance}",
        image: "icons/equipment/finger/ring-cabochon-notched-gold-green.webp"
      }, 
      { name: "Ring of Psychic Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Q7E6MgPzVkwBeZ6l]{Ring of Psychic Resistance}",
        image: "icons/equipment/finger/ring-cabochon-engraved-gold-teal.webp"
      }, 
      { name: "Ring of Radiant Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IrC5LPbWNxlAQoK7]{Ring of Radiant Resistance}", 
        image: "icons/equipment/finger/ring-band-studded.webp"
      },
      { name: "Ring of Thunder Resistance",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IpBBqr0r7JanyVn0]{Ring of Thunder Resistance}",
        image: "icons/equipment/finger/ring-faceted-grey.webp"
      },
    ];
    
    const randomIndex = Math.floor(Math.random() * ringResistanceTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringResistanceTypes[randomIndex].name,
        uuid: ringResistanceTypes[randomIndex].uuid,
        image: ringResistanceTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [70, 70], item: () => {
      const ringofSpellStoring = [
      { name: "Ring of Spell Storing",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9cIlRtKDtDXQtElf]{Ring of Spell Storing}",
        image: "icons/equipment/finger/ring-cabochon-silver-gold-red.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofSpellStoring .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofSpellStoring[randomIndex].name,
        uuid: ringofSpellStoring[randomIndex].uuid,
        image: ringofSpellStoring[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [71, 71], item: () => {
      const ringoftheRam = [
      {name: "Ring of the Ram",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qw05Om9XWqTMoio2]{Ring of the Ram}",
      image: "icons/equipment/finger/ring-bone-horned-spike.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringoftheRam .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringoftheRam[randomIndex].name,
        uuid: ringoftheRam[randomIndex].uuid,
        image: ringoftheRam[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [72, 72], item: () => {
      const ringofXrayVision = [
      {name: "Ring of X-ray Vision",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i3njMqHc689GvHDn]{Ring of X-ray Vision}",
      image: "icons/equipment/finger/ring-eye-silver-green.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ringofXrayVision .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofXrayVision[randomIndex].name,
        uuid: ringofXrayVision[randomIndex].uuid,
        image: ringofXrayVision[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [73, 73], item: () => {
      const robeofEyes = [
      {name: "Robe of Eyes",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.U74TPNQLJZbHJyCk]{Robe of Eyes}",
      image: "icons/magic/perception/eye-tendrils-web-purple.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * robeofEyes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: robeofEyes[randomIndex].name,
        uuid: robeofEyes[randomIndex].uuid,
        image: robeofEyes[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [74, 74], item: () => {
      const shieldptwo = [
      {name: "Rod of Rulership-",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vmbB2SK6pQU2Vkzb]{Rod of Rulership}",
      image: "icons/skills/melee/hand-grip-staff-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * shieldptwo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: shieldptwo[randomIndex].name,
        uuid: shieldptwo[randomIndex].uuid,
        image: shieldptwo[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [75, 75], item: () => {
      const rodOfThePactKeeperptwo = [
      {name: "Rod of the Pact Keeper, +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lq7H4Hswrw93m7Da]{Rod of the Pact Keeper, +2}",
      image: "icons/weapons/maces/mace-skull-ram.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * rodOfThePactKeeperptwo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfThePactKeeperptwo[randomIndex].name,
        uuid: rodOfThePactKeeperptwo[randomIndex].uuid,
        image: rodOfThePactKeeperptwo[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [76, 76], item: () => {
      const ropeOfEntanglement = [
      {name: "Rope of Entanglement",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.J8gQdJJi5e8LmD7H]{Rope of Entanglement}",
      image: "icons/commodities/cloth/yarn-skein-white-grey.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * ropeOfEntanglement .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ropeOfEntanglement[randomIndex].name,
        uuid: ropeOfEntanglement[randomIndex].uuid,
        image: ropeOfEntanglement[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [77, 77], item: () => {
      const scaleMailpOneSolo = [
      {name: "Scale Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}",
      image: "icons/commodities/tech/metal-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * scaleMailpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: scaleMailpOneSolo[randomIndex].name,
        uuid: scaleMailpOneSolo[randomIndex].uuid,
        image: scaleMailpOneSolo[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [78, 78], item: () => {
      const ScaleMailofresistanceTypes = [
        { name: "Scale Mail Armor of Resistance of Acid",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Acid", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp" 
        },
        { name: "Scale Mail Armor of Resistance of Cold",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Cold", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Fire",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Fire", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Force",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Force",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        }, 
        { name: "Scale Mail Armor of Resistance of Lightning",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Lightning",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Necrotic",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Necrotic", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Poison",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Poison", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Psychic",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Psychic", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Radiant",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Radiant", 
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
        { name: "Scale Mail Armor of Resistance of Thunder",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f0I81P9k29Q1lV4S]{Scale Mail Armor of Resistance} of Thunder",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
        },
    ];
    
    const randomIndex = Math.floor(Math.random() * ScaleMailofresistanceTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ScaleMailofresistanceTypes[randomIndex].name,
        uuid: ScaleMailofresistanceTypes[randomIndex].uuid,
        image: ScaleMailofresistanceTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [79, 79], item: () => {
      const shieldptwo = [
      {name: "Shield +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
      image: "icons/commodities/tech/metal-blue.webp",
    }, 
  ];
    const randomIndex = Math.floor(Math.random() * shieldptwo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: shieldptwo[randomIndex].name,
        uuid: shieldptwo[randomIndex].uuid,
        image: shieldptwo[randomIndex].image
      }
    }; 
    }
    },
    { range: [80, 80], item: () => {
      const shieldofMissileAttraction = [
      {
        name: "Shield of Missile Attraction",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M5APnDW8bKQb7fHI]{Shield of Missile Attraction}" ,
        image:"icons/skills/melee/shield-block-fire-orange.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * shieldofMissileAttraction .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: shieldofMissileAttraction[randomIndex].name,
        uuid: shieldofMissileAttraction[randomIndex].uuid,
        image: shieldofMissileAttraction[randomIndex].image
      }
    }; 
    }
    },
    { range: [81, 81], item: () => {
      const staffofCharming = [
      {
        name: "Staff of Charming",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FeouSUPUlUhfgeRp]{Staff of Charming}",
        image:"icons/weapons/staves/staff-simple-green.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * staffofCharming .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffofCharming[randomIndex].name,
        uuid: staffofCharming[randomIndex].uuid,
        image: staffofCharming[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [82, 82], item: () => {
      const staffofHealing = [
      {
        name: "Staff of Healing",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WLVQJVpCWiPkCAtZ]{Staff of Healing}",
        image:"icons/weapons/staves/staff-simple-green.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * staffofHealing .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffofHealing[randomIndex].name,
        uuid: staffofHealing[randomIndex].uuid,
        image: staffofHealing[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [83, 83], item: () => {
      const staffofSwarmingInsects = [
      {
        name: "Staff of Swarming Insects",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bod1dKzbAkAm21Ho]{Staff of Swarming Insects}",
        image:"icons/weapons/staves/staff-simple-spiral-green.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * staffofSwarmingInsects .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffofSwarmingInsects[randomIndex].name,
        uuid: staffofSwarmingInsects[randomIndex].uuid,
        image: staffofSwarmingInsects[randomIndex].image
      }
    }; 
    }
    },
    { range: [84, 84], item: () => {
      const staffoftheWoodlands = [
      {
        name: "Staff of the Woodlands",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.caEn3ixCUFBnHTx6]{Staff of the Woodlands}",
        image:"icons/weapons/staves/staff-simple-spiral-green.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * staffoftheWoodlands .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffoftheWoodlands[randomIndex].name,
        uuid: staffoftheWoodlands[randomIndex].uuid,
        image: staffoftheWoodlands[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [85, 85], item: () => {
      const staffofWithering = [
      {
        name: "Staff of Withering",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uHL99JKLUpTKAbz8]{Staff of Withering}",
        image:"icons/equipment/neck/pendant-faceted-green.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * staffofWithering .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffofWithering[randomIndex].name,
        uuid: staffofWithering[randomIndex].uuid,
        image: staffofWithering[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [86, 86], item: () => {
      const stoneofControllingEarthElementals = [
      {
        name: "Stone of Controlling Earth Elementals",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TWFS1BtruQeE10BY]{Stone of Controlling Earth Elementals}",
        image:"icons/commodities/treasure/token-runed-os-grey.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * stoneofControllingEarthElementals .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: stoneofControllingEarthElementals[randomIndex].name,
        uuid: stoneofControllingEarthElementals[randomIndex].uuid,
        image: stoneofControllingEarthElementals[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [87, 87], item: () => {
      const sunBlade = [
      {
        name: "Sun Blade",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yiYCqmD5n08NftYk]{Sun Blade}",
        image:"icons/magic/light/beam-horizon-strike-yellow.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * sunBlade .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: sunBlade[randomIndex].name,
        uuid: sunBlade[randomIndex].uuid,
        image: sunBlade[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [88, 88], item: () => {
      const lifeStealSwordTypes = [
        {
          name: "Greatsword of Life Stealing",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sdHSbitJxgTX6aDG]{Greatsword of Life Stealing}", 
          image: "icons/creatures/claws/claw-curved-poison-purple.webp"
        },
        {
          name: "Longsword of Life Stealing",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wtctR6tCcYbQPiS0]{Longsword of Life Stealing}", 
          image: "icons/creatures/claws/claw-curved-poison-purple.webp"
        },
        {
          name: "Rapier of Life Stealing",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p01JzD9RpIOkJiqK]{Rapier of Life Stealing}", 
          image: "icons/creatures/claws/claw-curved-poison-purple.webp"
        },
        {
          name: "Scimitar of Life Stealing",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sfegfmo59MHJg2YC]{Scimitar of Life Stealing}", 
          image: "icons/creatures/claws/claw-curved-poison-purple.webp"
        },
        {
          name: "Shortsword of Life Stealing",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.902yxeFDwavpm6cv]{Shortsword of Life Stealing}",
          image: "icons/creatures/claws/claw-curved-poison-purple.webp"
        },
        ];
        const randomIndex = Math.floor(Math.random() * lifeStealSwordTypes .length);
        return { 
          roll: randomIndex + 1,
          item: {
            name: lifeStealSwordTypes[randomIndex].name,
            uuid: lifeStealSwordTypes[randomIndex].uuid,
            image: lifeStealSwordTypes[randomIndex].image
          }
        }; 
        }
        },
    { range: [89, 89], item: () => { 
      const woundingSwordTypes = [
        {
          name: "Greatsword of Wounding",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JpwuGtFkfrGibQpP]{Greatsword of Wounding}", 
          image: "icons/skills/melee/blood-slash-foam-red.webp"
        },
        {
          name: "Longsword of Wounding",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.pG6dddIcb9NmPrdt]{Longsword of Wounding}", 
          image: "icons/skills/melee/blood-slash-foam-red.webp"
        },
        {
          name: "Rapier of Wounding",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KJYqNZgdkRwPmPMl]{Rapier of Wounding}", 
          image: "icons/skills/melee/blood-slash-foam-red.webp"
        },
        {
          name: "Scimitar of Wounding",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L4PxYPtYca283sju]{Scimitar of Wounding}", 
          image: "icons/skills/melee/blood-slash-foam-red.webp"
        },
        {
          name: "Shortsword of Wounding",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.902yxeFDwavpm6cv]{Shortsword of Life Stealing}",
          image: "icons/skills/melee/blood-slash-foam-red.webp"
        },
        ];
        const randomIndex = Math.floor(Math.random() * woundingSwordTypes .length);
        return { 
          roll: randomIndex + 1,
          item: {
            name: woundingSwordTypes[randomIndex].name,
            uuid: woundingSwordTypes[randomIndex].uuid,
            image: woundingSwordTypes[randomIndex].image
          }
        }; 
        }
        },
    { range: [90, 90], item: () => {
      const tentacleRod = [
      {
        name: "Tentacle Rod",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BBN3Zp6pVGYyrGdK]{Tentacle Rod}",
        image:"icons/magic/control/debuff-energy-snare-purple-pink.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * tentacleRod .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: tentacleRod[randomIndex].name,
        uuid: tentacleRod[randomIndex].uuid,
        image: tentacleRod[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [91, 91], item: () => {
      const viciousWeaponTypes = [
        { name: "Vicious Club",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UctSPehpKb4lJQGr]{Vicious Club}", 
          image: "icons/weapons/clubs/club-simple-barbed-purple.webp"
        },
        { name: "Vicious Dagger",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5Jz5w7XJxgtlsx6K]{Vicious Dagger}",
          image: "icons/weapons/daggers/dagger-simple-stone-guard.webp"
        }, 
        { name: "Vicious Greatclub",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p9dtQU9wEZGumHSb]{Vicious Greatclub}", 
          image: "icons/weapons/maces/mace-flanged-steel-grey.webp"
        },
        { name: "Vicious Handaxe",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QM3gdsL0eaAus7XT]{Vicious Handaxe}", 
          image: "icons/weapons/axes/axe-battle-engraved-purple.webp"
        },
        { name: "Vicious Javelin",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lM5uo6R4gy8rJG5Y]{Vicious Javelin}", 
          image: "icons/skills/ranged/arrow-flying-gray-brown.webp"
        },
        { name: "Vicious Light Hammer",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4MeSq8KcF7KK7emF]{Vicious Light Hammer}", 
          image: "icons/weapons/hammers/shorthammer-double-steel-embossed.webp"
        },
        { name: "Vicious Mace",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gSwpQacBLOJeLWrK]{Vicious Mace}", 
          image: "icons/weapons/maces/shortmace-round-spiked-wood.webp"
        },
        { name: "Vicious Quarterstaff",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Z7xno2zMzRtqqUIQ]{Vicious Quarterstaff}",
          image: "icons/weapons/staves/staff-hooked-banded.webp"
        },
        { name: "Vicious Sickle",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AChuumAYmts5uGFT]{Vicious Sickle}", 
          image: "icons/weapons/sickles/sickle-simple-bone.webp"
        },
        { name: "Vicious Spear",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.e7JpVX2549vp9mgF]{Vicious Spear}", 
          image: "icons/weapons/spears/spear-simple-bone.webp"
        },
        { name: "Vicious Yklwa",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.InDCRMm2ElGl8lZU]{Vicious Yklwa}", 
          image: "icons/weapons/polearms/spear-flared-gold.webp"
        },
        { name: "Vicious Boomerang",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PrdSMKcE1xUXpRhK]{Vicious Boomerang}", 
          image: "icons/skills/targeting/crosshair-scope-sniper-green.webp"
        },
        { name: "Vicious Light Crossbow",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VQAUcjn1qdwW3MeU]{Vicious Light Crossbow}", 
          image: "icons/weapons/crossbows/crossbow-slotted.webp"
        },
        { name: "Vicious Dart",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jeoZmDD9fuQdvC77]{Vicious Dart}", 
          image: "icons/skills/ranged/dart-thrown-poison-green.webp"
        },
        { name: "Vicious Shortbow",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Z0eO3TTpYA2hjwdd]{Vicious Shortbow}", 
          image: "icons/weapons/bows/shortbow-recurve-red.webp"
        },
        { name: "Vicious Sling",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qGRN4wvZLJ8uITf2]{Vicious Sling}",
          image: "icons/skills/wounds/injury-face-impact-orange.webp"
        },
        { name: "Vicious Battleaxe",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dG7iFak1YH1nXRpC]{Vicious Battleaxe}", 
          image: "icons/weapons/axes/axe-double-engraved-black.webp"
        },
        { name: "Vicious Flail",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qmuOeNsOKwkn6K8W]{Vicious Flail}", 
          image: "icons/weapons/maces/flail-spiked-grey.webp"
        },
        { name: "Vicious Glaive",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eKip69fExSYN661B]{Vicious Glaive}", 
          image: "icons/weapons/polearms/glaive-hooked-steel.webp"
        },
        { name: "Vicious Greataxe",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nY6CnKEHyJ5STgt5]{Vicious Greataxe}", 
          image: "icons/weapons/axes/axe-double-jagged-black.webp"
        },
        { name: "Vicious Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FpLaviCom3XR1ckP]{Vicious Greatsword}", 
          image: "icons/weapons/swords/sword-guard-flanged-purple.webp"
        },
        { name: "Vicious Halberd",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.isKR904LkLaH4i6M]{Vicious Halberd}", 
          image: "icons/weapons/polearms/halberd-crescent-steel.webp"
        },
        { name: "Vicious Lance",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r8yK6SrWOz4hqF01]{Vicious Lance}",
          image: "icons/weapons/polearms/spear-ice-crystal-blue.webp"
        }, 
        { name: "Vicious Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.10ZP2Bu3vnCuYMIB]{Viscious Longsword}",
          image: "icons/weapons/swords/greatsword-crossguard-flanged-red.webp"
        },
        { name: "Vicious Maul",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6JbrdSg5YYbs9ANm]{Vicious Maul}", 
          image: "icons/weapons/maces/mace-spiked-banded-wood.webp"
        },
        { name: "Vicious Morningstar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Vm6SuX6TkDvSIVGr]{Vicious Morningstar}",
          image: "icons/weapons/maces/mace-round-spiked-grey.webp"
        }, 
        { name: "Vicious Pike",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zibIgdxPz8QHSCg6]{Vicious Pike}", 
          image: "icons/weapons/polearms/spear-flared-blue.webp"
        },
        { name: "Vicious Rapier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.h0XLhuUQ0vSnW3DU]{Vicious Rapier}", 
          image: "icons/skills/melee/strike-sword-gray.webp"
        },
        { name: "Vicious Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FHUDEygUW7EWCDgA]{Vicious Scimitar}", 
          image: "icons/weapons/swords/sword-hooked-worn.webp"
        },
        { name: "Vicious Shortsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1PMaZR6CX8fUnOZd]{Vicious Shortsword}", 
          image: "icons/weapons/swords/greatsword-guard-gold-worn.webp"
        },
        { name: "Vicious Trident",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TMqS62qjBCveT1Ss]{Vicious Trident}",
          image: "icons/weapons/polearms/trident-curved-steel.webp"
        }, 
        { name: "Vicious War Pick",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.g8DG0jXlvfP3uTtZ]{Vicious War Pick}",
          image: "icons/weapons/axes/pickaxe-iron-green.webp"
        },
        { name: "Vicious Warhammer",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HnJqfKkYXIWo2sp9]{Vicious Warhammer}", 
          image: "icons/weapons/hammers/hammer-war-spiked.webp"
        },
        { name: "Vicious Whip",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.luTJgPXN5n0EN7iy]{Vicious Whip}", 
          image: "icons/skills/melee/strike-chain-whip-blue.webp"
        },
        { name: "Vicious Blowgun",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ozYrQ5N4s81h35Fa]{Vicious Blowgun}", 
          image: "icons/weapons/staves/staff-simple-brown.webp"
        },
        { name: "Vicious Hand Crossbow",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.K7h4LT03SNt2807z]{Vicious Hand Crossbow}", 
          image: "icons/weapons/crossbows/crossbow-ornamental-black.webp"
        },
        { name: "Vicious Heavy Crossbow",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fk78kNmp3OLX5EMC]{Vicious Heavy Crossbow}", 
          image: "icons/weapons/crossbows/crossbow-golden-bolt.webp"
        },
        { name: "Vicious Longbow",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gVo3UbvwjFIiFR0c]{Vicious Longbow}", 
          image: "icons/weapons/bows/bow-ornamental-silver-black.webp"
        },
        { name: "Vicious Net",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fwYZ5gvBlE212oH9]{Vicious Net}",
          image: "icons/tools/fishing/net-gold.webp"
        },

          ];
          
    const randomIndex = Math.floor(Math.random() * viciousWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: viciousWeaponTypes[randomIndex].name,
        uuid: viciousWeaponTypes[randomIndex].uuid,
        image: viciousWeaponTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [92, 92], item: () => {
      const wandOfBinding = [
      {
        name: "Wand of Binding",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7jEKkA9qbwJ3IuCb]{Wand of Binding}",
        image:"icons/weapons/staves/staff-ornate-orb-steel-red.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandOfBinding .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandOfBinding[randomIndex].name,
        uuid: wandOfBinding[randomIndex].uuid,
        image: wandOfBinding[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [93, 93], item: () => {
      const wandofEnemyDetection = [
      {
        name: "Wand of Enemy Detection",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5Rxo4K9cgpwgW9vZ]{Wand of Enemy Detection}",
        image:"icons/weapons/staves/staff-blue-jewel.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandofEnemyDetection .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandofEnemyDetection[randomIndex].name,
        uuid: wandofEnemyDetection[randomIndex].uuid,
        image: wandofEnemyDetection[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [94, 94], item: () => {
      const wandOfFear = [
      {
        name: "Wand of Fear",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EJFql4aNWHHJSxT9]{Wand of Fear}",
        image:"icons/weapons/staves/staff-ornate-bird.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandOfFear .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandOfFear[randomIndex].name,
        uuid: wandOfFear[randomIndex].uuid,
        image: wandOfFear[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [95, 95], item: () => {
      const wandOfFireballs = [
      {
        name: "Wand of Fireballs",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DoSvjhRARhRqWZXg]{Wand of Fireballs}",
        image:"icons/weapons/staves/staff-ornate-red.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandOfFireballs .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandOfFireballs[randomIndex].name,
        uuid: wandOfFireballs[randomIndex].uuid,
        image: wandOfFireballs[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [96, 96], item: () => {
      const wandofLightningBolts = [
      {
        name: "Wand of Lightning Bolts",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bPFVfq81EsMNu6OQ]{Wand of Lightning Bolts}",
        image:"icons/weapons/staves/staff-ornate-jeweled-blue.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandofLightningBolts .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandofLightningBolts[randomIndex].name,
        uuid: wandofLightningBolts[randomIndex].uuid,
        image: wandofLightningBolts[randomIndex].image
      }
    }; 
    }
    },
    { range: [97, 97], item: () => {
      const wandofParalysis = [
      {
        name: "Wand of Paralysis",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GcpXNc4dKUNw0Tk6]{Wand of Paralysis}",
        image:"icons/weapons/staves/staff-simple-knotted.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandofParalysis .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandofParalysis[randomIndex].name,
        uuid: wandofParalysis[randomIndex].uuid,
        image: wandofParalysis[randomIndex].image
      }
    }; 
    }
    },
    { range: [98, 98], item: () => {
      const wandOfTheWarMagepTwo = [
      {
        name: "Wand of the War Mage +2",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k3T7tpcdzDyVKlF4]{Wand of the War Mage +2}",
        image:"icons/weapons/staves/staff-engraved-red.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandOfTheWarMagepTwo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandOfTheWarMagepTwo[randomIndex].name,
        uuid: wandOfTheWarMagepTwo[randomIndex].uuid,
        image: wandOfTheWarMagepTwo[randomIndex].image
      }
    }; 
    }
    }, 
    { range: [99, 99], item: () => {
      const wandofWonder = [
      {
        name: "Wand of Wonder",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lPsueMv4ZoXqCYf9]{Wand of Wonder}",
        image:"icons/weapons/staves/staff-ornate-wood-red.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * wandofWonder .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandofWonder[randomIndex].name,
        uuid: wandofWonder[randomIndex].uuid,
        image: wandofWonder[randomIndex].image
      }
    }; 
    }
    },
    { range: [100, 100], item: () => {
      const amuletOfThePlanes = [
      {
        name: "Amulet of the Planes",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FkDyLSpiynKTQZdi]{Wings of Flying}",
        image:"icons/equipment/back/cloak-collared-blue-iron.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * amuletOfThePlanes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: amuletOfThePlanes[randomIndex].name,
        uuid: amuletOfThePlanes[randomIndex].uuid,
        image: amuletOfThePlanes[randomIndex].image
      }
    }; 
    }
    },
  ]

  const magicItemTableH = [
    { range: [1, 10], item: () => {
const pThreeWeaponTypes = [
  {
    name: "Club +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HdC66U61pDOknaux]{Club +3}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bWI5i4RbyGKT6Eiq]{Dagger +3}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mkyltDYnuzNU3kmF]{Greatclub +3}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cmnBssaWWzWWm70C]{Handaxe +3}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FhtjbeBeP4q5vTyc]{Javelin +3}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y08Al2dMN8he1hFK]{Light Hammer +3}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2CQnAvn06bncXPBt]{Mace +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BmWnprrj0QWQ1BL3]{Quarterstaff +3}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AHn15T1TOuDFS0GH]{Sickle +3}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.62EaozKvcA0aSy2q]{Spear +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p5gg8Rs2nHOBJmny]{Yklwa +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KMss63oWVZm0tPVp]{Boomerang +3}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.amRx3jOYlPeXEiAN]{Light Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.izF3kmyFEVI5TWhp]{Dart +3}",
    image: "icons/weapons/thrown/dagger-ringed-steel.webp",
  },
  {
    name: "Shortbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.egJhGFU3v5OfjPNS]{Shortbow +3}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3WqP3r2emnumyUF]{Sling +3}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kNlvoSTcdMqxJPmI]{Battleaxe +3}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wgBKZNeRN1XsE9I7]{Flail +3}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rc9nkN6YOD7ogtEi]{Glaive +3}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAa2EG5kzmqxcp46]{Greataxe +3}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RfEZvwcLwe6Ih0LQ]{Greatsword +3}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EU78dSbnr91QWZ7g]{Halberd +3}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r97KnMO7Zxgfdh3P]{Lance +3}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H6SIiRIig7OMM2Z0]{Longsword +3}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P8f9o36qxagW2uRW]{Maul +3}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dghpiMWDSUXtQf6X]{Morningstar +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YH1o1Wa4gcdN3fh]{Pike +3}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YevPP0DZXgAcLmzv]{Rapier +3}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wK9ImkAeG3Lzxa0]{Scimitar +3}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uIHXYhnOwETlA5lT]{Shortsword +3}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9fFB1uaGJvcXTf7]{Trident +3}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nrvAo3TznyQrHS1t]{War Pick +3}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.setcTdSZ09rmsqMn]{Warhammer +3}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jcQqI0pxLD2nNNQ4]{Whip +3}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HQJ8tiyyrJJSUSyF]{Blowgun +3}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oG4rvCuMstgl4Nez]{Hand Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sj4zEvuGcSV6anKm]{Heavy Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8W6ULfSqzuHh6Peg]{Longbow +3}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iIuNqnpWCHrLEKWj]{Net +3}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },
  
    ];
      const randomIndex = Math.floor(Math.random() * pThreeWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pThreeWeaponTypes[randomIndex].name,
        uuid: pThreeWeaponTypes[randomIndex].uuid,
        image: pThreeWeaponTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [11, 12], item: () => {
      const amuletOfThePlanes = [
      {
        name: "Amulet of the Planes",
        uuid:"@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8ABk0XV76Hzq8Qul]{Amulet of the Planes}" ,
        image:"icons/equipment/neck/pendant-faceted-green.webp",
      }, 
    ];
    const randomIndex = Math.floor(Math.random() * amuletOfThePlanes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: amuletOfThePlanes[randomIndex].name,
        uuid: amuletOfThePlanes[randomIndex].uuid,
        image: amuletOfThePlanes[randomIndex].image
      }
    }; 
    }
    },
    { range: [13, 14], item: () => {
      const flyingCarpetTypes = [
        { name: "Carpet of Flying (3x5)",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XwqNHyox5OQQio8q]{Carpet of Flying (3x5)}", 
          image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
        },
        { name: "Carpet of Flying (4x6)",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DeK9uQvNJj3JzFwe]{Carpet of Flying (4x6)}",
          image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
        },
        { name: "Carpet of Flying (5x7)",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XAr1SR4POx5BAArk]{Carpet of Flying (5x7)}",
          image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
        },
        { name: "Carpet of Flying (6x9)",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TjWk2mpNXjDdfIDM]{Carpet of Flying (6x9)}",
          image: "icons/commodities/cloth/cloth-bolt-embroidered-pink.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * flyingCarpetTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: flyingCarpetTypes[randomIndex].name,
        uuid: flyingCarpetTypes[randomIndex].uuid,
        image: flyingCarpetTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [15, 16], item: () => {
      const veryRareCrystalBall = [
        { name: "Crystal Ball",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ItoGjtOtDOQ2noNM]{Crystal Ball}", 
          image: "icons/commodities/gems/pearl-natural.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * veryRareCrystalBall .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: veryRareCrystalBall[randomIndex].name,
        uuid: veryRareCrystalBall[randomIndex].uuid,
        image: veryRareCrystalBall[randomIndex].image
      }
    }; 
    }
  },
    { range: [17, 18], item: () => {
      const ringOfRegeneration = [
        { name: "Ring of Regeneration",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AweD4kpKGM7Ilu3n]{Ring of Regeneration}", 
          image: "icons/equipment/finger/ring-cabochon-silver-gold-green.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringOfRegeneration .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringOfRegeneration[randomIndex].name,
        uuid: ringOfRegeneration[randomIndex].uuid,
        image: ringOfRegeneration[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [19, 20], item: () => {
      const ringOfShootingStars = [
        { name: "Ring of Shooting Stars",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.etA2SBgWwduCLgLT]{Ring of Shooting Stars}", 
          image: "icons/equipment/finger/ring-cabochon-silver-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringOfShootingStars .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringOfShootingStars[randomIndex].name,
        uuid: ringOfShootingStars[randomIndex].uuid,
        image: ringOfShootingStars[randomIndex].image
      }
    }; 
    }
  },  
    { range: [21, 22], item: () => {
      const ringOfTelekinesis = [
        { name: "Ring of Telekinesis",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hxfOtvFrY1PXHQN1]{Ring of Telekinesis}", 
          image: "icons/equipment/finger/ring-cabochon-spiral-gold-green.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringOfTelekinesis .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringOfTelekinesis[randomIndex].name,
        uuid: ringOfTelekinesis[randomIndex].uuid,
        image: ringOfTelekinesis[randomIndex].image
      }
    }; 
    }
  },
    { range: [23, 24], item: () => {
      const robeOfScintillatingColors = [
        { name: "Robe of Scintillating Colors",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JRJpKZyamkpa7awv]{Robe of Scintillating Colors}", 
          image: "icons/equipment/chest/robe-layered-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * robeOfScintillatingColors .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: robeOfScintillatingColors[randomIndex].name,
        uuid: robeOfScintillatingColors[randomIndex].uuid,
        image: robeOfScintillatingColors[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [25, 26], item: () => {
      const robeOfStars = [
        { name: "Robe of Stars",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.66UkbfH0PVwo4HgA]{Robe of Stars}", 
          image: "icons/equipment/chest/robe-collared-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * robeOfStars .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: robeOfStars[randomIndex].name,
        uuid: robeOfStars[randomIndex].uuid,
        image: robeOfStars[randomIndex].image
      }
    }; 
    }
  },
    { range: [27, 28], item: () => {
      const rodOfAbsorption = [
        { name: "Rod of Absorption",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6pjaQzbtxQTuQ4RW]{Rod of Absorption}", 
          image: "icons/magic/fire/barrier-wall-explosion-orange.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * rodOfAbsorption .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfAbsorption[randomIndex].name,
        uuid: rodOfAbsorption[randomIndex].uuid,
        image: rodOfAbsorption[randomIndex].image
      }
    }; 
    }
  },  
    { range: [29, 30], item: () => {
      const rodOfAlertness = [
        { name: "Rod of Alertness",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Do3qeSHtBjUsmfvz]{Rod of Alertness}", 
          image: "icons/magic/fire/barrier-wall-explosion-orange.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * rodOfAlertness .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfAlertness[randomIndex].name,
        uuid: rodOfAlertness[randomIndex].uuid,
        image: rodOfAlertness[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [31, 32], item: () => {
      const rodOfSecurity = [
        { name: "Rod of Security",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9kfMsSweOBui0SC4]{Rod of Security}",
          image: "icons/magic/nature/plant-seed-hands-glow-yellow.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * rodOfSecurity .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfSecurity[randomIndex].name,
        uuid: rodOfSecurity[randomIndex].uuid,
        image: rodOfSecurity[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [33, 34], item: () => {
      const rodOfThePactKeeperpthree = [
        { name: "Rod of the Pact Keeper, +3",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hJJzZC5bSxOwEpMc]{Rod of the Pact Keeper, +3}",
          image: "icons/weapons/maces/mace-skull-ram.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * rodOfThePactKeeperpthree .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfThePactKeeperpthree[randomIndex].name,
        uuid: rodOfThePactKeeperpthree[randomIndex].uuid,
        image: rodOfThePactKeeperpthree[randomIndex].image
      }
    }; 
    }
  },
    { range: [35, 36], item: () => {
      const scimitarOfSpeed = [
        { name: "Scimitar of Speed",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7wY0389wscheFkIa]{Scimitar of Speed}",
          image: "icons/skills/melee/strikes-sword-scimitar.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * scimitarOfSpeed .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: scimitarOfSpeed[randomIndex].name,
        uuid: scimitarOfSpeed[randomIndex].uuid,
        image: scimitarOfSpeed[randomIndex].image
      }
    }; 
    }
  },
    { range: [37, 38], item: () => {
      const shieldpThree = [ 
        {name: "Shield +3",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WfqBg3yBNoJQtVEB]{Shield +3}",
        image: "icons/equipment/shield/heater-embossed-gold.webp",
      },
    ];
    const randomIndex = Math.floor(Math.random() * shieldpThree .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: shieldpThree[randomIndex].name,
        uuid: shieldpThree[randomIndex].uuid,
        image: shieldpThree[randomIndex].image
      }
    }; 
    }
  },
    { range: [39, 40], item: () => {
      const staffOfFire = [
        { name: "Staff of Fire",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lsiR1hVfISlC5YoB]{Staff of Fire}",
          image: "icons/weapons/staves/staff-engraved-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * staffOfFire .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffOfFire[randomIndex].name,
        uuid: staffOfFire[randomIndex].uuid,
        image: staffOfFire[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [41, 42], item: () => {
      const staffOfFrost = [
        { name: "Staff of Frost",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xEtBeZjJnkDXojQM]{Staff of Frost}",
          image: "icons/weapons/staves/staff-ornate-engraved-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * staffOfFrost .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffOfFrost[randomIndex].name,
        uuid: staffOfFrost[randomIndex].uuid,
        image: staffOfFrost[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [43, 44], item: () => {
      const staffOfPower = [
        { name: "Staff of Power",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eM5gEe4SEOvA2Y9t]{Staff of Power}",
          image: "icons/weapons/staves/staff-orb-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * staffOfPower .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffOfPower[randomIndex].name,
        uuid: staffOfPower[randomIndex].uuid,
        image: staffOfPower[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [45, 46], item: () => {
      const staffOfStriking = [
        { name: "Staff of Striking",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.URun3vYrXKJJdAJe]{Staff of Striking}",
          image: "icons/weapons/staves/staff-hooked-banded.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * staffOfStriking .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffOfStriking[randomIndex].name,
        uuid: staffOfStriking[randomIndex].uuid,
        image: staffOfStriking[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [47, 48], item: () => {
      const staffOfThunderAndLightning = [
        { name: "Staff of Thunder and Lightning",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F6v3Q7dz1SlpLTMf]{Staff of Thunder and Lightning}",
          image: "icons/weapons/staves/staff-ornate-teal.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * staffOfThunderAndLightning .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffOfThunderAndLightning[randomIndex].name,
        uuid: staffOfThunderAndLightning[randomIndex].uuid,
        image: staffOfThunderAndLightning[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [49, 50], item: () => {
      const sharpSwordTypes = [
        {
          name: "Greatsword of Sharpness",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QB4CFMTLR6JlD7Kq]{Greatsword of Sharpness}",
          image: "icons/skills/wounds/bone-broken-knee-beam.webp"
        },
        {
          name: "Longsword of Sharpness",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8MNDhKb1Q87QszOJ]{Longsword of Sharpness}",
          image: "icons/skills/wounds/bone-broken-knee-beam.webp"
        },
        {
          name: "Scimitar of Sharpness",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZKyhkS8ud2NpV7ng]{Scimitar of Sharpness}",
          image: "icons/skills/wounds/bone-broken-knee-beam.webp"
        },
      ];
    const randomIndex = Math.floor(Math.random() * sharpSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: sharpSwordTypes[randomIndex].name,
        uuid: sharpSwordTypes[randomIndex].uuid,
        image: sharpSwordTypes[randomIndex].image
      }
    }; 
    }
    },
    { range: [51, 52], item: () => {
      const wandOfPolymorph = [
        { name: "Wand of Polymorph",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.khyjT3dKyoEOf4eA]{Wand of Polymorph}",
          image: "icons/weapons/staves/staff-engraved-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * wandOfPolymorph .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandOfPolymorph[randomIndex].name,
        uuid: wandOfPolymorph[randomIndex].uuid,
        image: wandOfPolymorph[randomIndex].image
      }
    }; 
    }
  },  
    { range: [53, 54], item: () => {
      const wandOfTheWarMagepThree = [
        { name: "Wand of the War Mage +3",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IuVaBrq17AqxpXc4]{Wand of the War Mage +3}",
          image: "icons/weapons/staves/staff-engraved-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * wandOfTheWarMagepThree .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wandOfTheWarMagepThree[randomIndex].name,
        uuid: wandOfTheWarMagepThree[randomIndex].uuid,
        image: wandOfTheWarMagepThree[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [55, 55], item: () => {
      const ahPlateSolo = [
        { name: "Adamantine Half Plate Armor",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.159agyOuBHCl2WKd]{Adamantine Half Plate Armor}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ahPlateSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ahPlateSolo[randomIndex].name,
        uuid: ahPlateSolo[randomIndex].uuid,
        image: ahPlateSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [56, 56], item: () => {
      const aPlateSolo = [
        { name: "Adamantine Half Plate Armor",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sP8CV5VNEcY1Yh1Q]{Adamantine Plate Armor}",
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * aPlateSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: aPlateSolo[randomIndex].name,
        uuid: aPlateSolo[randomIndex].uuid,
        image: aPlateSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [57, 57], item: () => {
      const animatedShield = [
        { name: "Animated Shield",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NG8BlE2nwYJxCjWO]{Animated Shield}",
          image: "icons/equipment/shield/heater-steel-sword-yellow-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * animatedShield .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: animatedShield[randomIndex].name,
        uuid: animatedShield[randomIndex].uuid,
        image: animatedShield[randomIndex].image
      }
    }; 
    }
  },  
    { range: [58, 58], item: () => {
      const fireGiantStrengthBelt = [
        { name: "Belt of Fire Giant Strength",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bq9YKwEHLQ7p7ric]{Belt of Fire Giant Strength}",
          image: "icons/equipment/shield/heater-steel-sword-yellow-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * fireGiantStrengthBelt .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: fireGiantStrengthBelt[randomIndex].name,
        uuid: fireGiantStrengthBelt[randomIndex].uuid,
        image: fireGiantStrengthBelt[randomIndex].image
      }
    }; 
    }
  },  
    { range: [59, 59], item: () => {
      const frostandStoneGiantBeltTypes = [
      {   name: "Belt of Frost Giant Strength",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ORKf6RRcalrdD6Qp]{Belt of Frost Giant Strength}",
          image: "icons/equipment/waist/belt-buckle-horn-blue.webp",
      },
      {   name: "Belt of Stone Giant Strength",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCUZ7h8YYrs16UhX]{Belt of Stone Giant Strength}",
          image: "icons/equipment/waist/belt-armored-steel.webp",
      }
      ];
      const randomIndex = Math.floor(Math.random() * frostandStoneGiantBeltTypes .length);
      return { 
        roll: randomIndex + 1,
        item: {
          name: frostandStoneGiantBeltTypes[randomIndex].name,
          uuid: frostandStoneGiantBeltTypes[randomIndex].uuid,
          image: frostandStoneGiantBeltTypes[randomIndex].image
        }
      }; 
      }
    },
    { range: [60, 60], item: () => {
      const poneBreastplateSolo = [
        { name: "Breastplate +1",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * poneBreastplateSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: poneBreastplateSolo[randomIndex].name,
        uuid: poneBreastplateSolo[randomIndex].uuid,
        image: poneBreastplateSolo[randomIndex].image
      }
    }; 
    }
  },   
    { range: [61, 61], item: () => {
      const resistanceBreastplateTypes = [
      { name: "Breastplate Armor of Resistance of Acid",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Acid",
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      }, 
      { name: "Breastplate Armor of Resistance of Cold",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Cold", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Fire",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Fire", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Force",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Force", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Lightning",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Lightning",
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Necrotic",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Necrotic", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Poison",
        uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Poison", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Psychic",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Psychic", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Radiant",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Radiant", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
      { name: "Breastplate Armor of Resistance of Thunder",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lccm5AjIk91aIHbi]{Breastplate Armor of Resistance} of Thunder",
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
      },
    ];
    const randomIndex = Math.floor(Math.random() * resistanceBreastplateTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: resistanceBreastplateTypes[randomIndex].name,
        uuid: resistanceBreastplateTypes[randomIndex].uuid,
        image: resistanceBreastplateTypes[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [62, 62], item: () => {
      const candleOfInvocation = [
        { name: "Candle of Invocation",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZoUVmRA3HfAK2eZy]{Candle of Invocation}",
          image: "icons/sundries/lights/candle-unlit-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * candleOfInvocation .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: candleOfInvocation[randomIndex].name,
        uuid: candleOfInvocation[randomIndex].uuid,
        image: candleOfInvocation[randomIndex].image
      }
    }; 
    }
  },  
    { range: [63, 63], item: () => {
      const chainMailpTwoSolo = [
        { name: "Chain Mail +2",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.akjpaK4TYkUZbGrN]{Chain Mail +2}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * chainMailpTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainMailpTwoSolo[randomIndex].name,
        uuid: chainMailpTwoSolo[randomIndex].uuid,
        image: chainMailpTwoSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [64, 64], item: () => {
      const chainShirtpTwoSolo = [
        { name: "Chain Shirt +2",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FLoBS3UnFnZTSsSx]{Chain Shirt +2}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * chainShirtpTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainShirtpTwoSolo[randomIndex].name,
        uuid: chainShirtpTwoSolo[randomIndex].uuid,
        image: chainShirtpTwoSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [65, 65], item: () => {
      const cloakofArachnida = [
        { name: "Cloak of Arachnida",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VwJjuNbBf2KHMPrY]{Cloak of Arachnida}",
          image: "icons/equipment/back/cloak-brown-accent-brown-layered-collared-fur.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * cloakofArachnida .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: cloakofArachnida[randomIndex].name,
        uuid: cloakofArachnida[randomIndex].uuid,
        image: cloakofArachnida[randomIndex].image
      }
    }; 
    }
  },   
    { range: [66, 66], item: () => {
      const dancingSwordTypes = [
        { name: "Dancing Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zWSB0NCllWaSVoNT]{Dancing Greatsword}", 
          image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
        },
        { name: "Dancing Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sIiUbRJItYAs5gtA]{Dancing Longsword}", 
          image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
        },
        { name: "Dancing Rapier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6n8J07mFo8xs11vS]{Dancing Rapier}", 
          image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
        },
        { name: "Dancing Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kOYXMf4GTtD7OqbD]{Dancing Scimitar}", 
          image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
        },
        { name: "Dancing Shortsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.stlFCpqW3ZuAftTi]{Dancing Shortsword}",
          image: "icons/skills/melee/maneuver-greatsword-yellow.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * dancingSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: dancingSwordTypes[randomIndex].name,
        uuid: dancingSwordTypes[randomIndex].uuid,
        image: dancingSwordTypes[randomIndex].image
      }
    }; 
    }
  },  
    { range: [67, 67], item: () => {
      const demonArmor = [
        { name: "Demon Armor",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ejEt6hLQxOux04lS]{Demon Armor}",
          image: "icons/equipment/chest/breastplate-layered-steel-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * demonArmor .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: demonArmor[randomIndex].name,
        uuid: demonArmor[randomIndex].uuid,
        image: demonArmor[randomIndex].image
      }
    }; 
    }
  },
    { range: [68, 68], item: () => {
      const scaleDragonMailTypes = [
        { name: "Dragon Scale Mail Black",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Black", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Blue",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Blue", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Brass",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Brass", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Bronze",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Bronze", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Copper",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Copper", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Gold",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Gold", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Green",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Green", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Red",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Red", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail Silver",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} Silver", 
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        { name: "Dragon Scale Mail White",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tIwoSAGJlcuyiwaQ]{Dragon Scale Mail} White",
          image: "icons/equipment/chest/breastplate-scale-grey.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * scaleDragonMailTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: scaleDragonMailTypes[randomIndex].name,
        uuid: scaleDragonMailTypes[randomIndex].uuid,
        image: scaleDragonMailTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [69, 69], item: () => {
      const dwarvenPlateArmor = [
        { name: "Dwarven Plate",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OwqRt1pVLhdMQa0d]{Dwarven Plate}",
          image: "icons/equipment/chest/breastplate-banded-steel-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * dwarvenPlateArmor .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: dwarvenPlateArmor[randomIndex].name,
        uuid: dwarvenPlateArmor[randomIndex].uuid,
        image: dwarvenPlateArmor[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [70, 70], item: () => {
      const dwarvenThrower = [
        { name: "Dwarven Thrower",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kvD4ElYCfCKpjDeg]{Dwarven Thrower}",
          image: "icons/weapons/hammers/hammer-double-engraved-gold.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * dwarvenThrower .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: dwarvenThrower[randomIndex].name,
        uuid: dwarvenThrower[randomIndex].uuid,
        image: dwarvenThrower[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [71, 71], item: () => {
      const efreetiBottle = [
        { name: "Efreeti Bottle",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fbcQsOgWCjhEAGY7]{Efreeti Bottle}" ,
          image: "icons/consumables/drinks/wine-amphora-clay-gray.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * efreetiBottle .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: efreetiBottle[randomIndex].name,
        uuid: efreetiBottle[randomIndex].uuid,
        image: efreetiBottle[randomIndex].image
      }
    }; 
    }
  },
    { range: [72, 72], item: () => {
      const obsidianSteedSolo = [
        { name: "Figurine of Wondrous Power (Obsidian Steed)",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M5qkJ7erLqWYUHa0]{Figurine of Wondrous Power (Obsidian Steed)}",
          image: "icons/magic/light/beam-red-orange.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * obsidianSteedSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: obsidianSteedSolo[randomIndex].name,
        uuid: obsidianSteedSolo[randomIndex].uuid,
        image: obsidianSteedSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [73, 73], item: () => {
      const frostBrandSwordTypes = [
        { name: "Frost Brand Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ykB6UKv5BuQnSRSL]{Frost Brand Greatsword}", 
          image: "icons/skills/melee/strike-weapon-polearm-ice-blue.webp",
        },
        { name: "Frost Brand Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NmZMx2u6bHpRyGUa]{Frost Brand Longsword}", 
          image: "icons/skills/melee/strike-weapon-polearm-ice-blue.webp",
        },
        { name: "Frost Brand Rapier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.efluRemOguW2YeZY]{Frost Brand Rapier}", 
          image: "icons/skills/melee/strike-weapon-polearm-ice-blue.webp",
        },
        { name: "Frost Brand Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.07R6JFioylOCpVoL]{Frost Brand Scimitar}", 
          image: "icons/skills/melee/strike-weapon-polearm-ice-blue.webp",
        },
        { name: "Frost Brand Shortsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DT02xK1DzxLNlVaI]{Frost Brand Shortsword}",
          image: "icons/skills/melee/strike-weapon-polearm-ice-blue.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * frostBrandSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: frostBrandSwordTypes[randomIndex].name,
        uuid: frostBrandSwordTypes[randomIndex].uuid,
        image: frostBrandSwordTypes[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [74, 74], item: () => {
      const helmOfBrilliance = [
        { name: "Helm of Brilliance",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rhGulc3gEJhnuP31]{Helm of Brilliance}",
          image: "icons/magic/lightning/bolt-strike-smoke-yellow.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * helmOfBrilliance .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: helmOfBrilliance[randomIndex].name,
        uuid: helmOfBrilliance[randomIndex].uuid,
        image: helmOfBrilliance[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [75, 75], item: () => {
      const bronzeHornofValhalla = [
        { name: "Bronze Horn of Valhalla",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqcerAMszpe3hwyI]{Bronze Horn of Valhalla}",
          image: "icons/tools/instruments/horn-red-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * bronzeHornofValhalla .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: bronzeHornofValhalla[randomIndex].name,
        uuid: bronzeHornofValhalla[randomIndex].uuid,
        image: bronzeHornofValhalla[randomIndex].image
      }
    }; 
    }
  },  
    { range: [76, 76], item: () => {
      const iotbAnstruthHarp = [
        { name: "Instrument of the bards (Anstruth Harp)",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ajPmwj7rfwqyrEkV]{Instrument of the bards (Anstruth Harp)}",
          image: "icons/tools/instruments/harp-yellow-teal.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * iotbAnstruthHarp .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: iotbAnstruthHarp[randomIndex].name,
        uuid: iotbAnstruthHarp[randomIndex].uuid,
        image: iotbAnstruthHarp[randomIndex].image
      }
    }; 
    }
  },   
    { range: [77, 77], item: () => {
      const isoAbsorption = [
        { name: "Ioun Stone of Absorption",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NGVEouqK0I6J6jV5]{Ioun Stone of Absorption}",
          image: "icons/commodities/gems/gem-rough-ball-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoAbsorption .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoAbsorption[randomIndex].name,
        uuid: isoAbsorption[randomIndex].uuid,
        image: isoAbsorption[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [78, 78], item: () => {
      const isoAgility = [
        { name: "Ioun Stone of Agility",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Q4Iy6hqREsbk9yG7]{Ioun Stone of Agility}",
          image: "icons/commodities/gems/gem-rough-cushion-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoAgility .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoAgility[randomIndex].name,
        uuid: isoAgility[randomIndex].uuid,
        image: isoAgility[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [79, 79], item: () => {
      const isoFortitude = [
        { name: "Ioun Stone of Fortitude",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ig5DOQtQYJPXJId4]{Ioun Stone of Fortitude}",
          image: "icons/commodities/gems/gem-rough-cushion-purple-pink.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoFortitude .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoFortitude[randomIndex].name,
        uuid: isoFortitude[randomIndex].uuid,
        image: isoFortitude[randomIndex].image
      }
    }; 
    }
  },  
    { range: [80, 80], item: () => {
      const isoInsight = [
        { name: "Ioun Stone of Insight",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9jMQEm99q1ttAV1Q]{Ioun Stone of Insight}",
          image: "icons/commodities/stone/ore-pile-teal.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoInsight .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoInsight[randomIndex].name,
        uuid: isoInsight[randomIndex].uuid,
        image: isoInsight[randomIndex].image
      }
    }; 
    }
  },  
    { range: [81, 81], item: () => {
      const isoIntellect = [
        { name: "Ioun Stone of Intellect",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YeLz5OxRNxmvHJId]{Ioun Stone of Intellect}",
          image: "icons/commodities/stone/ore-pile-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoIntellect .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoIntellect[randomIndex].name,
        uuid: isoIntellect[randomIndex].uuid,
        image: isoIntellect[randomIndex].image
      }
    }; 
    }
  },  
    { range: [82, 82], item: () => {
      const isoLeadership = [
        { name: "Ioun Stone of Leadership",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hDF4RSCzMO8iI14x]{Ioun Stone of Leadership}",
          image: "icons/commodities/stone/ore-pile-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoLeadership .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoLeadership[randomIndex].name,
        uuid: isoLeadership[randomIndex].uuid,
        image: isoLeadership[randomIndex].image
      }
    }; 
    }
  },  
    { range: [83, 83], item: () => {
      const isoStrength = [
        { name: "Ioun Stone of Strength",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0G5LSgbb5NTV4XC7]{Ioun Stone of Strength}",
          image: "icons/commodities/gems/gem-rough-cushion-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoStrength .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoStrength[randomIndex].name,
        uuid: isoStrength[randomIndex].uuid,
        image: isoStrength[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [84, 84], item: () => {
      const leatherArmorpTwoSolo = [
        { name: "Leather Armor +2",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UT8zCwmdXVQlBiyl]{Leather Armor +2}",
          image: "icons/equipment/chest/breastplate-quilted-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * leatherArmorpTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: leatherArmorpTwoSolo[randomIndex].name,
        uuid: leatherArmorpTwoSolo[randomIndex].uuid,
        image: leatherArmorpTwoSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [85, 85], item: () => {
      const manualOfBodilyHealth = [
        { name:  "Manual of Bodily Health",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BjyTJn9oGvURWKJR]{Manual of Bodily Health}",
          image: "icons/sundries/books/book-backed-silver-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * manualOfBodilyHealth .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: manualOfBodilyHealth[randomIndex].name,
        uuid: manualOfBodilyHealth[randomIndex].uuid,
        image: manualOfBodilyHealth[randomIndex].image
      }
    }; 
    }
  },  
    { range: [86, 86], item: () => {
      const manualOfGainfulExercise = [
        { name:  "Manual of Gainful Exercise",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ykefWXBjq3y6y9Se]{Manual of Gainful Exercise}",
          image: "icons/sundries/books/book-embossed-jewel-gold-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * manualOfGainfulExercise .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: manualOfGainfulExercise[randomIndex].name,
        uuid: manualOfGainfulExercise[randomIndex].uuid,
        image: manualOfGainfulExercise[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [87, 87], item: () => {
      const manualOfGolems = [
        { name:  "Manual of Golems",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UxkP6FvDzPbsIY6o]{Manual of Golems}",
          image: "icons/sundries/books/book-rounded-teal.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * manualOfGolems .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: manualOfGolems[randomIndex].name,
        uuid: manualOfGolems[randomIndex].uuid,
        image: manualOfGolems[randomIndex].image
      }
    }; 
    }
  },  
    { range: [88, 88], item: () => {
      const manualQuicknessOfAction = [
        { name:  "Manual of Quickness of Action",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Q4jmng3i9Lb2nL5F]{Manual of Quickness of Action}",
          image: "icons/sundries/books/book-symbol-triangle-silver-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * manualQuicknessOfAction .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: manualQuicknessOfAction[randomIndex].name,
        uuid: manualQuicknessOfAction[randomIndex].uuid,
        image: manualQuicknessOfAction[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [89, 89], item: () => {
      const mirrorOfLifeTrapping = [
        { name:  "Mirror of Life Trapping",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hf5j1meGsA33HkUj]{Mirror of Life Trapping}",
          image: "icons/magic/air/fog-gas-smoke-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * mirrorOfLifeTrapping .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: mirrorOfLifeTrapping[randomIndex].name,
        uuid: mirrorOfLifeTrapping[randomIndex].uuid,
        image: mirrorOfLifeTrapping[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [90, 90], item: () => {
      const nineLivesSwordTypes = [
        { name:  "Nine Lives Stealer Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tFLmAPUDLxBY8jFO]{Nine Lives Stealer Greatsword}", 
          image: "icons/weapons/swords/sword-broad-crystal-paired.webp",
        },
        { name:  "Nine Lives Stealer Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BefbYlWbRYyy6R8s]{Nine Lives Stealer Longsword}", 
          image: "icons/weapons/swords/sword-broad-crystal-paired.webp",
        },
        { name:  "Nine Lives Stealer Rapier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OUGMoQYeJzxEcRvm]{Nine Lives Stealer Rapier}", 
          image: "icons/weapons/swords/sword-broad-crystal-paired.webp",
        },
        { name:  "Nine Lives Stealer Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9Mdes2tKt0cqsNTw]{Nine Lives Stealer Scimitar}", 
          image: "icons/weapons/swords/sword-broad-crystal-paired.webp",
        },
        { name:  "Nine Lives Stealer Shortsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2Lkub0qIwucWEfp3]{Nine Lives Stealer Shortsword}",
          image: "icons/weapons/swords/sword-broad-crystal-paired.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * nineLivesSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: nineLivesSwordTypes[randomIndex].name,
        uuid: nineLivesSwordTypes[randomIndex].uuid,
        image: nineLivesSwordTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [91, 91], item: () => {
      const oathbow = [
        { name:  "Oathbow",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mGIwk9FwTAJB6qTn]{Oathbow}",
          image: "icons/weapons/bows/longbow-recurve-leather-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * oathbow .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: oathbow[randomIndex].name,
        uuid: oathbow[randomIndex].uuid,
        image: oathbow[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [92, 92], item: () => {
      const scaleMailpTwoSolo = [
        { name:  "Scale Mail +2",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fO1PuSOtZWLzEHqu]{Scale Mail +2}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * scaleMailpTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: scaleMailpTwoSolo[randomIndex].name,
        uuid: scaleMailpTwoSolo[randomIndex].uuid,
        image: scaleMailpTwoSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [93, 93], item: () => {
      const spellguardShield = [
        { name:  "Spellguard Shield",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kpDbCYgUivh7NApp]{Spellguard Shield}",
          image: "icons/equipment/shield/buckler-wooden-boss-glowing-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * spellguardShield .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: spellguardShield[randomIndex].name,
        uuid: spellguardShield[randomIndex].uuid,
        image: spellguardShield[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [94, 94], item: () => {
      const splintArmorpOneSolo = [
        { name:  "Splint Armor +1",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}",
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * splintArmorpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: splintArmorpOneSolo[randomIndex].name,
        uuid: splintArmorpOneSolo[randomIndex].uuid,
        image: splintArmorpOneSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [95, 95], item: () => {
      const resistanceSplintTypes = [
        { name:  "Splint Armor of Resistance of Acid",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Acid", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Cold",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Cold", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Fire",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Fire", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Force",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Force", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Lightning",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Lightning",
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Necrotic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Necrotic", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Poison",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Poison", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Psychic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Psychic", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Radiant",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Radiant", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name:  "Splint Armor of Resistance of Thunder",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JNkjtTxYmEC7W34O]{Splint Armor of Resistance} of Thunder",
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
      ];
      const randomIndex = Math.floor(Math.random() * resistanceSplintTypes .length);
      return { 
        roll: randomIndex + 1,
        item: {
          name: resistanceSplintTypes[randomIndex].name,
          uuid: resistanceSplintTypes[randomIndex].uuid,
          image: resistanceSplintTypes[randomIndex].image
        }
      }; 
      }
    }, 
    { range: [96, 96], item: () => {
      const studdedLeatherArmorpOneSolo = [
        { name:  "Studded Leather +1",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * studdedLeatherArmorpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: studdedLeatherArmorpOneSolo[randomIndex].name,
        uuid: studdedLeatherArmorpOneSolo[randomIndex].uuid,
        image: studdedLeatherArmorpOneSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [97, 97], item: () => {
      const resistanceStuddedLeatherTypes = [
        { name:  "Studded Leather Armor of Resistance of Acid",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Acid", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Cold",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Cold", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Fire",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Fire", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Force",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Force", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Lightning",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Lightning",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Necrotic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Necrotic", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Poison",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Poison", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Psychic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Psychic", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Radiant",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Radiant", 
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name:  "Studded Leather Armor of Resistance of Thunder",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W1kDsFekjroIywuz]{Studded Leather Armor of Resistance} of Thunder",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
      ];
      const randomIndex = Math.floor(Math.random() * resistanceStuddedLeatherTypes .length);
      return { 
        roll: randomIndex + 1,
        item: {
          name: resistanceStuddedLeatherTypes[randomIndex].name,
          uuid: resistanceStuddedLeatherTypes[randomIndex].uuid,
          image: resistanceStuddedLeatherTypes[randomIndex].image
        }
      }; 
      }
    }, 
    { range: [98, 98], item: () => {
      const tomeOfClearThought = [
        { name:  "Tome of Clear Thought",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2BYm8to5KldN8eYu]{Tome of Clear Thought}",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * tomeOfClearThought .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: tomeOfClearThought[randomIndex].name,
        uuid: tomeOfClearThought[randomIndex].uuid,
        image: tomeOfClearThought[randomIndex].image
      }
    }; 
    }
  },  
    { range: [99, 99], item: () => {
      const tomeOlAi = [
        { name:  "Tome of Leadership and Influence",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oN4Glcmi4BhdAI3k]{Tome of Leadership and Influence}",
          image: "icons/sundries/books/book-embossed-clasp-gold-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * tomeOlAi .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: tomeOlAi[randomIndex].name,
        uuid: tomeOlAi[randomIndex].uuid,
        image: tomeOlAi[randomIndex].image
      }
    }; 
    }
  },   
    { range: [100, 100], item: () => {
      const tomeOfUnderstanding = [
        { name:  "Tome of Understanding",
          uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WnKWD1FuAFUE7f4v]{Tome of Understanding}",
          image: "icons/sundries/books/book-black-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * tomeOfUnderstanding .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: tomeOfUnderstanding[randomIndex].name,
        uuid: tomeOfUnderstanding[randomIndex].uuid,
        image: tomeOfUnderstanding[randomIndex].image
      }
    }; 
    }
  }, 
  ]

  const magicItemTableI = [
    { range: [1, 5], 
      item: () => {
        const DefenderSwordTypes = [
          { name:  "Defender Greatsword",
            uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nSNhjX5F7f86AW1a]{Defender Greatsword}", 
            image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
          },
          { name:  "Defender Longsword",
            uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ukcKemEoTTRB9yLC]{Defender Longsword}", 
            image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
          },
          { name:  "Defender Rapier",
            uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YrkkHa6KN8a9o35k]{Defender Rapier}", 
            image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
          },
          { name:  "Defender Scimitar",
            uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ilyv71AeobM6AvIn]{Defender Scimitar}", 
            image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
          },
          { name:  "Defender Shortsword",
            uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.d58CvI0Fiav9Jjt1]{Defender Shortsword}",
            image: "icons/weapons/polearms/spear-flared-silver-pink.webp",
          },
          ];
        const randomIndex = Math.floor(Math.random() * DefenderSwordTypes .length);
        return { 
          roll: randomIndex + 1,
          item: {
            name: DefenderSwordTypes[randomIndex].name,
            uuid: DefenderSwordTypes[randomIndex].uuid,
            image: DefenderSwordTypes[randomIndex].image
          }
        }; 
        }
      }, 
    { range: [6, 10], item: () => {
      const hammerOfThunderbolts = [
        { name: "Hammer of Thunderbolts",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wGDDt17DpBcXPuUD]{Hammer of Thunderbolts}",
          image: "icons/skills/melee/strike-hammer-destructive-blue.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * hammerOfThunderbolts .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: hammerOfThunderbolts[randomIndex].name,
        uuid: hammerOfThunderbolts[randomIndex].uuid,
        image: hammerOfThunderbolts[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [11, 15], item: () => {
      const luckSwordTypes = [
        { name: "Luck Blade Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fWR9EFEjR0JtFdCC]{Luck Blade Greatsword}", 
          image:  "icons/magic/light/projectile-beam-yellow.webp"
        },
        { name: "Luck Blade Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.X6PHssSGnwiJRgcx]{Luck Blade Longsword}", 
          image:  "icons/magic/light/projectile-beam-yellow.webp"
        },
        { name: "Luck Blade Rapier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qGH7YqWhi0tHisMi]{Luck Blade Rapier}", 
          image:  "icons/magic/light/projectile-beam-yellow.webp"
        },
        { name: "Luck Blade Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.E7c4zpWdYgkKDHGo]{Luck Blade Scimitar}", 
          image:  "icons/magic/light/projectile-beam-yellow.webp"
        },
        { name: "Luck Blade Shortsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nL0Y0X8SjF58OmBM]{Luck Blade Shortsword}",
          image:  "icons/magic/light/projectile-beam-yellow.webp"
        },
        ];
    const randomIndex = Math.floor(Math.random() * luckSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: luckSwordTypes[randomIndex].name,
        uuid: luckSwordTypes[randomIndex].uuid,
        image: luckSwordTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [16, 20], item: () => {
      const swordOfAnsweringTypes = [
        { name: "Sword of Answering, Answerer",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yh0xM0qtQnKNOcnw]{SoA, Answerer}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Back Talker",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OY8sdprk0jkizbhN]{SoA, Back Talker}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Concluder",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CBIsWObzGPgx7W4E]{SoA, Concluder}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Last Quip",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f4KJ8yk7U5bGj5t5]{SoA, Last Quip}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",  
        },
        { name: "Sword of Answering, Rebutter",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nYD07jP6J62d6VcN]{SoA, Rebutter}",
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Replier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cOn69LtWZ0b5CO33]{SoA, Replier}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Retorter",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KsRxJ9nVvRNzTYEV]{SoA, Retorter}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Scather",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.COcxcgLxltEDUuZk]{SoA, Scather}", 
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
        { name: "Sword of Answering, Squelcher",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.pvs0ckFTFOB6ArUC]{SoA, Squelcher}",
          image: "icons/skills/melee/hand-grip-sword-orange.webp",
        },
      ];
    const randomIndex = Math.floor(Math.random() * swordOfAnsweringTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: swordOfAnsweringTypes[randomIndex].name,
        uuid: swordOfAnsweringTypes[randomIndex].uuid,
        image: swordOfAnsweringTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [21, 23], item: () => {
      const holySwordTypes = [
        { name: "Holy Avenger Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FCxG64QUxsnF4Lis]{Holy Avenger Greatsword}", 
          image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
        },
        { name: "Holy Avenger Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dZ9zWfhsIlabadKL]{Holy Avenger Longsword}", 
          image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
        },
        { name: "Holy Avenger Rapier",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kTxi62RTrrdrIBr9]{Holy Avenger Rapier}", 
          image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
        },
        { name: "Holy Avenger Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ULL5nkyN3WzazI4l]{Holy Avenger Scimitar}", 
          image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
        },
        { name: "Holy Avenger Shortsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bHbbIhbTzu4lYMRz]{Holy Avenger Shortsword}",
          image: "icons/skills/melee/weapons-crossed-swords-yellow-teal.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * holySwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: holySwordTypes[randomIndex].name,
        uuid: holySwordTypes[randomIndex].uuid,
        image: holySwordTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [24, 26], item: () => {
      const ringofDjinniSummoning = [
        { name: "Ring of Djinni Summoning",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdlBOEbEjiwUjTW5]{Ring of Djinni Summoning}",
          image: "icons/equipment/finger/ring-faceted-gold-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofDjinniSummoning .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofDjinniSummoning[randomIndex].name,
        uuid: ringofDjinniSummoning[randomIndex].uuid,
        image: ringofDjinniSummoning[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [27, 29], item: () => {
      const ringofInvisibility = [
        { name: "Ring of Invisibility",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1J0dsxyKRhVXYQf5]{Ring of Invisibility}",
          image: "icons/equipment/finger/ring-faceted-silver-orange.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofInvisibility .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofInvisibility[randomIndex].name,
        uuid: ringofInvisibility[randomIndex].uuid,
        image: ringofInvisibility[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [30, 32], item: () => {
      const ringofSpellTurning = [
        { name: "Ring of Spell Turning",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8PI1EL8xHLq4tXKr]{Ring of Spell Turning}",
          image: "icons/equipment/finger/ring-band-engraved-scrolls-silver.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofSpellTurning .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofSpellTurning[randomIndex].name,
        uuid: ringofSpellTurning[randomIndex].uuid,
        image: ringofSpellTurning[randomIndex].image
      }
    }; 
    }
  },  
    { range: [33, 35], item: () => {
      const rodOfLordlyMight = [
        { name: "Rod of Lordly Might",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.d5HNCmLIPCpPoX2w]{Rod of Lordly Might}",
          image: "icons/equipment/finger/ring-band-engraved-scrolls-silver.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * rodOfLordlyMight .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfLordlyMight[randomIndex].name,
        uuid: rodOfLordlyMight[randomIndex].uuid,
        image: rodOfLordlyMight[randomIndex].image
      }
    }; 
    }
  },  
    { range: [36, 38], item: () => {
      const staffOfTheMagi = [
        { name: "Staff of the Magi",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l3V7V8VCXpmAAysQ]{Staff of the Magi}",
          image: "icons/equipment/finger/ring-band-engraved-scrolls-silver.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * staffOfTheMagi .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: staffOfTheMagi[randomIndex].name,
        uuid: staffOfTheMagi[randomIndex].uuid,
        image: staffOfTheMagi[randomIndex].image
      }
    }; 
    }
  },   
    { range: [39, 41], item: () => {
      const vorpalSwordTypes = [
        { name: "Vorpal Greatsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3FNyS6DeCBZzFbqU]{Vorpal Greatsword}", 
          image: "icons/skills/melee/strike-sword-steel-yellow.webp",
        },
        { name: "Vorpal Longsword",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HokQ1loVJTFxt27u]{Vorpal Longsword}", 
          image: "icons/skills/melee/strike-sword-steel-yellow.webp",
        },
        { name: "Vorpal Scimitar",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I7cOsXsklWkzouHA]{Vorpal Scimitar}",
          image: "icons/skills/melee/strike-sword-steel-yellow.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * vorpalSwordTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: vorpalSwordTypes[randomIndex].name,
        uuid: vorpalSwordTypes[randomIndex].uuid,
        image: vorpalSwordTypes[randomIndex].image
      }
    }; 
    }
  },   
    { range: [42, 43], item: () => {
      const beltOfCloudGiantStrength = [
        { name: "Belt of Cloud Giant Strength",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NRj0lC3SM03s1YB3]{Belt of Cloud Giant Strength}",
          image: "icons/equipment/finger/ring-band-engraved-scrolls-silver.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * beltOfCloudGiantStrength .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: beltOfCloudGiantStrength[randomIndex].name,
        uuid: beltOfCloudGiantStrength[randomIndex].uuid,
        image: beltOfCloudGiantStrength[randomIndex].image
      }
    }; 
    }
  },   
    { range: [44, 45], item: () => {
      const breastplatepTwoSolo = [
        { name: "Breastplate +2",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ET8Oo5vaTZqyb7rN]{Breastplate +2}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * breastplatepTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: breastplatepTwoSolo[randomIndex].name,
        uuid: breastplatepTwoSolo[randomIndex].uuid,
        image: breastplatepTwoSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [46, 47], item: () => {
      const chainMailpThreeSolo = [
        { name: "Chain Mail +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eHGbr3rqRRxdBPLq]{Chain Mail +3}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * chainMailpThreeSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainMailpThreeSolo[randomIndex].name,
        uuid: chainMailpThreeSolo[randomIndex].uuid,
        image: chainMailpThreeSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [48, 49], item: () => {
      const chainShirtpThreeSolo = [
        { name: "Chain Shirt +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cI0UhWUux8gIzSHn]{Chain Shirt +3}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * chainShirtpThreeSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: chainShirtpThreeSolo[randomIndex].name,
        uuid: chainShirtpThreeSolo[randomIndex].uuid,
        image: chainShirtpThreeSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [50, 51], item: () => {
      const cloakofInvisibility = [
        { name: "Cloak of Invisibility",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uSG8iEEivnK1NRLr]{Cloak of Invisibility}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * cloakofInvisibility .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: cloakofInvisibility[randomIndex].name,
        uuid: cloakofInvisibility[randomIndex].uuid,
        image: cloakofInvisibility[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [52, 53], item: () => {
      const crystalBallLtypes = [
        { name: "Crystal Ball of Mind Reading",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TwYeck6buBZ602mg]{Crystal Ball of Mind Reading}", 
          image: "icons/commodities/gems/pearl-storm.webp",
        },
        { name: "Crystal Ball of Telepathy",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5KiRtMMSTnJmMtBr]{Crystal Ball of Telepathy}", 
          image: "icons/commodities/gems/pearl-swirl-blue.webp",
        },
        { name: "Crystal Ball of True Seeing",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ADH0UZ8bf7Op0dgf]{Crystal Ball of True Seeing}", 
          image: "icons/commodities/gems/pearl-fire.webp",
        },
        ];
    const randomIndex = Math.floor(Math.random() * crystalBallLtypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: crystalBallLtypes[randomIndex].name,
        uuid: crystalBallLtypes[randomIndex].uuid,
        image: crystalBallLtypes[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [54, 55], item: () => {
      const halfPlateArmorpOneSolo = [
        { name: "Half Plate Armor +1",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * halfPlateArmorpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: halfPlateArmorpOneSolo[randomIndex].name,
        uuid: halfPlateArmorpOneSolo[randomIndex].uuid,
        image: halfPlateArmorpOneSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [56, 57], item: () => {
      const ironFlask = [
        { name: "Iron Flask",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lvLrkAR7k8DS7J3W]{Iron Flask}",
          image: "icons/consumables/potions/bottle-bulb-empty-glass.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ironFlask .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ironFlask[randomIndex].name,
        uuid: ironFlask[randomIndex].uuid,
        image: ironFlask[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [58, 59], item: () => {
      const leatherArmorpThreeSolo = [
        { name: "Leather Armor +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZwFCZDgQljlidzns]{Leather Armor +3}" ,
          image: "icons/consumables/potions/bottle-bulb-empty-glass.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * leatherArmorpThreeSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: leatherArmorpThreeSolo[randomIndex].name,
        uuid: leatherArmorpThreeSolo[randomIndex].uuid,
        image: leatherArmorpThreeSolo[randomIndex].image
      }
    }; 
    }
  },  
    { range: [60, 61],  item: () => {
      const plateArmorpOneSolo = [
        { name: "Plate Armor +1",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}",
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * plateArmorpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: plateArmorpOneSolo[randomIndex].name,
        uuid: plateArmorpOneSolo[randomIndex].uuid,
        image: plateArmorpOneSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [62, 63], item: () => {
      const robeOfTheArchmagi = [
        { name: "Robe of the Archmagi",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mr96Z8YTI490ExhP]{Robe of the Archmagi}",
          image: "icons/equipment/chest/robe-layered-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * robeOfTheArchmagi .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: robeOfTheArchmagi[randomIndex].name,
        uuid: robeOfTheArchmagi[randomIndex].uuid,
        image: robeOfTheArchmagi[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [64, 65], item: () => {
      const rodOfResurrection = [
        { name: "Rod of Resurrection",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.y1GvOxABy835C0Gy]{Rod of Resurrection}",
          image: "icons/magic/holy/prayer-hands-glowing-yellow.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * rodOfResurrection .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: rodOfResurrection[randomIndex].name,
        uuid: rodOfResurrection[randomIndex].uuid,
        image: rodOfResurrection[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [66, 67], item: () => {
      const scaleMailpOneSolo = [
        { name: "Scale Mail +1",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}",
          image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * scaleMailpOneSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: scaleMailpOneSolo[randomIndex].name,
        uuid: scaleMailpOneSolo[randomIndex].uuid,
        image: scaleMailpOneSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [68, 69], item: () => {
      const scarabofProtection = [
        { name: "Scarab of Protection",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xjRSY2ECcc9viSz3]{Scarab of Protection}",
          image: "icons/environment/creatures/bug-larva-orange.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * scarabofProtection .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: scarabofProtection[randomIndex].name,
        uuid: scarabofProtection[randomIndex].uuid,
        image: scarabofProtection[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [70, 71], item: () => {
      const splintArmorpTwoSolo = [
        { name: "Splint Armor +2",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zIpNJyuOxp2raizE]{Splint Armor +2}",
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * splintArmorpTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: splintArmorpTwoSolo[randomIndex].name,
        uuid: splintArmorpTwoSolo[randomIndex].uuid,
        image: splintArmorpTwoSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [72, 73], item: () => {
      const studdedLeatherArmorpTwoSolo = [
        { name: "Studded Leather Armor +2",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FZixEM5voQkH84xP]{Studded Leather Armor +2}",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * studdedLeatherArmorpTwoSolo .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: studdedLeatherArmorpTwoSolo[randomIndex].name,
        uuid: studdedLeatherArmorpTwoSolo[randomIndex].uuid,
        image: studdedLeatherArmorpTwoSolo[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [74, 75], item: () => {
      const wellofManyWorlds = [
        { name: "Well of Many Worlds",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xjme5oSQZmdAy1fc]{Well of Many Worlds}",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * wellofManyWorlds .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: wellofManyWorlds[randomIndex].name,
        uuid: wellofManyWorlds[randomIndex].uuid,
        image: wellofManyWorlds[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [76, 76], item: () => {
      const armor12Types = [
        { name: "Half Plate Armor +2",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor +2",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        }, 
        { name: "Plate Armor +2",      
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor +2",      
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Studded Leather Armor +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.00BggOkChWztQx6R]{Studded Leather Armor +3}",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        }, 
        { name: "Studded Leather Armor +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.00BggOkChWztQx6R]{Studded Leather Armor +3}",
          image: "icons/equipment/chest/breastplate-rivited-red.webp",
        },
        { name: "Breastplate +3",        
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JDTO996oInbiZGHW]{Breastplate +3}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        }, 
        { name: "Breastplate +3",        
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JDTO996oInbiZGHW]{Breastplate +3}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        }, 
        { name: "Splint Armor +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwC8hZaNjO7IQc6K]{Splint Armor +3}", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name: "Splint Armor +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwC8hZaNjO7IQc6K]{Splint Armor +3}", 
          image: "icons/equipment/chest/breastplate-layered-steel.webp",
        },
        { name: "Half Plate Armor +3",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xbVpKtrQ6tJsPhXX]{Half Plate Armor +3}",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Plate Armor +3", 
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.466j8hy4AiENMHVQ]{Plate Armor +3}",
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
      ];
    const randomIndex = Math.floor(Math.random() * armor12Types .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: armor12Types[randomIndex].name,
        uuid: armor12Types[randomIndex].uuid,
        image: armor12Types[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [77, 77], item: () => {
      const apparatusoftheCrab = [
        { name: "Apparatus of the Crab",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lSd5QHnIJbKvP1bh]{Apparatus of the Crab}",
          image: "icons/containers/barrels/barrel-walnut-steel-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * apparatusoftheCrab .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: apparatusoftheCrab[randomIndex].name,
        uuid: apparatusoftheCrab[randomIndex].uuid,
        image: apparatusoftheCrab[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [78, 78], item: () => {
      const armorofInvulnerability = [
        { name: "Armor of Invulnerability",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.evSCq83oPhR0ZK4y]{Armor of Invulnerability}",
          image: "icons/containers/barrels/barrel-walnut-steel-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * armorofInvulnerability .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: armorofInvulnerability[randomIndex].name,
        uuid: armorofInvulnerability[randomIndex].uuid,
        image: armorofInvulnerability[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [79, 79], item: () => {
      const beltofStormGiantStrength = [
        { name: "Belt of Storm Giant Strength",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wBYmPQG3nZfD88aP]{Belt of Storm Giant Strength}",
          image: "icons/containers/barrels/barrel-walnut-steel-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * beltofStormGiantStrength .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: beltofStormGiantStrength[randomIndex].name,
        uuid: beltofStormGiantStrength[randomIndex].uuid,
        image: beltofStormGiantStrength[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [80, 80], item: () => {
      const cubicGate = [
        { name: "Cubic Gate",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ai1pEde3iQX30Fr]{Cubic Gate}",
          image: "icons/containers/barrels/barrel-walnut-steel-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * cubicGate .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: cubicGate[randomIndex].name,
        uuid: cubicGate[randomIndex].uuid,
        image: cubicGate[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [81, 81], item: () => {
      const deckofManyThings = [
        { name: "Deck of Many Things",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oSarKEU8x1AupB6z]{Deck of Many Things}",
          image: "icons/containers/barrels/barrel-walnut-steel-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * deckofManyThings .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: deckofManyThings[randomIndex].name,
        uuid: deckofManyThings[randomIndex].uuid,
        image: deckofManyThings[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [82, 82], item: () => {
      const efreetiChain = [
        { name: "Efreeti chain",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hos0vQSIJlGjFR8M]{Efreeti chain}",
          image: "icons/containers/barrels/barrel-walnut-steel-brown.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * efreetiChain .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: efreetiChain[randomIndex].name,
        uuid: efreetiChain[randomIndex].uuid,
        image: efreetiChain[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [83, 83], item: () => {
      const hPoResistanceTypes = [
        { name: "Half Plate Armor of Resistance of Acid",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Acid",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Cold",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Cold", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Fire",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Fire", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Force",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Force", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Lightning",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Lightning",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Necrotic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Necrotic", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Poison",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Poison", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Psychic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Psychic", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Radiant",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Radiant", 
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
        { name: "Half Plate Armor of Resistance of Thunder",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lN1VbnGFo3HNZXNb]{Half Plate Armor of Resistance} of Thunder",
          image: "icons/equipment/chest/breastplate-layered-steel-black.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * hPoResistanceTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: hPoResistanceTypes[randomIndex].name,
        uuid: hPoResistanceTypes[randomIndex].uuid,
        image: hPoResistanceTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [84, 84], item: () => {
      const ihofValhalla = [
        { name: "Iron Horn of Valhalla",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qVuZznv0MnIjDU70]{Iron Horn of Valhalla}",
          image: "icons/tools/instruments/horn-red-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ihofValhalla .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ihofValhalla[randomIndex].name,
        uuid: ihofValhalla[randomIndex].uuid,
        image: ihofValhalla[randomIndex].image
      }
    }; 
    }
  },  
    { range: [85, 85], item: () => {
      const iotbOllamhHarp = [
        { name: "Instrument of the bards (Ollamh harp)",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QEeRMRdDF3TVwnI7]{Instrument of the bards (Ollamh harp)}",
          image: "icons/tools/instruments/harp-yellow-teal.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * iotbOllamhHarp .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: iotbOllamhHarp[randomIndex].name,
        uuid: iotbOllamhHarp[randomIndex].uuid,
        image: iotbOllamhHarp[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [86, 86], item: () => {
      const isoGreaterAbsorption = [
        { name: "Ioun Stone of Greater Absorption",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7FEcfqz1piPHN1tV]{Ioun Stone of Greater Absorption}",
          image: "icons/commodities/stone/ore-pile-green.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoGreaterAbsorption .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoGreaterAbsorption[randomIndex].name,
        uuid: isoGreaterAbsorption[randomIndex].uuid,
        image: isoGreaterAbsorption[randomIndex].image
      }
    }; 
    }
  },  
    { range: [87, 87], item: () => {
      const isoMastery = [
        { name: "Ioun Stone of Mastery",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nk2MH16KcZmKp7FQ]{Ioun Stone of Mastery}",
          image: "icons/commodities/gems/gem-rough-cushion-green.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoMastery .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoMastery[randomIndex].name,
        uuid: isoMastery[randomIndex].uuid,
        image: isoMastery[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [88, 88], item: () => {
      const isoRegeneration = [
        { name: "Ioun Stone of Regeneration",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.szNhDWpks5BhEXhT]{Ioun Stone of Regeneration}",
          image: "icons/commodities/stone/rock-chunk-pumice-white.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * isoRegeneration .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: isoRegeneration[randomIndex].name,
        uuid: isoRegeneration[randomIndex].uuid,
        image: isoRegeneration[randomIndex].image
      }
    }; 
    }
  },  
    { range: [89, 89], item: () => {
      const plateArmorofEtherealness = [
        { name: "Plate Armor of Etherealness",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dJjdWdaZU30r1zx4]{Plate Armor of Etherealness}",
          image: "icons/commodities/stone/rock-chunk-pumice-white.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * plateArmorofEtherealness .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: plateArmorofEtherealness[randomIndex].name,
        uuid: plateArmorofEtherealness[randomIndex].uuid,
        image: plateArmorofEtherealness[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [90, 90], item: () => {
      const resistancePlateTypes = [
        { name: "Plate Armor of Resistance of Acid",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Acid", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Cold",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Cold", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Fire", 
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Fire", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Force",  
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Force", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Lightning",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Lightning",
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Necrotic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Necrotic", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Poison",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Poison", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Psychic",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Psychic",
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        }, 
        { name: "Plate Armor of Resistance of Radiant",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Radiant", 
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
        { name: "Plate Armor of Resistance of Thunder",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azxwKFHrNmG3HpVy]{Plate Armor of Resistance} of Thunder",
          image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * resistancePlateTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: resistancePlateTypes[randomIndex].name,
        uuid: resistancePlateTypes[randomIndex].uuid,
        image: resistancePlateTypes[randomIndex].image
      }
    }; 
    }
  },
    { range: [91, 91], item: () => {
      const ringofAirElementalCommand = [
        { name: "Ring of Air Elemental Command",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XZWHQ20ynJBK6xmU]{Ring of Air Elemental Command}",
          image: "icons/equipment/finger/ring-ball-silver.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofAirElementalCommand .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofAirElementalCommand[randomIndex].name,
        uuid: ringofAirElementalCommand[randomIndex].uuid,
        image: ringofAirElementalCommand[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [92, 92], item: () => {
      const ringofEarthElementalCommand = [
        { name: "Ring of Earth Elemental Command",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Zf7kBZa5f4WBepn1]{Ring of Earth Elemental Command}",
          image: "icons/equipment/finger/ring-ball-thorns-bronze.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofEarthElementalCommand .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofEarthElementalCommand[randomIndex].name,
        uuid: ringofEarthElementalCommand[randomIndex].uuid,
        image: ringofEarthElementalCommand[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [93, 93], item: () => {
      const ringofFireElementalCommand = [
        { name: "Ring of Fire Elemental Command",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.L9KBLub5vfb3mTDz]{Ring of Fire Elemental Command}",
          image: "icons/equipment/finger/ring-inlay-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofFireElementalCommand .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofFireElementalCommand[randomIndex].name,
        uuid: ringofFireElementalCommand[randomIndex].uuid,
        image: ringofFireElementalCommand[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [94, 94], item: () => {
      const ringofThreeWishes = [
        { name: "Ring of Three Wishes",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ewXgnWiYQhS8KArS]{Ring of Three Wishes}",
          image: "icons/equipment/finger/ring-band-engraved-silver.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofThreeWishes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofThreeWishes[randomIndex].name,
        uuid: ringofThreeWishes[randomIndex].uuid,
        image: ringofThreeWishes[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [95, 95], item: () => {
      const ringofWaterElementalCommand = [
        { name: "Ring of Water Elemental Command",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HnIERWmmra74hSCw]{Ring of Water Elemental Command}",
          image: "icons/equipment/finger/ring-band-engraved-silver-teal.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * ringofWaterElementalCommand .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: ringofWaterElementalCommand[randomIndex].name,
        uuid: ringofWaterElementalCommand[randomIndex].uuid,
        image: ringofWaterElementalCommand[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [96, 96], item: () => {
      const sphereofAnnihilation = [
        { name: "Sphere of Annihilation",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YNqk5zm9jDTvd7q]{Sphere of Annihilation}",
          image: "icons/magic/unholy/barrier-shield-glowing-pink.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * sphereofAnnihilation .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: sphereofAnnihilation[randomIndex].name,
        uuid: sphereofAnnihilation[randomIndex].uuid,
        image: sphereofAnnihilation[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [97, 97], item: () => {
      const talismanofPureGood = [
        { name: "Talisman of Pure Good",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iB3gunzgxZ8xK6Z5]{Talisman of Pure Good}",
          image: "icons/magic/life/cross-embers-glow-yellow-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * talismanofPureGood .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: talismanofPureGood[randomIndex].name,
        uuid: talismanofPureGood[randomIndex].uuid,
        image: talismanofPureGood[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [98, 98], item: () => {
      const talismanoftheSphere = [
        { name: "Talisman of the Sphere",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.46ikeR4RrSim6DsN]{Talisman of the Sphere}",
          image: "icons/magic/unholy/orb-glowing-purple.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * talismanoftheSphere .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: talismanoftheSphere[randomIndex].name,
        uuid: talismanoftheSphere[randomIndex].uuid,
        image: talismanoftheSphere[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [99, 99], item: () => {
      const talismanofUltimateEvil = [
        { name: "Talisman of Ultimate Evil",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAXfmZ2ErDlCVy0N]{Talisman of Ultimate Evil}",
          image: "icons/magic/death/skull-horned-goat-pentagram-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * talismanofUltimateEvil .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: talismanofUltimateEvil[randomIndex].name,
        uuid: talismanofUltimateEvil[randomIndex].uuid,
        image: talismanofUltimateEvil[randomIndex].image
      }
    }; 
    }
  }, 
    { range: [100, 100], item: () => {
      const tomeoftheStilledTongue = [
        { name: "Tome of the Stilled Tongue",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nus7BLmrnnjlDh0k]{Tome of the Stilled Tongue}",
          image: "icons/magic/death/skull-horned-goat-pentagram-red.webp",
        },
    ];
    const randomIndex = Math.floor(Math.random() * tomeoftheStilledTongue .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: tomeoftheStilledTongue[randomIndex].name,
        uuid: tomeoftheStilledTongue[randomIndex].uuid,
        image: tomeoftheStilledTongue[randomIndex].image
      }
    }; 
    }
  },
  ]

  const tashasMITuncommonTypes = [
    { range: [1, 1], item: "Illuminators Tattoo" },
    { range: [2, 2], item: "Masquerade Tattoo" },
    { range: [3, 3], item: "Prosthetic Limb" },
    { range: [4, 4], item: () => {
      const spellWroughtTypes = [
  "Acid Splash", "Blade Ward", "Booming Blade", "Chill Touch", "Control Flames", "Create Bonfire", 
  "Dancing Lights", "Druidcraft", "Eldritch Blast", "Encode Thoughts", "Fire Bolt", "Friends",
  "Frostbite", "Green-Flame Blade", "Guidance", "Gust", "Infestation", "Light", "Lightning Lure",
  "Mage Hand", "Magic Stone", "Mending", "Message", "Mind Sliver", "Minor Illusion", "Mold Earth",
  "Poison Spray", "Prestidigitation", "Primal Savagery", "Produce Flame", "Ray of Frost", "Resistance", 
  "Sacred Flame", "Sapping Sting", "Shape Water", "Shillelagh", "Shocking Grasp", "Spare the Dying", 
  "Sword Burst", "Thaumaturgy", "Thorn Whip", "Thunderclap", "Toll the Dead", "True Strike", "Vicious Mockery",
  "Word of Radiance", "Absorb Elements", "Alarm", "Animal Friendship", "Armor of Agathys", "Arms of Hadar",
  "Bane", "Beast Bond", "Bless", "Burning Hands", "Catapult", "Cause Fear", "Ceremony", 
  "Chaos Bolt", "Charm Person", "Chromatic Orb", "Color Spray", "Command", "Compelled Duel", 
  "Comprehend Languages", "Create or Destroy Water", "Cure Wounds", "Detect Evil and Good", "Detect Magic",
  "Detect Poison and Disease", "Disguise Self", "Dissonant Whispers", "Distort Value", "Divine Favor",
  "Earth Tremor", "Ensnaring Strike", "Entangle", "Expeditious Retreat", "Faerie Fire", "False Life",
  "Feather Fall", "Find Familiar", "Floating Disk", "Fog Cloud", "Frost Fingers", "Gift of Alacrity",
  "Goodberry", "Grease", "Guiding Bolt", "Hail of Thorns", "Healing Word", "Hellish Rebuke", "Heroism",
  "Hex", "Hideous Laughter", "Hunters Mark", "Ice Knife", "Identify", "Illusory Script", "Inflict Wounds",
  "Jims Magic Missile", "Jump", "Longstrider", "Mage Armor", "Magic Missile", "Magnify Gravity",
  "Protection from Evil and Good", "Purify Food and Drink", "Ray of Sickness", "Sanctuary", "Searing Smite",
  "Shield", "Shield of Faith", "Silent Image", "Silvery Barbs", "Sleep", "Snare", "Speak with Animals", 
  "Tashas Hideous Laughter", "Tashas Caustic Brew", "Tensers Floating Disk", "Thunderous Smite", "Thunderwave",
  "Unseen Servant", "Witch Bolt", "Wrathful Smite","Zephyr Strike",
  "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
  "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
  "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
  "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
  "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
  "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
  "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
  "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
  "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
  "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
  "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
  "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
  "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
  "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
  "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
  "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
  "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
  "Animate Dead", "Ashardalons Stride", "Aura of Vitality", "Beacon of Hope", "Bestow Curse",
  "Blinding Smite", "Blink", "Call Lightning", "Catnap", "Clairvoyance",
  "Conjure Animals", "Conjure Barrage", "Counterspell", "Create Food and Water", "Crusaders Mantle",
  "Daylight", "Dispel Magic", "Elemental Weapon", "Enemies Abound", "Erupting Earth",
  "Fast Friends", "Fear", "Feign Death", "Fireball", "Flame Arrows",
  "Fly", "Freedom of the Waves", "Galders Tower", "Gaseous Form", "Glyph of Warding",
  "Haste", "Hunger of Hadar", "Hypnotic Pattern", "Incite Greed", "Intellect Fortress",
  "Leomunds Tiny Hut", "Life Transference", "Lightning Arrow", "Lightning Bolt", "Magic Circle",
  "Major Image", "Mass Healing Word", "Meld into Stone", " Melfs Minute Meteors", "Motivational Speech",
  "Nondetection", "Phantom Steed", "Plant Growth", "Protection from Energy", "Pulse Wave",
  "Remove Curse", "Revivify", "Sending", "Sleet Storm", "Slow",
  "Speak with Dead", "Speak with Plants", "Spirit Guardians", "Spirit Shroud", "Stinking Cloud",
  "Summon Fey", "Summon Lesser Demon", "Summon Shadowspawn", "Summon Undead", "Thunder Step",
  "Tidal Wave", "Tiny Hut", "Tiny Servant", "Tongues", "Vampiric Touch",
  "Wall of Sand", "Wall of Water", "Water Breathing", "Water Walk", "Wind Wall",
  "Arcane Eye", "Aura of Life", "Aura of Purity", "Banishment", "Black Tentacles",
  "Blight", "Charm Monster", "Compulsion", "Confusion", "Conjure Minor Elementals",
  "Conjure Woodland Beings", "Control Water", "Death Ward", "Dimension Door", "Divination",
  "Dominate Beast", "Elemental Bane", "Evards black tentacles", "Fabricate", "Faithful Hound",
  "Find Greater Steed", "Fire Shield", "Freedom of Movement", "Galders Speedy Courier", "Giant Insect",
  "Grasping Vine", "Gravity Sinkhole", "Greater Invisibility", "Guardian of Faith", "Guardian of Nature",
  "Hallucinatory Terrain", "Ice Storm", "Leomunds secret chest", "Locate Creature", "Mordenkainens Faithful Hound",
  "Mordenkainens Private Sanctum", "Otilukes Resilient Sphere", "Phantasmal Killer", "Polymorph", "Private Sanctum",
  "Raulothims Psychic Lance", "Resilient Sphere", "Secret Chest", "Shadow of Moil", "Sickening Radiance",
  "Staggering Smite", "Stone Shape", "Stoneskin", "Storm Sphere", "Summon Aberration",
  "Summon Construct", "Summon Elemental", "Summon Greater Demon", "Vitriolic Sphere", "Wall of Fire",
  "Watery Sphere", "Animate Objects", "Antilife Shell", "Arcane Hand", "Awaken", "Banishing Smite",
  "Bigbys Hand", "Circle of Power", "Cloudkill", "Commune", "Commune with Nature",
  "Cone of Cold", "Conjure Elemental", "Conjure Volley", "Contact Other Plane", "Contagion",
  "Control Winds", "Create Spelljamming Helm", "Creation", "Danse Macabre", "Dawn",
  "Destructive Wave", "Dispel Evil and Good", "Dominate Person", "Dream", "Enervation",
  "Far Step", "Flame Strike", "Freedom of the Winds", "Geas", "Greater Restoration",
  "Hallow", "Hold Monster", "Holy Weapon", "Immolation", "Infernal Calling",
  "Insect Plague", "Legend Lore", "Maelstrom", "Mass Cure Wounds", "Mislead",
  "Modify Memory", "Negative Energy Flood", "Passwall", "Planar Binding", "Raise Dead",
  "Rarys Telepathic Bond", "Reincarnate", "Scrying", "Seeming", "Skill Empowerment",
  "Steel Wind Strike", "Summon Celestial", "Summon Draconic Spirit", "Swift Quiver", "Synaptic Static",
  "Telekinesis", "Telepathic Bond", "Teleportation Circle", "Temporal Shunt", "Transmute Rock",
  "Tree Stride", "Wall of Force", "Wall of Light", "Wall of Stone", "Wrath of Nature",
    ];
    const randomIndex = Math.floor(Math.random() * spellWroughtTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Spellwrought Tattoo of (${spellWroughtTypes [randomIndex]})`
  }; 
}
},
    { range: [5, 5], item: "All-Purpose Tool" },
    { range: [6, 6], item: "Amulet of the Devout" },
    { range: [7, 7], item: "Arcane Grimoire" },
    { range: [8, 8], item: "Barrier Tattoo (uncommon)" },
    { range: [9, 9], item: "Bloodwell Vial" },
    { range: [10, 10], item: "Coiling Grasp Tattoo" },
    { range: [11, 11], item: "Eldritch Claw Tattoo" },
    { range: [12, 12], item: "Feywild Shard" },
    { range: [13, 13], item: "Guardian Emblem" },
    { range: [14, 14], item: "Moon Sickle" },
    { range: [15, 15], item: "Natures Mantle" },
    { range: [16, 16], item: "Rhythm-Makers Drum" },
    ];
 
  const tashasMITrareTypes = [
    { range: [1, 1], item: "Illuminators Tattoo" },
    { range: [2, 2], item: "Masquerade Tattoo" },
    { range: [3, 3], item: "Prosthetic Limb" },
    { range: [4, 4], item: () => {
      const spellWroughtTypes = [
  "Acid Splash", "Blade Ward", "Booming Blade", "Chill Touch", "Control Flames", "Create Bonfire", 
  "Dancing Lights", "Druidcraft", "Eldritch Blast", "Encode Thoughts", "Fire Bolt", "Friends",
  "Frostbite", "Green-Flame Blade", "Guidance", "Gust", "Infestation", "Light", "Lightning Lure",
  "Mage Hand", "Magic Stone", "Mending", "Message", "Mind Sliver", "Minor Illusion", "Mold Earth",
  "Poison Spray", "Prestidigitation", "Primal Savagery", "Produce Flame", "Ray of Frost", "Resistance", 
  "Sacred Flame", "Sapping Sting", "Shape Water", "Shillelagh", "Shocking Grasp", "Spare the Dying", 
  "Sword Burst", "Thaumaturgy", "Thorn Whip", "Thunderclap", "Toll the Dead", "True Strike", "Vicious Mockery",
  "Word of Radiance", "Absorb Elements", "Alarm", "Animal Friendship", "Armor of Agathys", "Arms of Hadar",
  "Bane", "Beast Bond", "Bless", "Burning Hands", "Catapult", "Cause Fear", "Ceremony", 
  "Chaos Bolt", "Charm Person", "Chromatic Orb", "Color Spray", "Command", "Compelled Duel", 
  "Comprehend Languages", "Create or Destroy Water", "Cure Wounds", "Detect Evil and Good", "Detect Magic",
  "Detect Poison and Disease", "Disguise Self", "Dissonant Whispers", "Distort Value", "Divine Favor",
  "Earth Tremor", "Ensnaring Strike", "Entangle", "Expeditious Retreat", "Faerie Fire", "False Life",
  "Feather Fall", "Find Familiar", "Floating Disk", "Fog Cloud", "Frost Fingers", "Gift of Alacrity",
  "Goodberry", "Grease", "Guiding Bolt", "Hail of Thorns", "Healing Word", "Hellish Rebuke", "Heroism",
  "Hex", "Hideous Laughter", "Hunters Mark", "Ice Knife", "Identify", "Illusory Script", "Inflict Wounds",
  "Jims Magic Missile", "Jump", "Longstrider", "Mage Armor", "Magic Missile", "Magnify Gravity",
  "Protection from Evil and Good", "Purify Food and Drink", "Ray of Sickness", "Sanctuary", "Searing Smite",
  "Shield", "Shield of Faith", "Silent Image", "Silvery Barbs", "Sleep", "Snare", "Speak with Animals", 
  "Tashas Hideous Laughter", "Tashas Caustic Brew", "Tensers Floating Disk", "Thunderous Smite", "Thunderwave",
  "Unseen Servant", "Witch Bolt", "Wrathful Smite","Zephyr Strike",
  "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
  "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
  "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
  "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
  "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
  "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
  "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
  "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
  "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
  "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
  "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
  "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
  "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
  "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
  "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
  "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
  "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
  "Animate Dead", "Ashardalons Stride", "Aura of Vitality", "Beacon of Hope", "Bestow Curse",
  "Blinding Smite", "Blink", "Call Lightning", "Catnap", "Clairvoyance",
  "Conjure Animals", "Conjure Barrage", "Counterspell", "Create Food and Water", "Crusaders Mantle",
  "Daylight", "Dispel Magic", "Elemental Weapon", "Enemies Abound", "Erupting Earth",
  "Fast Friends", "Fear", "Feign Death", "Fireball", "Flame Arrows",
  "Fly", "Freedom of the Waves", "Galders Tower", "Gaseous Form", "Glyph of Warding",
  "Haste", "Hunger of Hadar", "Hypnotic Pattern", "Incite Greed", "Intellect Fortress",
  "Leomunds Tiny Hut", "Life Transference", "Lightning Arrow", "Lightning Bolt", "Magic Circle",
  "Major Image", "Mass Healing Word", "Meld into Stone", " Melfs Minute Meteors", "Motivational Speech",
  "Nondetection", "Phantom Steed", "Plant Growth", "Protection from Energy", "Pulse Wave",
  "Remove Curse", "Revivify", "Sending", "Sleet Storm", "Slow",
  "Speak with Dead", "Speak with Plants", "Spirit Guardians", "Spirit Shroud", "Stinking Cloud",
  "Summon Fey", "Summon Lesser Demon", "Summon Shadowspawn", "Summon Undead", "Thunder Step",
  "Tidal Wave", "Tiny Hut", "Tiny Servant", "Tongues", "Vampiric Touch",
  "Wall of Sand", "Wall of Water", "Water Breathing", "Water Walk", "Wind Wall",
  "Arcane Eye", "Aura of Life", "Aura of Purity", "Banishment", "Black Tentacles",
  "Blight", "Charm Monster", "Compulsion", "Confusion", "Conjure Minor Elementals",
  "Conjure Woodland Beings", "Control Water", "Death Ward", "Dimension Door", "Divination",
  "Dominate Beast", "Elemental Bane", "Evards black tentacles", "Fabricate", "Faithful Hound",
  "Find Greater Steed", "Fire Shield", "Freedom of Movement", "Galders Speedy Courier", "Giant Insect",
  "Grasping Vine", "Gravity Sinkhole", "Greater Invisibility", "Guardian of Faith", "Guardian of Nature",
  "Hallucinatory Terrain", "Ice Storm", "Leomunds secret chest", "Locate Creature", "Mordenkainens Faithful Hound",
  "Mordenkainens Private Sanctum", "Otilukes Resilient Sphere", "Phantasmal Killer", "Polymorph", "Private Sanctum",
  "Raulothims Psychic Lance", "Resilient Sphere", "Secret Chest", "Shadow of Moil", "Sickening Radiance",
  "Staggering Smite", "Stone Shape", "Stoneskin", "Storm Sphere", "Summon Aberration",
  "Summon Construct", "Summon Elemental", "Summon Greater Demon", "Vitriolic Sphere", "Wall of Fire",
  "Watery Sphere", "Animate Objects", "Antilife Shell", "Arcane Hand", "Awaken", "Banishing Smite",
  "Bigbys Hand", "Circle of Power", "Cloudkill", "Commune", "Commune with Nature",
  "Cone of Cold", "Conjure Elemental", "Conjure Volley", "Contact Other Plane", "Contagion",
  "Control Winds", "Create Spelljamming Helm", "Creation", "Danse Macabre", "Dawn",
  "Destructive Wave", "Dispel Evil and Good", "Dominate Person", "Dream", "Enervation",
  "Far Step", "Flame Strike", "Freedom of the Winds", "Geas", "Greater Restoration",
  "Hallow", "Hold Monster", "Holy Weapon", "Immolation", "Infernal Calling",
  "Insect Plague", "Legend Lore", "Maelstrom", "Mass Cure Wounds", "Mislead",
  "Modify Memory", "Negative Energy Flood", "Passwall", "Planar Binding", "Raise Dead",
  "Rarys Telepathic Bond", "Reincarnate", "Scrying", "Seeming", "Skill Empowerment",
  "Steel Wind Strike", "Summon Celestial", "Summon Draconic Spirit", "Swift Quiver", "Synaptic Static",
  "Telekinesis", "Telepathic Bond", "Teleportation Circle", "Temporal Shunt", "Transmute Rock",
  "Tree Stride", "Wall of Force", "Wall of Light", "Wall of Stone", "Wrath of Nature",
    ];
    const randomIndex = Math.floor(Math.random() * spellWroughtTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Spellwrought Tattoo of (${spellWroughtTypes [randomIndex]})`
  }; 
}
},
    { range: [5, 5], item: "All-Purpose Tool" },
    { range: [6, 6], item: "Amulet of the Devout" },
    { range: [7, 7], item: "Arcane Grimoire" },
    { range: [8, 8], item: "Barrier Tattoo (rare)" },
    { range: [9, 9], item: "Bloodwell Vial" },
    { range: [10, 10], item: "Coiling Grasp Tattoo" },
    { range: [11, 11], item: "Eldritch Claw Tattoo" },
    { range: [12, 12], item: "Feywild Shard" },
    { range: [13, 13], item: "Guardian Emblem" },
    { range: [14, 14], item: "Moon Sickle" },
    { range: [15, 15], item: "Natures Mantle" },
    { range: [16, 16], item: "Rhythm-Makers Drum" },
    { range: [17, 17], item: "Alchemical Compendium" },
    { range: [18, 18], item: "Astral Shard" },
    { range: [19, 19], item: "Astromancy Archive" },
    { range: [20, 20], item: "Atlas of Endless Horizons" },
    { range: [21, 21], item: "Bell Branch" },
    { range: [22, 22], item: "Devotees Censer" },
    { range: [23, 23], item: "Duplicitous Manuscript" },
    { range: [24, 24], item: () => {
      const shardElementTypes = [
        "Air", "Earth", "Fire", "Water",
      ];
    const randomIndex = Math.floor(Math.random() * shardElementTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Elemental Essence Shard, (${shardElementTypes [randomIndex]})`
  }; 
}
}, 
    { range: [25, 25], item: "Far Realm Shard" },
    { range: [26, 26], item: "Fulminating Treatise" },
    { range: [27, 27], item: "Heart Weavers Primer" },
    { range: [28, 28], item: "Libram of Souls and Flesh" },
    { range: [29, 29], item: "Lyre of Building" },
    { range: [30, 30], item: () => {
      const shardAlignmentTypes = [
        "Lawful", "Chaotic", "Good", "Evil",
      ];
    const randomIndex = Math.floor(Math.random() * shardAlignmentTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Outer Essence Shard, (${shardAlignmentTypes [randomIndex]})`
  }; 
}
}, 
    { range: [31, 31], item: "Planecallers Codex" },
    { range: [32, 32], item: "Protective Verses" },
    { range: [33, 33], item: "Revelers Concertina" },
    { range: [34, 34], item: "Shadowfell Brand Tattoo" },
    { range: [35, 35], item: "Shadowfell Shard" },
    ];

  const tashasMITrareplus = [
    { range: [1, 1], item: "Illuminators Tattoo" },
    { range: [2, 2], item: "Masquerade Tattoo" },
    { range: [3, 3], item: "Prosthetic Limb" },
    { range: [4, 4], item: () => {
      const spellWroughtTypes = [
  "Acid Splash", "Blade Ward", "Booming Blade", "Chill Touch", "Control Flames", "Create Bonfire", 
  "Dancing Lights", "Druidcraft", "Eldritch Blast", "Encode Thoughts", "Fire Bolt", "Friends",
  "Frostbite", "Green-Flame Blade", "Guidance", "Gust", "Infestation", "Light", "Lightning Lure",
  "Mage Hand", "Magic Stone", "Mending", "Message", "Mind Sliver", "Minor Illusion", "Mold Earth",
  "Poison Spray", "Prestidigitation", "Primal Savagery", "Produce Flame", "Ray of Frost", "Resistance", 
  "Sacred Flame", "Sapping Sting", "Shape Water", "Shillelagh", "Shocking Grasp", "Spare the Dying", 
  "Sword Burst", "Thaumaturgy", "Thorn Whip", "Thunderclap", "Toll the Dead", "True Strike", "Vicious Mockery",
  "Word of Radiance", "Absorb Elements", "Alarm", "Animal Friendship", "Armor of Agathys", "Arms of Hadar",
  "Bane", "Beast Bond", "Bless", "Burning Hands", "Catapult", "Cause Fear", "Ceremony", 
  "Chaos Bolt", "Charm Person", "Chromatic Orb", "Color Spray", "Command", "Compelled Duel", 
  "Comprehend Languages", "Create or Destroy Water", "Cure Wounds", "Detect Evil and Good", "Detect Magic",
  "Detect Poison and Disease", "Disguise Self", "Dissonant Whispers", "Distort Value", "Divine Favor",
  "Earth Tremor", "Ensnaring Strike", "Entangle", "Expeditious Retreat", "Faerie Fire", "False Life",
  "Feather Fall", "Find Familiar", "Floating Disk", "Fog Cloud", "Frost Fingers", "Gift of Alacrity",
  "Goodberry", "Grease", "Guiding Bolt", "Hail of Thorns", "Healing Word", "Hellish Rebuke", "Heroism",
  "Hex", "Hideous Laughter", "Hunters Mark", "Ice Knife", "Identify", "Illusory Script", "Inflict Wounds",
  "Jims Magic Missile", "Jump", "Longstrider", "Mage Armor", "Magic Missile", "Magnify Gravity",
  "Protection from Evil and Good", "Purify Food and Drink", "Ray of Sickness", "Sanctuary", "Searing Smite",
  "Shield", "Shield of Faith", "Silent Image", "Silvery Barbs", "Sleep", "Snare", "Speak with Animals", 
  "Tashas Hideous Laughter", "Tashas Caustic Brew", "Tensers Floating Disk", "Thunderous Smite", "Thunderwave",
  "Unseen Servant", "Witch Bolt", "Wrathful Smite","Zephyr Strike",
  "Acid Arrow", "Aganazzars Scorcher", "Aid", "Air Bubble", "Alter Self",
  "Animal Messenger", "Arcane Lock", "Arcanists Magic Aura", "Augury", "Barkskin",
  "Beast Sense", "Blindness/Deafness", "Blur", "Borrowed Knowledge", "Branding Smite",
  "Calm Emotions", "Cloud of Daggers", "Continual Flame", "Cordon of Arrows", "Crown of Madness",
  "Darkness", "Darkvision", "Detect Thoughts", "Dragons Breath", "Dust Devil",
  "Earthbind", "Enhance Ability", "Enlarge/Reduce", "Enthrall", "Find Steed",
  "Find Traps", "Flame Blade", "Flaming Sphere", "Flock of Familiars", "Fortunes Favor",
  "Gentle Repose", "Gift of Gab", "Gust of Wind", "Healing Spirit", "Heat Metal",
  "Hold Person", "Immovable Object", "Invisibility", "Jims Glowing Coin", "Kinetic Jaunt",
  "Knock", "Lesser Restoration", "Levitate", " Locate Animals or Plants", "Locate Object",
  "Magic Mouth", "Magic Weapon", "Maximilians Earthen Grasp", "Melfs Acid Arrow", "Mind Spike",
  "Mirror Image", "Misty Step", "Moonbeam", "Nathairs Mischief", "Nystuls Magic Aura",
  "Pass without Trace", "Phantasmal Force", "Prayer of Healing", "Protection from Poison", "Pyrotechnics",
  "Ray of Enfeeblement", "Rimes Binding Ice", "Rope Trick", "Scorching Ray", "See Invisibility",
  "Shadow Blade", "Shatter", "Silence", "Skywrite", "Snillocs Snowball Swarm", "Spider Climb",
  "Spike Growth", "Spiritual Weapon", "Suggestion", "Summon Beast", "Tashas Mind Whip", "Vortex Warp",
  "Warding Bond", "Warding Wind", "Web", "Wither and Bloom", "Wristpocket", "Zone of Truth",
  "Animate Dead", "Ashardalons Stride", "Aura of Vitality", "Beacon of Hope", "Bestow Curse",
  "Blinding Smite", "Blink", "Call Lightning", "Catnap", "Clairvoyance",
  "Conjure Animals", "Conjure Barrage", "Counterspell", "Create Food and Water", "Crusaders Mantle",
  "Daylight", "Dispel Magic", "Elemental Weapon", "Enemies Abound", "Erupting Earth",
  "Fast Friends", "Fear", "Feign Death", "Fireball", "Flame Arrows",
  "Fly", "Freedom of the Waves", "Galders Tower", "Gaseous Form", "Glyph of Warding",
  "Haste", "Hunger of Hadar", "Hypnotic Pattern", "Incite Greed", "Intellect Fortress",
  "Leomunds Tiny Hut", "Life Transference", "Lightning Arrow", "Lightning Bolt", "Magic Circle",
  "Major Image", "Mass Healing Word", "Meld into Stone", " Melfs Minute Meteors", "Motivational Speech",
  "Nondetection", "Phantom Steed", "Plant Growth", "Protection from Energy", "Pulse Wave",
  "Remove Curse", "Revivify", "Sending", "Sleet Storm", "Slow",
  "Speak with Dead", "Speak with Plants", "Spirit Guardians", "Spirit Shroud", "Stinking Cloud",
  "Summon Fey", "Summon Lesser Demon", "Summon Shadowspawn", "Summon Undead", "Thunder Step",
  "Tidal Wave", "Tiny Hut", "Tiny Servant", "Tongues", "Vampiric Touch",
  "Wall of Sand", "Wall of Water", "Water Breathing", "Water Walk", "Wind Wall",
  "Arcane Eye", "Aura of Life", "Aura of Purity", "Banishment", "Black Tentacles",
  "Blight", "Charm Monster", "Compulsion", "Confusion", "Conjure Minor Elementals",
  "Conjure Woodland Beings", "Control Water", "Death Ward", "Dimension Door", "Divination",
  "Dominate Beast", "Elemental Bane", "Evards black tentacles", "Fabricate", "Faithful Hound",
  "Find Greater Steed", "Fire Shield", "Freedom of Movement", "Galders Speedy Courier", "Giant Insect",
  "Grasping Vine", "Gravity Sinkhole", "Greater Invisibility", "Guardian of Faith", "Guardian of Nature",
  "Hallucinatory Terrain", "Ice Storm", "Leomunds secret chest", "Locate Creature", "Mordenkainens Faithful Hound",
  "Mordenkainens Private Sanctum", "Otilukes Resilient Sphere", "Phantasmal Killer", "Polymorph", "Private Sanctum",
  "Raulothims Psychic Lance", "Resilient Sphere", "Secret Chest", "Shadow of Moil", "Sickening Radiance",
  "Staggering Smite", "Stone Shape", "Stoneskin", "Storm Sphere", "Summon Aberration",
  "Summon Construct", "Summon Elemental", "Summon Greater Demon", "Vitriolic Sphere", "Wall of Fire",
  "Watery Sphere", "Animate Objects", "Antilife Shell", "Arcane Hand", "Awaken", "Banishing Smite",
  "Bigbys Hand", "Circle of Power", "Cloudkill", "Commune", "Commune with Nature",
  "Cone of Cold", "Conjure Elemental", "Conjure Volley", "Contact Other Plane", "Contagion",
  "Control Winds", "Create Spelljamming Helm", "Creation", "Danse Macabre", "Dawn",
  "Destructive Wave", "Dispel Evil and Good", "Dominate Person", "Dream", "Enervation",
  "Far Step", "Flame Strike", "Freedom of the Winds", "Geas", "Greater Restoration",
  "Hallow", "Hold Monster", "Holy Weapon", "Immolation", "Infernal Calling",
  "Insect Plague", "Legend Lore", "Maelstrom", "Mass Cure Wounds", "Mislead",
  "Modify Memory", "Negative Energy Flood", "Passwall", "Planar Binding", "Raise Dead",
  "Rarys Telepathic Bond", "Reincarnate", "Scrying", "Seeming", "Skill Empowerment",
  "Steel Wind Strike", "Summon Celestial", "Summon Draconic Spirit", "Swift Quiver", "Synaptic Static",
  "Telekinesis", "Telepathic Bond", "Teleportation Circle", "Temporal Shunt", "Transmute Rock",
  "Tree Stride", "Wall of Force", "Wall of Light", "Wall of Stone", "Wrath of Nature",
    ];
    const randomIndex = Math.floor(Math.random() * spellWroughtTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Spellwrought Tattoo of (${spellWroughtTypes [randomIndex]})`
  }; 
}
},
    { range: [5, 5], item: "All-Purpose Tool" },
    { range: [6, 6], item: "Amulet of the Devout" },
    { range: [7, 7], item: "Arcane Grimoire" },
    { range: [8, 8], item: "Barrier Tattoo (rare)" },
    { range: [9, 9], item: "Bloodwell Vial" },
    { range: [10, 10], item: "Coiling Grasp Tattoo" },
    { range: [11, 11], item: "Eldritch Claw Tattoo" },
    { range: [12, 12], item: "Feywild Shard" },
    { range: [13, 13], item: "Guardian Emblem" },
    { range: [14, 14], item: "Moon Sickle" },
    { range: [15, 15], item: "Natures Mantle" },
    { range: [16, 16], item: "Rhythm-Makers Drum" },
    { range: [17, 17], item: "Alchemical Compendium" },
    { range: [18, 18], item: "Astral Shard" },
    { range: [19, 19], item: "Astromancy Archive" },
    { range: [20, 20], item: "Atlas of Endless Horizons" },
    { range: [21, 21], item: "Bell Branch" },
    { range: [22, 22], item: "Devotees Censer" },
    { range: [23, 23], item: "Duplicitous Manuscript" },
    { range: [24, 24], item: () => {
      const shardElementTypes = [
        "Air", "Earth", "Fire", "Water",
      ];
    const randomIndex = Math.floor(Math.random() * shardElementTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Elemental Essence Shard, (${shardElementTypes [randomIndex]})`
  }; 
}
}, 
    { range: [25, 25], item: "Far Realm Shard" },
    { range: [26, 26], item: "Fulminating Treatise" },
    { range: [27, 27], item: "Heart Weavers Primer" },
    { range: [28, 28], item: "Libram of Souls and Flesh" },
    { range: [29, 29], item: "Lyre of Building" },
    { range: [30, 30], item: () => {
      const shardAlignmentTypes = [
        "Lawful", "Chaotic", "Good", "Evil",
      ];
    const randomIndex = Math.floor(Math.random() * shardAlignmentTypes .length);
    return {      
    roll: randomIndex + 1,
    item: `Outer Essence Shard, (${shardAlignmentTypes [randomIndex]})`
  }; 
}
}, 
    { range: [31, 31], item: "Planecallers Codex" },
    { range: [32, 32], item: "Protective Verses" },
    { range: [33, 33], item: "Revelers Concertina" },
    { range: [34, 34], item: "Shadowfell Brand Tattoo" },
    { range: [35, 35], item: "Shadowfell Shard" },
    { range: [36, 36], item: () => {
          const resistanceTypes = [
              "Acid", "Cold", "Fire", "Force", "Lightning",
              "Necrotic", "Poison", "Psychic", "Radiant", "Thunder",
        ];
        const randomIndex = Math.floor(Math.random() * resistanceTypes .length);
        return {      
        roll: randomIndex + 1,
        item: `Absorbing Tattoo, (${resistanceTypes [randomIndex]}) resistance`
      }; 
    }
    }, 
        { range: [37, 37], item: "Cauldron of Rebirth" },
        { range: [38, 38], item: "Crystalline Chronicle" },
        { range: [39, 39], item: "Ghost Step Tattoo" },
        { range: [40, 40], item: "Lifewell Tattoo" },
        { range: [41, 41], item: "Blood Fury Tattoo" },
        { range: [42, 42],
    item: () => {
    const artifactMinorBeneficial = [
      { range: [1, 20], item: "While attuned to the artifact, you gain proficiency in one skill of the DMs choice" },
      { range: [21, 30], item: "While attuned to the artifact, you are immune to disease." },
      { range: [31, 40], item: "While attuned to the artifact, you cant be charmed or frightened." },
      { range: [41, 50], item: "While attuned to the artifact, you have resistance against one damage type of the DMs choice." },
      { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one cantrip (chosen by the DM) from it." },
      { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 1st-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [71, 80], item: "While attuned to the artifact, you can use an action to cast one 2nd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [81, 90], item: "While attuned to the artifact, you can use an action to cast one 3rd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [91, 100], item: "While attuned to the artifact, you gain a +1 bonus to Armor Class." },
    ];

    const artifactMajorBeneficial = [
      { range: [1, 20], item: "While attuned to the artifact, one of your ability scores (DMs choice) increases by 2, to a maximum of 24." },
      { range: [21, 30], item: "While attuned to the artifact, you regain 1d6 hit points at the start of your turn if you have at least 1 hit point." },
      { range: [31, 40], item: "When you hit with a weapon attack while attuned to the artifact, the target takes an extra 1d6 damage of the weapons type." },
      { range: [41, 50], item: "While attuned to the artifact, your walking speed increases by 10 feet." },
      { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one 4th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 5th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [71, 80], item: "While attuned to the artifact, you can use an action to cast one 6th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [81, 90], item: "While attuned to the artifact, you can use an action to cast one 7th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
      { range: [91, 100], item: "While attuned to the artifact, you cant be blinded, deafened, petrified, or stunned." },  
    ];

    const artifactMinorDetrimental = [
      { range: [1, 5], item: "While attuned to the artifact, you have disadvantage on saving throws against spells." },
      { range: [6, 10], item: "The first time you touch a gem or piece of jewelry while attuned to this artifact, the value of the gem or jewelry is reduced by half." },
      { range: [11, 15], item: "While attuned to the artifact, you are blinded when you are more than 10 feet away from it." },
      { range: [16, 20], item: "While attuned to the artifact, you have disadvantage on saving throws against poison." },
      { range: [21, 30], item: "While attuned to the artifact, you emit a sour stench noticeable from up to 10 feet away." },
      { range: [31, 35], item: "While attuned to the artifact, all holy water within 10 feet of you is destroyed" },
      { range: [36, 40], item: "While attuned to the artifact, you are physically ill and have disadvantage on any ability check or saving throw that uses Strength or Constitution." },
      { range: [41, 45], item: "While attuned to the artifact, your weight increases by 1d4 times 10 pounds." },
      { range: [46, 50], item: "While attuned to the artifact, your appearance changes as the DM decides." },
      { range: [51, 55], item: "While attuned to the artifact, you are deafened when you are more than 10 feet away from it." },
      { range: [56, 60], item: "While attuned to the artifact, your weight drops by 1d4 times 5 pounds." },
      { range: [61, 65], item: "While attuned to the artifact, you cant smell." },
      { range: [66, 70], item: "While attuned to the artifact, nonmagical flames are extinguished within 30 feet of you." },
      { range: [71, 80], item: "While you are attuned to the artifact, other creatures cant take short or long rests while within 300 feet of you." },
      { range: [81, 85], item: "While attuned to the artifact, you deal 1d6 necrotic damage to any plant you touch that isnt a creature." },
      { range: [86, 90], item: "While you are attuned to the artifact, animals within 30 feet of you are hostile toward you." },
      { range: [91, 95], item: "While attuned to the artifact, you must eat and drink six times the normal amount each day." },
      { range: [96, 100], item: "While you are attuned to the artifact, your flaw is amplified in a way determined by the DM." },  
    ];

    const numMinorBenefits = 2;
    const numMajorBenefits = 1;
    const numMinorDetriments = 1;

    const minorBenefits = rollOnTable(artifactMinorBeneficial, numMinorBenefits);
    const majorBenefit = rollOnTable(artifactMajorBeneficial, numMajorBenefits);
    const minorDetriment = rollOnTable(artifactMinorDetrimental, numMinorDetriments);

    return {
    item:`Baba Yaga's Mortar and Pestle; <br>(${minorBenefits.join("<br>")}<br> ${majorBenefit}<br> ${minorDetriment})`
  }; 
}
}, 
    { range: [43, 43], 
    item: () => {
      const artifactMinorBeneficial = [
        { range: [1, 20], item: "While attuned to the artifact, you gain proficiency in one skill of the DMs choice" },
        { range: [21, 30], item: "While attuned to the artifact, you are immune to disease." },
        { range: [31, 40], item: "While attuned to the artifact, you cant be charmed or frightened." },
        { range: [41, 50], item: "While attuned to the artifact, you have resistance against one damage type of the DMs choice." },
        { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one cantrip (chosen by the DM) from it." },
        { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 1st-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [71, 80], item: "While attuned to the artifact, you can use an action to cast one 2nd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [81, 90], item: "While attuned to the artifact, you can use an action to cast one 3rd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [91, 100], item: "While attuned to the artifact, you gain a +1 bonus to Armor Class." },
      ];
  
      const artifactMajorBeneficial = [
        { range: [1, 20], item: "While attuned to the artifact, one of your ability scores (DMs choice) increases by 2, to a maximum of 24." },
        { range: [21, 30], item: "While attuned to the artifact, you regain 1d6 hit points at the start of your turn if you have at least 1 hit point." },
        { range: [31, 40], item: "When you hit with a weapon attack while attuned to the artifact, the target takes an extra 1d6 damage of the weapons type." },
        { range: [41, 50], item: "While attuned to the artifact, your walking speed increases by 10 feet." },
        { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one 4th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 5th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [71, 80], item: "While attuned to the artifact, you can use an action to cast one 6th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [81, 90], item: "While attuned to the artifact, you can use an action to cast one 7th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
          { range: [91, 100], item: "While attuned to the artifact, you cant be blinded, deafened, petrified, or stunned." },  
      ];
  
      const artifactMinorDetrimental = [
        { range: [1, 5], item: "While attuned to the artifact, you have disadvantage on saving throws against spells." },
        { range: [6, 10], item: "The first time you touch a gem or piece of jewelry while attuned to this artifact, the value of the gem or jewelry is reduced by half." },
        { range: [11, 15], item: "While attuned to the artifact, you are blinded when you are more than 10 feet away from it." },
        { range: [16, 20], item: "While attuned to the artifact, you have disadvantage on saving throws against poison." },
        { range: [21, 30], item: "While attuned to the artifact, you emit a sour stench noticeable from up to 10 feet away." },
        { range: [31, 35], item: "While attuned to the artifact, all holy water within 10 feet of you is destroyed" },
        { range: [36, 40], item: "While attuned to the artifact, you are physically ill and have disadvantage on any ability check or saving throw that uses Strength or Constitution." },
        { range: [41, 45], item: "While attuned to the artifact, your weight increases by 1d4 times 10 pounds." },
        { range: [46, 50], item: "While attuned to the artifact, your appearance changes as the DM decides." },
        { range: [51, 55], item: "While attuned to the artifact, you are deafened when you are more than 10 feet away from it." },
        { range: [56, 60], item: "While attuned to the artifact, your weight drops by 1d4 times 5 pounds." },
        { range: [61, 65], item: "While attuned to the artifact, you cant smell." },
        { range: [66, 70], item: "While attuned to the artifact, nonmagical flames are extinguished within 30 feet of you." },
        { range: [71, 80], item: "While you are attuned to the artifact, other creatures cant take short or long rests while within 300 feet of you." },
        { range: [81, 85], item: "While attuned to the artifact, you deal 1d6 necrotic damage to any plant you touch that isnt a creature." },
        { range: [86, 90], item: "While you are attuned to the artifact, animals within 30 feet of you are hostile toward you." },
        { range: [91, 95], item: "While attuned to the artifact, you must eat and drink six times the normal amount each day." },
        { range: [96, 100], item: "While you are attuned to the artifact, your flaw is amplified in a way determined by the DM." },  
      ];
  
      const numMinorBenefits = 2;
      const numMajorBenefits = 1;
      const numMinorDetriments = 1;
  
      const minorBenefits = rollOnTable(artifactMinorBeneficial, numMinorBenefits);
      const majorBenefit = rollOnTable(artifactMajorBeneficial, numMajorBenefits);
      const minorDetriment = rollOnTable(artifactMinorDetrimental, numMinorDetriments);
  
      return {
      item:`Crook of Rao; <br>(${minorBenefits.join("<br>")}<br>${majorBenefit}<br>${minorDetriment})`
    }; 
  }
  }, 
    { range: [44, 44], 
    item: () => {
      const artifactMinorBeneficial = [
        { range: [1, 20], item: "While attuned to the artifact, you gain proficiency in one skill of the DMs choice" },
        { range: [21, 30], item: "While attuned to the artifact, you are immune to disease." },
        { range: [31, 40], item: "While attuned to the artifact, you cant be charmed or frightened." },
        { range: [41, 50], item: "While attuned to the artifact, you have resistance against one damage type of the DMs choice." },
        { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one cantrip (chosen by the DM) from it." },
        { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 1st-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [71, 80], item: "While attuned to the artifact, you can use an action to cast one 2nd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [81, 90], item: "While attuned to the artifact, you can use an action to cast one 3rd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [91, 100], item: "While attuned to the artifact, you gain a +1 bonus to Armor Class." },
      ];
  
      const artifactMajorDetrimental = [
        { range: [1, 5], item: "While you are attuned to the artifact, your body rots over the course of four days, after which the rotting stops. You lose your hair by the end of day 1, finger tips and toe tips by the end of day 2, lips and nose by the end of day 3, and ears by the end of day 4. A regenerate spell restores lost body parts." },
        { range: [6, 10], item: "While you are attuned to the artifact, you determine your alignment daily at dawn by rolling a d6 twice. On the first roll, a 1 to 2 indicates lawful, 3 to 4 neutral, and 5 to 6 chaotic. On the second roll, a 1 to 2 indicates good, 3 to 4 neutral, and 5 to 6 evil." },
        { range: [11, 15], item: "When you first attune to the artifact, it gives you a quest determined by the DM. You must complete this quest as if affected by the geas spell. Once you complete the quest, you are no longer affected by this property." },
        { range: [16, 20], item: "The artifact houses a bodiless life force that is hostile toward you. Each time you use an action to use one of the artifacts properties, there is a 50 percent chance that the life force tries to leave the artifact and enter your body. If you fail a DC 20 Charisma saving throw, it succeeds, and you become an NPC under the DMs control until the intruding life force is banished using magic such as the dispel evil and good spell." },
        { range: [21, 25], item: "Creatures with a challenge rating of 0, as well as plants that arent creatures, drop to 0 hit points when within 10 feet of the artifact." },
        { range: [26, 30], item: "The artifact imprisons a death slaad (see the Monster Manual). Each time you use one of the artifacts properties as an action, the slaad has a 10 percent chance of escaping, whereupon it appears within 15 feet of you and attacks you." },
        { range: [31, 35], item: "While you are attuned to the artifact, creatures of a particular type other than humanoid (as chosen by the DM) are always hostile toward you." },
        { range: [36, 40], item: "The artifact dilutes magic potions within 10 feet of it, rendering them nonmagical." },
        { range: [41, 45], item: "The artifact erases magic scrolls within 10 feet of it, rendering them nonmagical." },
        { range: [46, 50], item: "Before using one of the artifacts properties as an action, you must use a bonus action to draw blood, either from yourself or from a willing or incapacitated creature within your reach, using a piercing or slashing melee weapon. The subject takes 1d4 damage of the appropriate type." },
        { range: [51, 60], item: "When you become attuned to the artifact, you gain a form of long-term madness (see 'Running the Game')." },
        { range: [61, 65], item: "You take 4d10 psychic damage when you become attuned to the artifact." },
        { range: [66, 70], item: "You take 8d10 psychic damage when you become attuned to the artifact." },
        { range: [71, 75], item: "Before you can become attuned to the artifact, you must kill a creature of your alignment." },
        { range: [76, 80], item: "When you become attuned to the artifact, one of your ability scores is reduced by 2 at random. A greater restoration spell restores the ability to normal." },
        { range: [81, 85], item: "Each time you become attuned to the artifact, you age 3d10 years. You must succeed on a DC 10 Constitution saving throw or die from the shock. If you die, you are instantly transformed into a wight (see the Monster Manual) under the DMs control that is sworn to protect the artifact." },
        { range: [86, 90], item: "While attuned to the artifact, you lose the ability to speak." },
        { range: [91, 95], item: "While attuned to the artifact, you have vulnerability to all damage." },
        { range: [96, 100], item: "When you become attuned to the artifact, there is a 10 percent chance that you attract the attention of a god that sends an avatar to wrest the artifact from you. The avatar has the same alignment as its creator and the statistics of an empyrean (see the Monster Manual). Once it obtains the artifact, the avatar vanishes." },
          ];
  
      const artifactMinorDetrimental = [
        { range: [1, 5], item: "While attuned to the artifact, you have disadvantage on saving throws against spells." },
        { range: [6, 10], item: "The first time you touch a gem or piece of jewelry while attuned to this artifact, the value of the gem or jewelry is reduced by half." },
        { range: [11, 15], item: "While attuned to the artifact, you are blinded when you are more than 10 feet away from it." },
        { range: [16, 20], item: "While attuned to the artifact, you have disadvantage on saving throws against poison." },
        { range: [21, 30], item: "While attuned to the artifact, you emit a sour stench noticeable from up to 10 feet away." },
        { range: [31, 35], item: "While attuned to the artifact, all holy water within 10 feet of you is destroyed" },
        { range: [36, 40], item: "While attuned to the artifact, you are physically ill and have disadvantage on any ability check or saving throw that uses Strength or Constitution." },
        { range: [41, 45], item: "While attuned to the artifact, your weight increases by 1d4 times 10 pounds." },
        { range: [46, 50], item: "While attuned to the artifact, your appearance changes as the DM decides." },
        { range: [51, 55], item: "While attuned to the artifact, you are deafened when you are more than 10 feet away from it." },
        { range: [56, 60], item: "While attuned to the artifact, your weight drops by 1d4 times 5 pounds." },
        { range: [61, 65], item: "While attuned to the artifact, you cant smell." },
        { range: [66, 70], item: "While attuned to the artifact, nonmagical flames are extinguished within 30 feet of you." },
        { range: [71, 80], item: "While you are attuned to the artifact, other creatures cant take short or long rests while within 300 feet of you." },
        { range: [81, 85], item: "While attuned to the artifact, you deal 1d6 necrotic damage to any plant you touch that isnt a creature." },
        { range: [86, 90], item: "While you are attuned to the artifact, animals within 30 feet of you are hostile toward you." },
        { range: [91, 95], item: "While attuned to the artifact, you must eat and drink six times the normal amount each day." },
        { range: [96, 100], item: "While you are attuned to the artifact, your flaw is amplified in a way determined by the DM." },  
      ];
  
      const numMinorBenefits = 2;
      const numMajorDetrimental = 1;
      const numMinorDetriments = 1;
  
      const minorBenefits = rollOnTable(artifactMinorBeneficial, numMinorBenefits);
      const majorDetriment = rollOnTable(artifactMajorDetrimental, numMajorDetrimental);
      const minorDetriment = rollOnTable(artifactMinorDetrimental, numMinorDetriments);
  
      return {
      item:`Demonomicon of Iggwilv; <br>(${minorBenefits.join(", ")}<br>${majorDetriment}<br>${minorDetriment})`
    }; 
  }
  }, 
    { range: [45, 45], 
    item: () => {
      const artifactMinorBeneficial = [
        { range: [1, 20], item: "While attuned to the artifact, you gain proficiency in one skill of the DMs choice" },
        { range: [21, 30], item: "While attuned to the artifact, you are immune to disease." },
        { range: [31, 40], item: "While attuned to the artifact, you cant be charmed or frightened." },
        { range: [41, 50], item: "While attuned to the artifact, you have resistance against one damage type of the DMs choice." },
        { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one cantrip (chosen by the DM) from it." },
        { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 1st-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [71, 80], item: "While attuned to the artifact, you can use an action to cast one 2nd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [81, 90], item: "While attuned to the artifact, you can use an action to cast one 3rd-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
        { range: [91, 100], item: "While attuned to the artifact, you gain a +1 bonus to Armor Class." },
      ];
    
      const artifactMinorDetrimental = [
        { range: [1, 5], item: "While attuned to the artifact, you have disadvantage on saving throws against spells." },
        { range: [6, 10], item: "The first time you touch a gem or piece of jewelry while attuned to this artifact, the value of the gem or jewelry is reduced by half." },
        { range: [11, 15], item: "While attuned to the artifact, you are blinded when you are more than 10 feet away from it." },
        { range: [16, 20], item: "While attuned to the artifact, you have disadvantage on saving throws against poison." },
        { range: [21, 30], item: "While attuned to the artifact, you emit a sour stench noticeable from up to 10 feet away." },
        { range: [31, 35], item: "While attuned to the artifact, all holy water within 10 feet of you is destroyed" },
        { range: [36, 40], item: "While attuned to the artifact, you are physically ill and have disadvantage on any ability check or saving throw that uses Strength or Constitution." },
        { range: [41, 45], item: "While attuned to the artifact, your weight increases by 1d4 times 10 pounds." },
        { range: [46, 50], item: "While attuned to the artifact, your appearance changes as the DM decides." },
        { range: [51, 55], item: "While attuned to the artifact, you are deafened when you are more than 10 feet away from it." },
        { range: [56, 60], item: "While attuned to the artifact, your weight drops by 1d4 times 5 pounds." },
        { range: [61, 65], item: "While attuned to the artifact, you cant smell." },
        { range: [66, 70], item: "While attuned to the artifact, nonmagical flames are extinguished within 30 feet of you." },
        { range: [71, 80], item: "While you are attuned to the artifact, other creatures cant take short or long rests while within 300 feet of you." },
        { range: [81, 85], item: "While attuned to the artifact, you deal 1d6 necrotic damage to any plant you touch that isnt a creature." },
        { range: [86, 90], item: "While you are attuned to the artifact, animals within 30 feet of you are hostile toward you." },
        { range: [91, 95], item: "While attuned to the artifact, you must eat and drink six times the normal amount each day." },
        { range: [96, 100], item: "While you are attuned to the artifact, your flaw is amplified in a way determined by the DM." },  
      ];
  
      const numMinorBenefits = 2;
      const numMinorDetriments = 2;
  
      const minorBenefits = rollOnTable(artifactMinorBeneficial, numMinorBenefits);
      const minorDetriment = rollOnTable(artifactMinorDetrimental, numMinorDetriments);
  
      return {
      item:`Lubas Tarokka of Souls; <br>(${minorBenefits.join("<br>")}<br>${minorDetriment.join("<br>")})`
    }; 
  }
  }, 

    { range: [46, 46], item: "Mighty Servant of Leuk-o" },
    { range: [47, 47], item: "Teeth of Dahlver-Nar" },
    ];

  const artifactMinorBeneficial = [
    { range: [1, 20], item: "While attuned to the artifact, you gain proficiency in one skill of the DMs choice" },
    { range: [21, 30], item: "While attuned to the artifact, you are immune to disease." },
    { range: [31, 40], item: "While attuned to the artifact, you cant be charmed or frightened." },
    { range: [41, 50], item: "While attuned to the artifact, you have resistance against one damage type of the DMs choice." },
    { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one cantrip (chosen by the DM) from it." },
    { range: [61, 70], item: "While attuned to the artifact, you can use an action to cast one 1st-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
    { range: [71, 80], item: "As 61 to 70 above, except the spell is 2nd level." },
    { range: [81, 90], item: "As 61 to 70 above, except the spell is 3rd level." },
    { range: [91, 100], item: "While attuned to the artifact, you gain a +1 bonus to Armor Class." },
      ];

  const artifactMajorBeneficial = [
    { range: [1, 20], item: "While attuned to the artifact, one of your ability scores (DMs choice) increases by 2, to a maximum of 24." },
    { range: [21, 30], item: "While attuned to the artifact, you regain 1d6 hit points at the start of your turn if you have at least 1 hit point." },
    { range: [31, 40], item: "When you hit with a weapon attack while attuned to the artifact, the target takes an extra 1d6 damage of the weapons type." },
    { range: [41, 50], item: "While attuned to the artifact, your walking speed increases by 10 feet." },
    { range: [51, 60], item: "While attuned to the artifact, you can use an action to cast one 4th-level spell (chosen by the DM) from it. After you cast the spell, roll a d6. On a roll of 1 to 5, you cant cast it again until the next dawn." },
    { range: [61, 70], item: "As 51 to 60 above, except the spell is 5th level." },
    { range: [71, 80], item: "As 51 to 60 above, except the spell is 6th level" },
    { range: [81, 90], item: "As 51 to 60 above, except the spell is 7th level" },
    { range: [91, 100], item: "While attuned to the artifact, you cant be blinded, deafened, petrified, or stunned." },
      ];

  const artifactMinorDetrimental = [
    { range: [1, 5], item: "While attuned to the artifact, you have disadvantage on saving throws against spells." },
    { range: [6, 10], item: "The first time you touch a gem or piece of jewelry while attuned to this artifact, the value of the gem or jewelry is reduced by half." },
    { range: [11, 15], item: "While attuned to the artifact, you are blinded when you are more than 10 feet away from it." },
    { range: [16, 20], item: "While attuned to the artifact, you have disadvantage on saving throws against poison." },
    { range: [21, 30], item: "While attuned to the artifact, you emit a sour stench noticeable from up to 10 feet away." },
    { range: [31, 35], item: "While attuned to the artifact, all holy water within 10 feet of you is destroyed" },
    { range: [36, 40], item: "While attuned to the artifact, you are physically ill and have disadvantage on any ability check or saving throw that uses Strength or Constitution." },
    { range: [41, 45], item: "While attuned to the artifact, your weight increases by 1d4 times 10 pounds." },
    { range: [46, 50], item: "While attuned to the artifact, your appearance changes as the DM decides." },
    { range: [51, 55], item: "While attuned to the artifact, you are deafened when you are more than 10 feet away from it." },
    { range: [56, 60], item: "While attuned to the artifact, your weight drops by 1d4 times 5 pounds." },
    { range: [61, 65], item: "While attuned to the artifact, you cant smell." },
    { range: [66, 70], item: "While attuned to the artifact, nonmagical flames are extinguished within 30 feet of you." },
    { range: [71, 80], item: "While you are attuned to the artifact, other creatures cant take short or long rests while within 300 feet of you." },
    { range: [81, 85], item: "While attuned to the artifact, you deal 1d6 necrotic damage to any plant you touch that isnt a creature." },
    { range: [86, 90], item: "While you are attuned to the artifact, animals within 30 feet of you are hostile toward you." },
    { range: [91, 95], item: "While attuned to the artifact, you must eat and drink six times the normal amount each day." },
    { range: [96, 100], item: "While you are attuned to the artifact, your flaw is amplified in a way determined by the DM." },
      ];

  const artifactMajorDetrimental = [
    { range: [1, 5], item: "While you are attuned to the artifact, your body rots over the course of four days, after which the rotting stops. You lose your hair by the end of day 1, finger tips and toe tips by the end of day 2, lips and nose by the end of day 3, and ears by the end of day 4. A regenerate spell restores lost body parts." },
    { range: [6, 10], item: "While you are attuned to the artifact, you determine your alignment daily at dawn by rolling a d6 twice. On the first roll, a 1 to 2 indicates lawful, 3 to 4 neutral, and 5 to 6 chaotic. On the second roll, a 1 to 2 indicates good, 3 to 4 neutral, and 5 to 6 evil." },
    { range: [11, 15], item: "When you first attune to the artifact, it gives you a quest determined by the DM. You must complete this quest as if affected by the geas spell. Once you complete the quest, you are no longer affected by this property." },
    { range: [16, 20], item: "The artifact houses a bodiless life force that is hostile toward you. Each time you use an action to use one of the artifacts properties, there is a 50 percent chance that the life force tries to leave the artifact and enter your body. If you fail a DC 20 Charisma saving throw, it succeeds, and you become an NPC under the DMs control until the intruding life force is banished using magic such as the dispel evil and good spell." },
    { range: [21, 25], item: "Creatures with a challenge rating of 0, as well as plants that arent creatures, drop to 0 hit points when within 10 feet of the artifact." },
    { range: [26, 30], item: "The artifact imprisons a death slaad (see the Monster Manual). Each time you use one of the artifacts properties as an action, the slaad has a 10 percent chance of escaping, whereupon it appears within 15 feet of you and attacks you." },
    { range: [31, 35], item: "While you are attuned to the artifact, creatures of a particular type other than humanoid (as chosen by the DM) are always hostile toward you." },
    { range: [36, 40], item: "The artifact dilutes magic potions within 10 feet of it, rendering them nonmagical." },
    { range: [41, 45], item: "The artifact erases magic scrolls within 10 feet of it, rendering them nonmagical." },
    { range: [46, 50], item: "Before using one of the artifacts properties as an action, you must use a bonus action to draw blood, either from yourself or from a willing or incapacitated creature within your reach, using a piercing or slashing melee weapon. The subject takes 1d4 damage of the appropriate type." },
    { range: [51, 60], item: "When you become attuned to the artifact, you gain a form of long-term madness (see 'Running the Game')." },
    { range: [61, 65], item: "You take 4d10 psychic damage when you become attuned to the artifact." },
    { range: [66, 70], item: "You take 8d10 psychic damage when you become attuned to the artifact." },
    { range: [71, 75], item: "Before you can become attuned to the artifact, you must kill a creature of your alignment." },
    { range: [76, 80], item: "When you become attuned to the artifact, one of your ability scores is reduced by 2 at random. A greater restoration spell restores the ability to normal." },
    { range: [81, 85], item: "Each time you become attuned to the artifact, you age 3d10 years. You must succeed on a DC 10 Constitution saving throw or die from the shock. If you die, you are instantly transformed into a wight (see the Monster Manual) under the DMs control that is sworn to protect the artifact." },
    { range: [86, 90], item: "While attuned to the artifact, you lose the ability to speak." },
    { range: [91, 95], item: "While attuned to the artifact, you have vulnerability to all damage." },
    { range: [96, 100], item: "When you become attuned to the artifact, there is a 10 percent chance that you attract the attention of a god that sends an avatar to wrest the artifact from you. The avatar has the same alignment as its creator and the statistics of an empyrean (see the Monster Manual). Once it obtains the artifact, the avatar vanishes." },
      ];

async function showItemsDialog(gpAmount, ppAmount, formattedItemTypes) {
  const dialogContent = `
    <div style="padding:10px;">
      <p>${cpAmount} GP:</p>
      <p>${epAmount} PP:</p>
      <p>${gpAmount} GP:</p>
      <p>${ppAmount} PP:</p>
      <p>Items:</p>
      <pre style="font-size:12px;max-height:200px;overflow-y:auto;">${JSON.stringify(formattedItemTypes, null, 2)}</pre>
      <p>Items Result:</p>
      <div style="border:1px solid black;padding:10px;margin-top:10px;font-size:12px;">
        ${formattedItemTypes.map((item) => item.image).join("")}
      </div>
    </div>
  `;

  new Dialog({
    title: "Items Result",
    content: dialogContent,
    buttons: {
      ok: {
        label: "Ok",
      },
    },
    default: "ok",
  }).render(true);
}

async function tashasMITreasureHoardCR17toPlus() {
  const gpAmount = Math.floor(Math.random(6 , 72) * 1000);
  const ppAmount = Math.floor(Math.random(8 , 48) * 1000);

  let items = [];
const secondaryRoll = Math.floor(Math.random() * 100) + 1;
  switch (true) {
      case secondaryRoll >= 1 && secondaryRoll <= 2:
        items = [...items, ...rollItems(1, 2, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(0, 1, tashasMITrareplus)];
        break;
      case secondaryRoll >= 3 && secondaryRoll <= 5:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)]; 
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 6 && secondaryRoll <= 8:
        items = [...items, ...rollItems(1, 10, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)]; 
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 9 && secondaryRoll <= 11:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)]; 
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 12 && secondaryRoll <= 14:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)];  
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 15 && secondaryRoll <= 22:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 23 && secondaryRoll <= 30:
        items = [...items, ...rollItems(1, 10, twentyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 31 && secondaryRoll <= 38:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 39 && secondaryRoll <= 46:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 47 && secondaryRoll <= 52:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 53 && secondaryRoll <= 58:
        items = [...items, ...rollItems(3, 18, twentyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 59 && secondaryRoll <= 63:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 64 && secondaryRoll <= 68:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 69:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 70:
        items = [...items, ...rollItems(1, 10, twentyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 71:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 72:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 73 && secondaryRoll <= 74:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 75 && secondaryRoll <= 76:
        items = [...items, ...rollItems(1, 10, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 77 && secondaryRoll <= 78:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 79 && secondaryRoll <= 80:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 81 && secondaryRoll <= 85:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 86 && secondaryRoll <= 90:
        items = [...items, ...rollItems(1, 10, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 91 && secondaryRoll <= 95:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      case secondaryRoll >= 96 && secondaryRoll <= 100:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        items = [...items, ...rollItems(0, 2, tashasMITrareplus)];
        break;
      default:
        break;
      }

    const subResults = items.map((item) => {
      if (typeof item.item === "function") {
        const { roll, item: subResultItem } = item.item();
        const name = subResultItem?.name;
        const uuid = subResultItem?.uuid;
        const image = subResultItem?.image;
        if (Array.isArray(subResultItem)) {
          const [minIndex, maxIndex] = subResultItem[""];
          const itemDescriptions = subResultItem.slice(1);
          const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
          return {
            roll,
            description: itemDescriptions[selectedIndex - 1],
            name: item.name ? item.name : 'N/A',
            uuid: item.uuid ? item.uuid : 'N/A',
            image: item.image ? item.image : 'N/A',
          };
        } else {
          return {
            roll,
            description: subResultItem,
            name: name ? name : 'N/A',
            uuid: uuid ? uuid : 'N/A',
            image: image ? image : 'N/A',
          };
        }
      } else {
        const { description, name, uuid, image } = item;
        return {
          description,
          name: name ? name : 'N/A',
          uuid: uuid ? uuid : 'N/A',
          image: image ? image : 'N/A',
        };
      }
    });
    
const formattedItems = subResults.map(subResult => {
  const { roll, name, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  const displayUuid = uuid ? uuid : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayUuid}${roll ? `: ${roll}` : ""}${!displayUuid ? name : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  const displayName = uuid ? uuid : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayName}${!displayName ? item.name : ""}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image, name }) => ({
    uuid,
    image,
    name,
  })),
  null,
  2
   )}<br>${formattedItems}<br>${nonSubItems.join()}`;
    
    if (typeof showItemsDialog === 'function') {
      const itemBox = document.createElement("div");
      itemBox.style.border = "1px solid black";
      itemBox.style.padding = "10px";
      itemBox.style.marginTop = "10px";
      itemBox.style.textAlign = "right"; 
      itemBox.innerHTML = messageContent;
    
      const buttons = {
        ok: {
          label: "OK",
        },
      };    
  new Dialog({
    title: "CR 17+ Hoard",
    content: "CR 17+ Hoard journal entry created.",
    buttons: buttons,
    default: "ok",
  }).render(true);

  const now = new Date();
  const year = now.getFullYear().toString().substring(2);
  const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                    ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                    :${now.getSeconds().toString().padStart(2, '0')}`;
    
const journalEntryName = `CR 17+ Hoard (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>
  ..............................................................................................<br>
  ............>___________________________________<..............<br>
  ...........>(VVVVVVVVVVVVV..I0I..VVVVVVVVVVVVV)<........<br>
  ..........>((###########((I#I(*,,17+,,*)I#I))############))<......<br>
  ............>(^^^^^^^^^^^^^^^^(((##I##)))^^^^^^^^^^^^^^^)<...........<br>
  ............>(^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^)<............<br>
  .............>((($*$*$$*$$*$*$$*$*$*$$*$$*$*$$*$*$$))<...........<br>
  ............>(($*$$$*$$*$*$$*$$$*$$$*$*$$$*$$*$$*$))<..........<br>
  ..........>((($$*$$*$*$$*$$$*$$*$*$$$$*$*$$*$$*$$$)))<.........<br>
  '.......>((###############(((((/ \\)))))###############))<.....'<br>
  .......>(#((*********************((((I))))*********************))#)<......<br>
  ......>(((((***************************************************)))))<.....<br>
  .......>(((*****************************************************)))<......<br>
  ........>(((***************************************************)))<.......<br>
  .........>((***************************************************))<........<br>
  ..........>(####################################).........<br>
  ..............................................................................................<br>
  ..............................................................................................<br>`,
  Permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});


if (!game.user.isGM) {
  await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
  const journalEntry = await game.journal.getName(journalEntryName);
  if (journalEntry) {
    journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
    game.socket.emit("createJournalEntry", { journalEntry });
  }
}}}

window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
      }
    }
  };
  xhr.open('GET', path, true);
  xhr.send();
});

async function treasureHoardCR17toPlus() {
  const gpAmount = Math.floor(Math.random(6 , 72) * 1000);
  const ppAmount = Math.floor(Math.random(8 , 48) * 1000);

  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
      case secondaryRoll >= 1 && secondaryRoll <= 2:
        items = [...items, ...rollItems(1, 2, twofiftygpartobjectsTypesW)];
        break;
      case secondaryRoll >= 3 && secondaryRoll <= 5:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)]; 
        break;
      case secondaryRoll >= 6 && secondaryRoll <= 8:
        items = [...items, ...rollItems(1, 10, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)]; 
        break;
      case secondaryRoll >= 9 && secondaryRoll <= 11:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)]; 
        break;
      case secondaryRoll >= 12 && secondaryRoll <= 14:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableC)];  
        break;
      case secondaryRoll >= 15 && secondaryRoll <= 22:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        break;
      case secondaryRoll >= 23 && secondaryRoll <= 30:
        items = [...items, ...rollItems(1, 10, twentyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        break;
      case secondaryRoll >= 31 && secondaryRoll <= 38:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        break;
      case secondaryRoll >= 39 && secondaryRoll <= 46:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableD)];
        break;
      case secondaryRoll >= 47 && secondaryRoll <= 52:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        break;
      case secondaryRoll >= 53 && secondaryRoll <= 58:
        items = [...items, ...rollItems(3, 18, twentyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        break;
      case secondaryRoll >= 59 && secondaryRoll <= 63:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        break;
      case secondaryRoll >= 64 && secondaryRoll <= 68:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableE)];
        break;
      case secondaryRoll >= 69:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        break;
      case secondaryRoll >= 70:
        items = [...items, ...rollItems(1, 10, twentyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        break;
      case secondaryRoll >= 71:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        break;
      case secondaryRoll >= 72:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        break;
      case secondaryRoll >= 73 && secondaryRoll <= 74:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        break;
      case secondaryRoll >= 75 && secondaryRoll <= 76:
        items = [...items, ...rollItems(1, 10, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        break;
      case secondaryRoll >= 77 && secondaryRoll <= 78:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        break;
      case secondaryRoll >= 79 && secondaryRoll <= 80:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableH)];
        break;
      case secondaryRoll >= 81 && secondaryRoll <= 85:
        items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        break;
      case secondaryRoll >= 86 && secondaryRoll <= 90:
        items = [...items, ...rollItems(1, 10, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        break;
      case secondaryRoll >= 91 && secondaryRoll <= 95:
        items = [...items, ...rollItems(1, 4, seventyfivehundredgpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        break;
      case secondaryRoll >= 96 && secondaryRoll <= 100:
        items = [...items, ...rollItems(1, 8, fivethousandgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableI)];
        break;
      default:
        break;
      }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});
      
  const formattedItems = subResults.map(subResult => {
    const { roll, name, uuid, image } = subResult;
    const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
    const displayUuid = uuid ? uuid : '';
    return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayUuid}${roll ? `: ${roll}` : ""}${!displayUuid ? name : ""}</div></span>`;
  }).join("; ");
  
  const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
    const { uuid, image } = item;
    const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
    const displayName = uuid ? uuid : '';
    return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayName}${!displayName ? item.name : ""}</div></span>`;
  });
  
  const messageContent = `GP: ${gpAmount}<br>PP: ${ppAmount}<br>Inventory:;${formattedItems}`;
      
      if (typeof showItemsDialog === 'function') {
        const itemBox = document.createElement("div");
        itemBox.style.border = "1px solid black";
        itemBox.style.padding = "10px";
        itemBox.style.marginTop = "10px";
        itemBox.style.textAlign = "right"; 
        itemBox.innerHTML = messageContent;
      
        const buttons = {
          ok: {
            label: "OK",
          },
        };    
    new Dialog({
    title: "CR 17+ Hoard",
    content: "CR 17+ Hoard, journal entry created.",
    buttons: buttons,
    default: "ok",
  }).render(true);

  const now = new Date();
  const year = now.getFullYear().toString().substring(2);
  const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                    ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                    :${now.getSeconds().toString().padStart(2, '0')}`;
    
const journalEntryName = `CR 17+ Hoard (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });
                        
  if (!game.user.isGM) {
  await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
  } else {
  const journalEntry = await game.journal.getName(journalEntryName);
  if (journalEntry) {
  journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
  game.socket.emit("createJournalEntry", { journalEntry });
  }
  }}
              
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
  try {
  const div = document.createElement('div');
  div.innerHTML = xhr.responseText;
  document.body.appendChild(div);
  } catch (e) {
  console.error(e);
  }
  }
  };
  xhr.open('GET', path, true);
  xhr.send();
  })};
  
async function rollHoardTreasure(crRange) {
  let hoard;
  switch (crRange) {
    case "0-4":
      if (!toggleTashas) {
        hoard = treasureHoardCR0to4();
      } else {
        hoard = tashasMITreasureHoardCR0to4();
      }
      break;
    case "5-10":
      if (!toggleTashas) {
        hoard = treasureHoardCR5to10();
      } else {
        hoard = tashasMITreasureHoardCR5to10();
      }
      break;
    case "11-16":
      if (!toggleTashas) {
        hoard = treasureHoardCR11to16();
      } else {
        hoard = tashasMITreasureHoardCR11to16();
      }
      break;
    case "17+":
      if (!toggleTashas) {
        hoard = treasureHoardCR17toPlus();
      } else {
        hoard = tashasMITreasureHoardCR17toPlus();
      }
      break;
    default:
      break;
  }
  const messageContent = generateHoardTreasure(hoard, crRange);
  await ChatMessage.create({ content: messageContent });
}

    
function generateHoardTreasure(crRange, items = []) {
  const treasure = [];
  let cpAmount = 0;
  let spAmount = 0;
  let epAmount = 0;
  let gpAmount = 0;
  let ppAmount = 0;

  if (crRange >= 0 && crRange <= 4) {
    cpAmount = Math.floor(Math.random() * 101);
    spAmount = Math.floor(Math.random() * 21);
    epAmount = Math.floor(Math.random() * 7);
    gpAmount = Math.floor(Math.random() * 31);
    ppAmount = Math.floor(Math.random() * 5);
  }

  if (cpAmount > 0) treasure.push(`${cpAmount} CP`);
  if (spAmount > 0) treasure.push(`${spAmount} SP`);
  if (epAmount > 0) treasure.push(`${epAmount} EP`);
  if (gpAmount > 0) treasure.push(`${gpAmount} GP`);
  if (ppAmount > 0) treasure.push(`${ppAmount} PP`);

  // Get the total amount of each currency
  const totalCP = cpAmount;
  const totalSP = cpAmount / 10 + spAmount;
  const totalEP = (cpAmount + spAmount) / 50 + epAmount;
  const totalGP = (cpAmount + spAmount + epAmount) / 100 + gpAmount;
  const totalPP = (cpAmount + spAmount + epAmount + gpAmount) / 1000 + ppAmount;

  // Add the total amounts to the message content
let messageContent = treasure.join("<br>");
  if (totalCP > 0) messageContent += `<br>Total CP: ${totalCP}`;
  if (totalSP > 0) messageContent += `<br>Total SP: ${totalSP}`;
  if (totalEP > 0) messageContent += `<br>Total EP: ${totalEP}`;
  if (totalGP > 0) messageContent += `<br>Total GP: ${totalGP}`;
  if (totalPP > 0) messageContent += `<br>Total PP: ${totalPP}`;

  if (items.length > 0) messageContent += `<br>Items: ${treasure.join("<br>")}`;

  return messageContent;
}

async function treasureHoardCR0to4() {
  const cpAmount = Math.floor(Math.random(6 , 36) * 100);
  const spAmount = Math.floor(Math.random(3 , 18) * 100);
  const gpAmount = Math.floor(Math.random(2 , 12) * 10);

  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {

      case secondaryRoll >= 1 && secondaryRoll <= 6:
        items = [...items, ...rollItems(1, 2, tengpgemstonesTypesW)];
        break;
      case secondaryRoll >= 7 && secondaryRoll <= 16:
        items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
        break;
      case secondaryRoll >= 17 && secondaryRoll <= 26:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        break;
      case secondaryRoll >= 27 && secondaryRoll <= 36:
        items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
        break;
      case secondaryRoll >= 37 && secondaryRoll <= 44:
        items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 45 && secondaryRoll <= 52:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 53 && secondaryRoll <= 60:
        items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 61 && secondaryRoll <= 65:
        items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableB)];
        break;
      case secondaryRoll >= 66 && secondaryRoll <= 70:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableB)];
        break;
      case secondaryRoll >= 71 && secondaryRoll <= 75:
        items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableB)];
        break;
      case secondaryRoll >= 76 && secondaryRoll <= 78:
        items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableC)];
        break;
      case secondaryRoll >= 79 && secondaryRoll <= 80:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableC)];
        break;
      case secondaryRoll >= 81 && secondaryRoll <= 85:
        items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableC)];
        break;
      case secondaryRoll >= 86  && secondaryRoll >= 86 && secondaryRoll <= 92:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableF)];
        break;
      case secondaryRoll >= 93 && secondaryRoll <= 97:
        items =  [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableF)];
        break;
      case secondaryRoll >= 98 && secondaryRoll <= 99:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableG)];
        break;
      case secondaryRoll === 100:
        items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableG)];
        break;
      default:
        break;
    }

    const subResults = items.map((item) => {
      if (typeof item.item === "function") {
        const { roll, item: subResultItem } = item.item();
        const name = subResultItem?.name;
        const uuid = subResultItem?.uuid;
        const image = subResultItem?.image;
        if (Array.isArray(subResultItem)) {
          const [minIndex, maxIndex] = subResultItem[""];
          const itemDescriptions = subResultItem.slice(1);
          const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
          return {
            roll,
            description: itemDescriptions[selectedIndex - 1],
            name: item.name ? item.name : 'N/A',
            uuid: item.uuid ? item.uuid : 'N/A',
            image: item.image ? item.image : 'N/A',
          };
        } else {
          return {
            roll,
            description: subResultItem,
            name: name ? name : 'N/A',
            uuid: uuid ? uuid : 'N/A',
            image: image ? image : 'N/A',
          };
        }
      } else {
        const { description, name, uuid, image } = item;
        return {
          description,
          name: name ? name : 'N/A',
          uuid: uuid ? uuid : 'N/A',
          image: image ? image : 'N/A',
        };
      }
    });
    
const formattedItems = subResults.map(subResult => {
  const { roll, name, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  const displayUuid = uuid ? uuid : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayUuid}${roll ? `: ${roll}` : ""}${!displayUuid ? name : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  const displayName = uuid ? uuid : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayName}${!displayName ? item.name : ""}</div></span>`;
});

const messageContent = `CP: ${cpAmount}<br>SP: ${spAmount}<br>GP: ${gpAmount}<br>Inventory:;${formattedItems}`;
    
    if (typeof showItemsDialog === 'function') {
      const itemBox = document.createElement("div");
      itemBox.style.border = "1px solid black";
      itemBox.style.padding = "10px";
      itemBox.style.marginTop = "10px";
      itemBox.style.textAlign = "right"; 
      itemBox.innerHTML = messageContent;
    
      const buttons = {
        ok: {
          label: "OK",
        },
      };    
  new Dialog({
  title: "CR 0 to 4 Treasure Hoard",
  content: "CR 0 to 4 Treasure Hoard Journal Entry Created",
  buttons: buttons,
  default: "ok",
}).render(true);
}

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;


const journalEntryName = `CR 0 to 4 Treasure Hoard (${timeStamp})`;
await JournalEntry.create({
name: journalEntryName,
content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});
                      
if (!game.user.isGM) {
await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
const journalEntry = await game.journal.getName(journalEntryName);
if (journalEntry) {
journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
game.socket.emit("createJournalEntry", { journalEntry });
}
}}
            
window.addEventListener('load', function() {
const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
const xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
if (xhr.readyState === 4 && xhr.status === 200) {
try {
const div = document.createElement('div');
div.innerHTML = xhr.responseText;
document.body.appendChild(div);
} catch (e) {
console.error(e);
}
}
};
xhr.open('GET', path, true);
xhr.send();
});

async function tashasMITreasureHoardCR0to4() {
  const cpAmount = Math.floor(Math.random(6 , 36) * 100);
  const spAmount = Math.floor(Math.random(3 , 18) * 100);
  const gpAmount = Math.floor(Math.random(2 , 12) * 10);

  let items = [];
  const secondaryRoll = roll(1, 100);
  switch (true) {
case secondaryRoll >= 1 && secondaryRoll <= 6:
  items = [...items, ...rollItems(1, 2, tengpgemstonesTypesW)];
  if (Math.random() < 0.25) {
    items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
  }
  break;
    case secondaryRoll >= 7 && secondaryRoll <= 16:
      items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
      if (Math.random() < 0.25) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 17 && secondaryRoll <= 26:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      if (Math.random() < 0.25) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 27 && secondaryRoll <= 36:
      items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
      if (Math.random() < 0.25) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 37 && secondaryRoll <= 44:
      items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      if (Math.random() < 0.25) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 45 && secondaryRoll <= 52:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      if (Math.random() < 0.25) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 53 && secondaryRoll <= 60:
      items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      if (Math.random() < 0.5) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 61 && secondaryRoll <= 65:
      items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      if (Math.random() < 0.5) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 66 && secondaryRoll <= 70:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableB)];
      if (Math.random() < 0.5) {
        items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      }
      break;
    case secondaryRoll >= 71 && secondaryRoll <= 75:
      items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableB)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 76 && secondaryRoll <= 78:
      items = [...items, ...rollItems(2, 12, tengpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableC)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 79 && secondaryRoll <= 80:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableC)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 81 && secondaryRoll <= 85:
      items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableC)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 86  && secondaryRoll >= 86 && secondaryRoll <= 92:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableF)];
      items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 93 && secondaryRoll <= 97:
      items =  [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableF)];
      items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 98 && secondaryRoll <= 99:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
      break;
    case secondaryRoll === 100:
      items = [...items, ...rollItems(2, 12, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      items = [...items, ...rollItems(2, 2, tashasMITuncommonTypes)];
      break;
    default:
      break;
  }

  const subResults = items
.filter((item) => typeof item.item === "function")
.map((item) => {
  const { roll, item: subResultItem } = item.item();
  if (Array.isArray(subResultItem)) {

    const [minIndex, maxIndex] = subResultItem[""];
    const itemDescriptions = subResultItem.slice(1);
    const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
    return `${roll}: ${itemDescriptions[selectedIndex - 1]}`;
  } else {

    return `${roll}: ${subResultItem}`;
  }
});
const formattedItems = subResults.join("<br>");

const messageContent = `CP: ${cpAmount}<br>SP: ${spAmount}<br>GP: ${gpAmount}<br>Items:${JSON.stringify(items, null, 2)}<br>${formattedItems}`;

if(typeof showItemsDialog === 'function') {
const itemBox = document.createElement("div");
itemBox.style.border = "1px solid black";
itemBox.style.padding = "10px";
itemBox.style.marginTop = "10px";
itemBox.innerHTML = messageContent;

const buttons = {
  ok: {
    label: "OK",
  },
};

new Dialog({
  title: "CR 0 to 4 Hoard",
  content: "CR 0 to 4 Hoard, journal entry created.",
  buttons: buttons,
  default: "ok",
}).render(true);

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `CR 0 to 4 Hoard (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>
  ..............................................................................................<br>
  ............>___________________________________<..............<br>
  ...........>(VVVVVVVVVVVVV..I0I..VVVVVVVVVVVVV)<........<br>
  ..........>((##########((I#I(*,,0-4,,*)I#I))###########))<......<br>
  ............>(^^^^^^^^^^^^^^^(((##I##)))^^^^^^^^^^^^^^^)<...........<br>
  ............>(^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^)<............<br>
  .............>((($*$*$$*$$*$*$$*$*$*$$*$$*$*$$*$*$$))<...........<br>
  ............>(($*$$$*$$*$*$$*$$$*$$$*$*$$$*$$*$$*$))<..........<br>
  ..........>((($$*$$*$*$$*$$$*$$*$*$$$$*$*$$*$$*$$$)))<.........<br>
  '.......>((###############(((((/ \\)))))###############))<.....'<br>
  .......>(#((*********************((((I))))*********************))#)<......<br>
  ......>(((((***************************************************)))))<.....<br>
  .......>(((*****************************************************)))<......<br>
  ........>(((***************************************************)))<.......<br>
  .........>((***************************************************))<........<br>
  ..........>(####################################).........<br>
  ..............................................................................................<br>
  ..............................................................................................<br>`,
  Permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});


if (!game.user.isGM) {
await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>") });
} else {
const journalEntry = await game.journal.getName(journalEntryName);
if (journalEntry) {
  journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
  game.socket.emit("createJournalEntry", { journalEntry });
}
}}}

  async function treasureHoardCR5to10() {
    const cpAmount = Math.floor(Math.random(2 , 12) * 100);
    const spAmount = Math.floor(Math.random(2 , 12) * 1000);
    const gpAmount = Math.floor(Math.random(6 , 36) * 100);
    const ppAmount = Math.floor(Math.random(3 , 18) * 10);
  
    let items = [];
    const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
      case secondaryRoll >= 1 && secondaryRoll <= 4:
        items = [...items, ...rollItems(1, 2, twentyfivegpartobjectsTypesW)];
        break;
      case secondaryRoll >= 5 && secondaryRoll <= 10:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        break;
      case secondaryRoll >= 11 && secondaryRoll <= 16:
        items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
        break;
      case secondaryRoll >= 17 && secondaryRoll <= 22:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        break;
      case secondaryRoll >= 23 && secondaryRoll <= 28:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        break;
      case secondaryRoll >= 29 && secondaryRoll <= 32:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 33 && secondaryRoll <= 36:
        items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 37 && secondaryRoll <= 40:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 41 && secondaryRoll <= 44:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 6, magicItemTableA)];
        break;
      case secondaryRoll >= 45 && secondaryRoll <= 49:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableB)];
        break;
      case secondaryRoll >= 50 && secondaryRoll <= 54:
        items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableB)];
        break;
      case secondaryRoll >= 55 && secondaryRoll <= 59:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableB)];
          break;
      case secondaryRoll >= 60 && secondaryRoll <= 63:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableB)];
        break;
      case secondaryRoll >= 64 && secondaryRoll <= 66:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableC)];
        break;
      case secondaryRoll >= 67 && secondaryRoll <= 69:
        items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableC)];
        break;
      case secondaryRoll >= 70 && secondaryRoll <= 72:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableC)];
        break;
      case secondaryRoll >= 73 && secondaryRoll <= 74:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableD)];
        break;
      case secondaryRoll >= 75 && secondaryRoll <= 76:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableD)];
        break;
      case secondaryRoll >= 77 && secondaryRoll <= 78:
        items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableD)];
        break;
      case secondaryRoll === 79:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableD)];
        break;
      case secondaryRoll === 80:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableD)];
        break;
      case secondaryRoll >= 81 && secondaryRoll <= 84:
        items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableF)];
        break;
      case secondaryRoll >= 85 && secondaryRoll <= 88:
        items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableF)];
        break;
      case secondaryRoll >= 89 && secondaryRoll <= 91:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableF)];
        break;
      case secondaryRoll >= 92 && secondaryRoll <= 94:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableF)];
        break;
      case secondaryRoll >= 95 && secondaryRoll <= 96:
         items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
          items = [...items, ...rollItems(1, 4, magicItemTableG)];
          break;
        case secondaryRoll === 99:
          items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
          items = [...items, ...rollItems(1, 4, magicItemTableG)];
          break;
        case secondaryRoll === 100:
          items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
          items = [...items, ...rollItems(1, 1, magicItemTableH)];
          break;
        default:
          break;
      }
    const subResults = items.map((item) => {
      if (typeof item.item === "function") {
        const { roll, item: subResultItem } = item.item();
        const name = subResultItem?.name;
        const uuid = subResultItem?.uuid;
        const image = subResultItem?.image;
        if (Array.isArray(subResultItem)) {
          const [minIndex, maxIndex] = subResultItem[""];
          const itemDescriptions = subResultItem.slice(1);
          const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
          return {
            roll,
            description: itemDescriptions[selectedIndex - 1],
            name: item.name ? item.name : 'N/A',
            uuid: item.uuid ? item.uuid : 'N/A',
            image: item.image ? item.image : 'N/A',
          };
        } else {
          return {
            roll,
            description: subResultItem,
            name: name ? name : 'N/A',
            uuid: uuid ? uuid : 'N/A',
            image: image ? image : 'N/A',
          };
        }
      } else {
        const { description, name, uuid, image } = item;
        return {
          description,
          name: name ? name : 'N/A',
          uuid: uuid ? uuid : 'N/A',
          image: image ? image : 'N/A',
        };
      }
    });
    
const formattedItems = subResults.map(subResult => {
  const { roll, name, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  const displayUuid = uuid ? uuid : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayUuid}${roll ? `: ${roll}` : ""}${!displayUuid ? name : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  const displayName = uuid ? uuid : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayName}${!displayName ? item.name : ""}</div></span>`;
});

const messageContent = `CP: ${cpAmount}<br>SP: ${spAmount}<br>GP: ${gpAmount}<br>PP: ${ppAmount}<br>Inventory:;${formattedItems}`;
    
    if (typeof showItemsDialog === 'function') {
      const itemBox = document.createElement("div");
      itemBox.style.border = "1px solid black";
      itemBox.style.padding = "10px";
      itemBox.style.marginTop = "10px";
      itemBox.style.textAlign = "right"; 
      itemBox.innerHTML = messageContent;
    
      const buttons = {
        ok: {
          label: "OK",
        },
      };    
  new Dialog({
    title: "CR 5 to 10 Hoard",
    content: "CR 5 to 10 Hoard, journal entry created.",
    buttons: buttons,
    default: "ok",
  }).render(true);

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `CR 5 to 10 Hoard (${timeStamp})`;
await JournalEntry.create({
name: journalEntryName,
content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});
                      
if (!game.user.isGM) {
await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
const journalEntry = await game.journal.getName(journalEntryName);
if (journalEntry) {
journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
game.socket.emit("createJournalEntry", { journalEntry });
}
}}
            
window.addEventListener('load', function() {
const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
const xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
if (xhr.readyState === 4 && xhr.status === 200) {
try {
const div = document.createElement('div');
div.innerHTML = xhr.responseText;
document.body.appendChild(div);
} catch (e) {
console.error(e);
}
}
};
xhr.open('GET', path, true);
xhr.send();
})};

async function tashasMITreasureHoardCR5to10() {
  const cpAmount = Math.floor(Math.random(2 , 12) * 100);
  const spAmount = Math.floor(Math.random(2 , 12) * 1000);
  const gpAmount = Math.floor(Math.random(6 , 36) * 100);
  const ppAmount = Math.floor(Math.random(3 , 18) * 10);

  let items = [];
  const secondaryRoll = roll(1, 100);
  switch (true) {
    case secondaryRoll >= 1 && secondaryRoll <= 4:
      items = [...items, ...rollItems(1, 2, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 5 && secondaryRoll <= 10:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 11 && secondaryRoll <= 16:
      items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 17 && secondaryRoll <= 22:
      items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 23 && secondaryRoll <= 28:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 29 && secondaryRoll <= 32:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 33 && secondaryRoll <= 36:
      items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 37 && secondaryRoll <= 40:
      items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 41 && secondaryRoll <= 44:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableA)];
      items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 45 && secondaryRoll <= 49:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableB)];
      items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 50 && secondaryRoll <= 54:
      items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableB)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 55 && secondaryRoll <= 59:
      items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableB)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
        break;
    case secondaryRoll >= 60 && secondaryRoll <= 63:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableB)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 64 && secondaryRoll <= 66:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableC)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 67 && secondaryRoll <= 69:
      items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableC)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 70 && secondaryRoll <= 72:
      items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableC)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 73 && secondaryRoll <= 74:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableD)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 75 && secondaryRoll <= 76:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      items = [...items, ...rollItems(0, 3, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 77 && secondaryRoll <= 78:
      items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll === 79:
      items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll === 80:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      items = [...items, ...rollItems(0, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 81 && secondaryRoll <= 84:
      items = [...items, ...rollItems(2, 8, twentyfivegpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableF)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 85 && secondaryRoll <= 88:
      items = [...items, ...rollItems(3, 18, fiftygpgemstoneTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableF)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 89 && secondaryRoll <= 91:
      items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableF)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 92 && secondaryRoll <= 94:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableF)];
      items = [...items, ...rollItems(1, 1, tashasMITuncommonTypes)];
      break;
    case secondaryRoll >= 95 && secondaryRoll <= 96:
       items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];

        break;
      case secondaryRoll === 99:
        items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
        items = [...items, ...rollItems(1, 4, magicItemTableG)];
        items = [...items, ...rollItems(0, 2, tashasMITuncommonTypes)];
        break;
      case secondaryRoll === 100:
        items = [...items, ...rollItems(3, 18, onehundredgpgemstonesTypesW)];
        items = [...items, ...rollItems(1, 1, magicItemTableH)];
        items = [...items, ...rollItems(1, 2, tashasMITuncommonTypes)];
        break;
      default:
        break;
    }
  const subResults = items
.filter((item) => typeof item.item === "function")
.map((item) => {
  const { roll, item: subResultItem } = item.item();
  if (Array.isArray(subResultItem)) {

    const [minIndex, maxIndex] = subResultItem[""];
    const itemDescriptions = subResultItem.slice(1);
    const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
    return `${roll}: ${itemDescriptions[selectedIndex - 1]}`;
  } else {

    return `${roll}: ${subResultItem}`;
  }
});
const formattedItems = subResults.join("<br>");

  const messageContent = `CP: ${cpAmount}<br>SP: ${spAmount}<br>GP: ${gpAmount}<br>PP: ${ppAmount}<br>Items:${JSON.stringify(items, null, 2)}<br>${formattedItems}`;

if(typeof showItemsDialog === 'function') {
const itemBox = document.createElement("div");
itemBox.style.border = "1px solid black";
itemBox.style.padding = "10px";
itemBox.style.marginTop = "10px";
itemBox.innerHTML = messageContent;

const buttons = {
  ok: {
    label: "OK",
  },
};

new Dialog({
  title: "CR 5 to 10 Hoard",
  content: "CR 5 to 10 Hoard, journal entry created.",
  buttons: buttons,
  default: "ok",
}).render(true);

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `CR 5 to 10 Hoard (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>
  ..............................................................................................<br>
  ............>___________________________________<..............<br>
  ...........>(VVVVVVVVVVVVV..I0I..VVVVVVVVVVVVV)<........<br>
  ..........>((##########((#I(*,5-10,*)I#))###########))<......<br>
  ............>(^^^^^^^^^^^^^^^(((##I##)))^^^^^^^^^^^^^^^)<...........<br>
  ............>(^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^)<............<br>
  .............>((($*$*$$*$$*$*$$*$*$*$$*$$*$*$$*$*$$))<...........<br>
  ............>(($*$$$*$$*$*$$*$$$*$$$*$*$$$*$$*$$*$))<..........<br>
  ..........>((($$*$$*$*$$*$$$*$$*$*$$$$*$*$$*$$*$$$)))<.........<br>
  '.......>((###############(((((/ \\)))))###############))<.....'<br>
  .......>(#((*********************((((I))))*********************))#)<......<br>
  ......>(((((***************************************************)))))<.....<br>
  .......>(((*****************************************************)))<......<br>
  ........>(((***************************************************)))<.......<br>
  .........>((***************************************************))<........<br>
  ..........>(####################################).........<br>
  ..............................................................................................<br>
  ..............................................................................................<br>`,
  Permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});


if (!game.user.isGM) {
await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
const journalEntry = await game.journal.getName(journalEntryName);
if (journalEntry) {
  journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
  game.socket.emit("createJournalEntry", { journalEntry });
}
}}}

async function treasureHoardCR11to16() {
  const gpAmount = Math.floor(Math.random(4, 24) * 1000);
  const ppAmount = Math.floor(Math.random(5, 30) * 100);

  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
    case secondaryRoll >= 1 && secondaryRoll <= 3:
      items = [...items, ...rollItems(1, 2, twofiftygpartobjectsTypesW)];
      break;
    case secondaryRoll >= 4 && secondaryRoll <= 6:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      break;
    case secondaryRoll >= 7 && secondaryRoll <= 9:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      break;
    case secondaryRoll >= 10 && secondaryRoll <= 12:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      break;
    case secondaryRoll >= 13 && secondaryRoll <= 15:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      break;
    case secondaryRoll >= 16 && secondaryRoll <= 19:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      break;
    case secondaryRoll >= 20 && secondaryRoll <= 23:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      break;
    case secondaryRoll >= 24 && secondaryRoll <= 26:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      break;
    case secondaryRoll >= 27 && secondaryRoll <= 29:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      break;
    case secondaryRoll >= 30 && secondaryRoll <= 35:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableC)];
      break;
    case secondaryRoll >= 36 && secondaryRoll <= 40:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableC)];
      break;
    case secondaryRoll >= 41 && secondaryRoll <= 45:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableC)];
      break;
    case secondaryRoll >= 46 && secondaryRoll <= 50:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableD)];
      break;
    case secondaryRoll >= 51 && secondaryRoll <= 54:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      break;
    case secondaryRoll >= 55 && secondaryRoll <= 58:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      break;
    case secondaryRoll >= 59 && secondaryRoll <= 62:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      break;
    case secondaryRoll >= 63 && secondaryRoll <= 66:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      break;
    case secondaryRoll >= 67 && secondaryRoll <= 68:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      break;
    case secondaryRoll >= 69 && secondaryRoll <= 70:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      break;
    case secondaryRoll >= 71 && secondaryRoll <= 72:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      break;
    case secondaryRoll >= 73 && secondaryRoll <= 74:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      break;
    case secondaryRoll >= 75 && secondaryRoll <= 76:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      break;
    case secondaryRoll >= 77 && secondaryRoll <= 78:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      break;
    case secondaryRoll >= 79 && secondaryRoll <= 80:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      break;
    case secondaryRoll >= 81 && secondaryRoll <= 82:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      break;
    case secondaryRoll >= 83 && secondaryRoll <= 85:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      break;
    case secondaryRoll >= 86 && secondaryRoll <= 88:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      break;
    case secondaryRoll >= 89 && secondaryRoll <= 90:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      break;
    case secondaryRoll >= 91 && secondaryRoll <= 92:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      break;
    case secondaryRoll >= 93 && secondaryRoll <= 94:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableI)];
      break;
    case secondaryRoll >= 95 && secondaryRoll <= 96:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableI)];
      break;
    case secondaryRoll >= 97 && secondaryRoll <= 98:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      break;
    case secondaryRoll >= 99 && secondaryRoll <= 100:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      break;
      default:
      break;
    }  
const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * subResultItem.length);
      return {
        roll,
        description: itemDescriptions[selectedIndex],
        name: name ?? 'N/A',
        uuid: uuid ?? 'N/A',
        image: image ?? 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ?? 'N/A',
        uuid: uuid ?? 'N/A',
        image: image ?? 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ?? 'N/A',
      uuid: uuid ?? 'N/A',
      image: image ?? 'N/A',
    };
  }
});
      
  const formattedItems = subResults.map(subResult => {
    const { roll, name, uuid, image } = subResult;
    const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
    const displayUuid = uuid ? uuid : '';
    return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayUuid}${roll ? `: ${roll}` : ""}${!displayUuid ? name : ""}</div></span>`;
  }).join("; ");
  
  const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
    const { uuid, image } = item;
    const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
    const displayName = uuid ? uuid : '';
    return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${displayName}${!displayName ? item.name : ""}</div></span>`;
  });
  
const messageContent = `GP: ${gpAmount}<br>PP: ${ppAmount}<br>Inventory:;${formattedItems}}`;      
      if (typeof showItemsDialog === 'function') {
        const itemBox = document.createElement("div");
        itemBox.style.border = "1px solid black";
        itemBox.style.padding = "10px";
        itemBox.style.marginTop = "10px";
        itemBox.style.textAlign = "right"; 
        itemBox.innerHTML = messageContent;
      
        const buttons = {
          ok: {
            label: "OK",
          },
        };   new Dialog({
      title: "CR 11 to 16 Hoard",
      content: "CR 11 to 16 Hoard, journal entry created.",
      buttons: buttons,
      default: "ok",
    }).render(true);
  
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
  
  const journalEntryName = `CR 11 to 16 Hoard (${timeStamp})`;
  await JournalEntry.create({
    name: journalEntryName,
    content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
    permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
    });
                          
    if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
    } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
    journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
    game.socket.emit("createJournalEntry", { journalEntry });
    }
    }}
                
    window.addEventListener('load', function() {
    const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
    const xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
    try {
    const div = document.createElement('div');
    div.innerHTML = xhr.responseText;
    document.body.appendChild(div);
    } catch (e) {
    console.error(e);
    }
    }
    };
    xhr.open('GET', path, true);
    xhr.send();
    })};
                  
async function tashasMITreasureHoardCR11to16() {
  const gpAmount = Math.floor(Math.random(4, 24) * 1000);
  const ppAmount = Math.floor(Math.random(5, 30) * 100);

  let items = [];
  const secondaryRoll = roll(1, 100);
  switch (true) {
    case secondaryRoll >= 1 && secondaryRoll <= 3:
      items = [...items, ...rollItems(1, 2, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 4 && secondaryRoll <= 6:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 7 && secondaryRoll <= 9:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 10 && secondaryRoll <= 12:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 13 && secondaryRoll <= 15:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(0, 1, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 16 && secondaryRoll <= 19:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      items = [...items, ...rollItems(0, 1, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 20 && secondaryRoll <= 23:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 24 && secondaryRoll <= 26:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 27 && secondaryRoll <= 29:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableA)];
      items = [...items, ...rollItems(1, 6, magicItemTableB)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 30 && secondaryRoll <= 35:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableC)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 36 && secondaryRoll <= 40:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableC)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 41 && secondaryRoll <= 45:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 6, magicItemTableC)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 46 && secondaryRoll <= 50:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableD)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 51 && secondaryRoll <= 54:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 55 && secondaryRoll <= 58:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 59 && secondaryRoll <= 62:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      items = [...items, ...rollItems(0, 4, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 63 && secondaryRoll <= 66:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableE)];
      items = [...items, ...rollItems(0, 4, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 67 && secondaryRoll <= 68:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      items = [...items, ...rollItems(0, 4, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 69 && secondaryRoll <= 70:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      items = [...items, ...rollItems(0, 4, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 71 && secondaryRoll <= 72:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      items = [...items, ...rollItems(0, 4, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 73 && secondaryRoll <= 74:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableF)];
      items = [...items, ...rollItems(0, 4, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 75 && secondaryRoll <= 76:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 77 && secondaryRoll <= 78:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 79 && secondaryRoll <= 80:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 81 && secondaryRoll <= 82:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableG)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 83 && secondaryRoll <= 85:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 86 && secondaryRoll <= 88:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 89 && secondaryRoll <= 90:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      items = [...items, ...rollItems(0, 3, tashasMITrareTypes)];
      break;
    case secondaryRoll >= 91 && secondaryRoll <= 92:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 4, magicItemTableH)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      if(Math.random() < 0.05) {
        items = [...items, ...rollItems(0, 1, tashasMITrareplus)];}
      break;
    case secondaryRoll >= 93 && secondaryRoll <= 94:
      items = [...items, ...rollItems(2, 8, twofiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableI)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      if(Math.random() < 0.05) {
        items = [...items, ...rollItems(0, 1, tashasMITrareplus)];}
      break;
    case secondaryRoll >= 95 && secondaryRoll <= 96:
      items = [...items, ...rollItems(2, 8, sevenfiftygpartobjectsTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableI)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      if(Math.random() < 0.05) {
        items = [...items, ...rollItems(0, 1, tashasMITrareplus)];}
      break;
    case secondaryRoll >= 97 && secondaryRoll <= 98:
      items = [...items, ...rollItems(3, 18, fivehundredgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      if(Math.random() < 0.05) {
        items = [...items, ...rollItems(0, 1, tashasMITrareplus)];}
      break;
    case secondaryRoll >= 99 && secondaryRoll <= 100:
      items = [...items, ...rollItems(3, 18, onethousandgpgemstonesTypesW)];
      items = [...items, ...rollItems(1, 1, magicItemTableD)];
      items = [...items, ...rollItems(0, 2, tashasMITrareTypes)];
      if(Math.random() < 0.1) {
        items = [...items, ...rollItems(0, 1, tashasMITrareplus)];}
      break;
      default:
      break;
    }    
        const subResults = items
        .filter((item) => typeof item.item === "function")
        .map((item) => {
          const { roll, item: subResultItem } = item.item();
          if (Array.isArray(subResultItem)) {
      
            const [minIndex, maxIndex] = subResultItem[""];
            const itemDescriptions = subResultItem.slice(1);
            const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
            return `${roll}: ${itemDescriptions[selectedIndex - 1]}`;
          } else {
      
            return `${roll}: ${subResultItem}`;
          }
        });
      const formattedItems = subResults.join("<br>");
      
              const messageContent = `GP: ${gpAmount}<br>PP: ${ppAmount}<br>Items:${JSON.stringify(items, null, 2)}<br>${formattedItems}`;

      if(typeof showItemsDialog === 'function') {
        const itemBox = document.createElement("div");
        itemBox.style.border = "1px solid black";
        itemBox.style.padding = "10px";
        itemBox.style.marginTop = "10px";
        itemBox.innerHTML = messageContent;
      
        const buttons = {
          ok: {
            label: "OK",
          },
        };
      
        new Dialog({
          title: "CR 11 to 16 Hoard",
          content: "CR 11 to 16 Hoard, journal entry created.",
          buttons: buttons,
          default: "ok",
        }).render(true);
      
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
      
      const journalEntryName = `CR 11 to 16 Hoard (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>
  ..............................................................................................<br>
  ............>___________________________________<..............<br>
  ...........>(VVVVVVVVVVVVV..I0I..VVVVVVVVVVVVV)<........<br>
  ..........>((##########((I#I(*,11to16,*)I#I))###########))<......<br>
  ............>(^^^^^^^^^^^^^^^(((##I##)))^^^^^^^^^^^^^^^)<...........<br>
  ............>(^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^)<............<br>
  .............>((($*$*$$*$$*$*$$*$*$*$$*$$*$*$$*$*$$))<...........<br>
  ............>(($*$$$*$$*$*$$*$$$*$$$*$*$$$*$$*$$*$))<..........<br>
  ..........>((($$*$$*$*$$*$$$*$$*$*$$$$*$*$$*$$*$$$)))<.........<br>
  '.......>((###############(((((/ \\)))))###############))<.....'<br>
  .......>(#((*********************((((I))))*********************))#)<......<br>
  ......>(((((***************************************************)))))<.....<br>
  .......>(((*****************************************************)))<......<br>
  ........>(((***************************************************)))<.......<br>
  .........>((***************************************************))<........<br>
  ..........>(####################################).........<br>
  ..............................................................................................<br>
  ..............................................................................................<br>`,
  Permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});


if (!game.user.isGM) {
  await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
  const journalEntry = await game.journal.getName(journalEntryName);
  if (journalEntry) {
    journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
    game.socket.emit("createJournalEntry", { journalEntry });
  }
}}}

window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
      }
    }
  };
  xhr.open('GET', path, true);
  xhr.send();
});

console.log("SF CR Loot Roller UI loaded");

function toggleVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const container = document.getElementById("vendor-button-container");
    if (container.style.display === "none") {
      container.style.display = "block";
    } else {
      container.style.display = "none";
    }
  }

function toggleVendorContainer(containerId) {
  var container = document.getElementById(containerId);
  var containers = document.getElementsByClassName("vendor-container");
  for (var i = 0; i < containers.length; i++) {
    if (containers[i] === container) {
      // Toggle the display of the clicked container
      container.style.display = (container.style.display === "none") ? "block" : "none";
    } else {
      // Hide all other containers
      containers[i].style.display = "none";
    }
  }

}function showGSVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const rollContainer = document.getElementById("gs-vendor-roll-container");
    rollContainer.style.display = rollContainer.style.display === "none" ? "block" : "none";
  }

function toggleVendorGSButtons() {
if (!GMOnlyDisabled && !game.user.isGM) return;
    const container = document.getElementById("vendor-GS-buttons-container");
    if (container.style.display === "none") {
      container.style.display = "block";
    } else {
      container.style.display = "none";
    }
  }

function rollGSVendorInventory(wealthRange) {
  let GSInventory;
  switch (wealthRange) {
    case "Wretched":
      GSInventory = gsvendorInventoryWretched();
      break;
    case "Poor":
      GSInventory = gsvendorInventoryPoor();
      break;
    case "Modest":
      GSInventory = gsvendorInventoryModest();
      break;
    case "Comfortable":
      GSInventory = gsvendorInventoryComfortable();
      break;
    case "Rich":
      GSInventory = gsvendorInventoryRich();
      break;
    default:
      break;
  }
  const messageContent = generateGSVendorInventory(wealthRange, GSInventory);
  ChatMessage.create({ content: messageContent });
}

function generateGSVendorInventory(wealthRange, items = []) {
  const GSInventory = [];
  let totalAmount = 0; 
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    if (typeof item.item === "function") {
      const { item: subResultItem } = item.item();
      if (Array.isArray(subResultItem)) {
        const [minIndex, maxIndex] = subResultItem[""];
        const itemDescriptions = subResultItem.slice(1);
        const selectedIndex = Math.floor(
          Math.random() * (maxIndex - minIndex + 1) + minIndex
        );
        const itemDescription = itemDescriptions[selectedIndex - 1];
        GSInventory.push(itemDescription); 
        totalAmount++; 
      } else {
        const itemDescription = subResultItem;
        GSInventory.push(itemDescription); 
        totalAmount++; 
      }
    }
  }
  const messageContent = `Inventory (${wealthRange}):<br>${GSInventory.join("<br>")}<br>Total items: ${totalAmount}`;

  return messageContent;
}
function showWeaponsAndArmorVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return; {
    const rollContainer = document.getElementById("Weapons-and-armor-vendor-roll-container");
    rollContainer.style.display = rollContainer.style.display === "none" ? "block" : "none";
  }
}  
function generateWeaponsAndArmorVendorInventory(wealthRange, items = []) {
  const WAInventory = [];
  let totalAmount = 0; 
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    if (typeof item.item === "function") {
      const { item: subResultItem } = item.item();
      if (Array.isArray(subResultItem)) {
        const [minIndex, maxIndex] = subResultItem[""];
        const itemDescriptions = subResultItem.slice(1);
        const selectedIndex = Math.floor(
          Math.random() * (maxIndex - minIndex + 1) + minIndex
        );
        const itemDescription = itemDescriptions[selectedIndex - 1];
        WAInventory.push(itemDescription); 
        totalAmount++; 
      } else {
        const itemDescription = subResultItem;
        WAInventory.push(itemDescription); 
        totalAmount++; 
      }
    }
  }
  const messageContent = `Inventory (${wealthRange}):<br>${WAInventory.join("<br>")}<br>Total items: ${totalAmount}`;

  return messageContent;
}

function toggleWeaponsAndArmorVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return; {
    const container = document.getElementById("Weapons-and-Armor-buttons-container");
    if (container.style.display === "none") {
      container.style.display = "block";
      } else {
      container.style.display = "none";
      }
  }
} 

  function rollWeaponsAndArmorVendorInventory(wealthRange) {
    let waInventory;
     switch (wealthRange) {
       case "Wretched":
       waInventory = WeaponsAndArmorVendorInventoryWretched();
         break;
       case "Poor":
       waInventory = WeaponsAndArmorVendorInventoryPoor();
         break;
       case "Modest":
       waInventory = WeaponsAndArmorVendorInventoryModest();
         break;
       case "Comfortable":
       waInventory = WeaponsAndArmorVendorInventoryComfortable();
         break;
       case "Rich":
       waInventory = WeaponsAndArmorVendorInventoryRich();
         break;
     }
     const messageContent = generateWeaponsAndArmorVendorInventory(wealthRange, waInventory);
     ChatMessage.create({ content: messageContent });
   }

function showApothicaryVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const rollContainer = document.getElementById("Apothicary-vendor-roll-container");
    rollContainer.style.display = rollContainer.style.display === "none" ? "block" : "none";
  }

function toggleVendorApothicaryButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const container = document.getElementById("vendor-Apothicary-buttons-container");
    if (container.style.display === "none") {
      container.style.display = "block";
      } else {
      container.style.display = "none";
      }
  }

function rollApothicaryVendorInventory(wealthRange) {
  let ApothicaryInventory;
        switch (wealthRange) {
          case "Wretched":
            ApothicaryInventory = ApothicaryvendorInventoryWretched();
            break;
          case "Poor":
            ApothicaryInventory = ApothicaryvendorInventoryPoor();
            break;
          case "Modest":
            ApothicaryInventory = ApothicaryvendorInventoryModest();
            break;
          case "Comfortable":
            ApothicaryInventory = ApothicaryvendorInventoryComfortable();
            break;
          case "Rich":
            ApothicaryInventory = ApothicaryvendorInventoryRich();
            break;
          case "Wealthy":
            ApothicaryInventory = ApothicaryvendorInventoryWealthy();
            break;
          default:
            break;
        }
        const messageContent = generateApothicaryVendorInventory(wealthRange, ApothicaryInventory);
        ChatMessage.create({ content: messageContent });
      }

function generateApothicaryVendorInventory(wealthRange, items = []) {
  const ApothicaryInventory = [];
  let totalAmount = 0; 
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    if (typeof item.item === "function") {
      const { item: subResultItem } = item.item();
      if (Array.isArray(subResultItem)) {
        const [minIndex, maxIndex] = subResultItem[""];
        const itemDescriptions = subResultItem.slice(1);
        const selectedIndex = Math.floor(
          Math.random() * (maxIndex - minIndex + 1) + minIndex
        );
        const itemDescription = itemDescriptions[selectedIndex - 1];
        ApothicaryInventory.push(itemDescription); 
        totalAmount++; 
      } else {
        const itemDescription = subResultItem;
        ApothicaryInventory.push(itemDescription); 
        totalAmount++; 
      }
    }
  }
  const messageContent = `Inventory (${wealthRange}):<br>${ApothicaryInventory.join("<br>")}<br>Total items: ${totalAmount}`;

  return messageContent;
}

function showFnVSVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const rollContainer = document.getElementById("fnvs-vendor-roll-container");
    rollContainer.style.display = rollContainer.style.display === "none" ? "block" : "none";
  }

function toggleVendorFnVButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const container = document.getElementById("vendor-FnVS-buttons-container");
    if (container.style.display === "none") {
      container.style.display = "block";
      } else {
      container.style.display = "none";
      }
  }

function rollFnVSVendorInventory(wealthRange) {
  let FnVSInventory;
        switch (wealthRange) {
          case "Wretched":
            FnVSInventory = fnvsvendorInventoryWretched();
            break;
          case "Poor":
            FnVSInventory = fnvsvendorInventoryPoor();
            break;
          case "Modest":
            FnVSInventory = fnvsvendorInventoryModest();
            break;
          case "Comfortable":
            FnVSInventory = fnvsvendorInventoryComfortable();
            break;
          case "Rich":
            FnVSInventory = fnvsvendorInventoryRich();
            break;
          case "Wealthy":
            FnVSInventory = fnvsvendorInventoryWealthy();
            break;
          default:
            break;
        }
        const messageContent = generateFnVSVendorInventory(wealthRange, FnVSInventory);
        ChatMessage.create({ content: messageContent });
      }
function showDMSVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return;
    const rollContainer = document.getElementById("dms-vendor-roll-container");
    rollContainer.style.display = rollContainer.style.display === "none" ? "block" : "none";
  }

function toggleVendorDMSButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return; 
    const container = document.getElementById("vendor-DMS-buttons-container");
    if (container.style.display === "none") {
      container.style.display = "block";
      } else {
      container.style.display = "none";
      }
  }

function rollDMSVendorInventory(wealthRange) {
  let DMSInventory;
        switch (wealthRange) {
          case "Wretched":
            DMSInventory = dmsvendorInventoryWretched();
            break;
          case "Poor":
            DMSInventory = dmsvendorInventoryPoor();
            break;
          case "Modest":
            DMSInventory = dmsvendorInventoryModest();
            break;
          case "Comfortable":
            DMSInventory = dmsvendorInventoryComfortable();
            break;
          case "Rich":
            DMSInventory = dmsvendorInventoryRich();
            break;
          case "Wealthy":
            DMSInventory = dmsvendorInventoryWealthy();
            break;
          default:
            break;
        }
        const messageContent = generateDMSVendorInventory(wealthRange, DMSInventory);
        ChatMessage.create({ content: messageContent });
      }

const phAdventuringGear1cpTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CNdDj8dsXVpRVpXt]{Sack, 1 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BnOCLuNWhVvzHLjl]{Torch, 1 cp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SuQmsJfxyJl2hPcM]{Whetstone, 1 cp ea}",
  ];

const phAdventuringGear2cpTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lHS63sC6bypENNlR]{Flask, 2 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uw6fINSmZ2j2o57A]{Tankard, 2 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uVm7MiB71QblfnoY]{Ink Pen, 2 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0ZBWwjFz3nIAXMLW]{Jug, 2 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nXWdGtzi8DXDLLsL]{Pitcher, 2 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.REBWkTKe6lJaIkpn]{Soap, 2 cp ea}",
  ];

const phAdventuringGear4cpTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9SbsMIBZzuhZOqT]{Sling Bullet, (20); 4 gp ea}",
  ];

const phAdventuringGear5cpTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mQVYcHmMSoCUnBnM]{Bucket, 5 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TqyvIglHDj5kfohR]{Piton, 5 cp each}",  
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tut1jbW3UCsrUjCG]{Pole (10-foot); 5 cp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z67d1DZzqDPmgEwP]{Signal Whistle, 5 cp ea}",
  ];

const phAdventuringGear1spTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eQTKbhnpkrtXUfwN]{Ladder (10-foot); 1 sp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.psoZaItkOScMVaHL]{Oil Flask, 1 sp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WFQS2vT8ddrFjTJg]{Parchment (one sheet); 1 sp ea}",
  ];

  const phAdventuringGear2spTypes = [
    "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.V13fjV5oSmvbRdgP]{Mess Kit, 2 sp ea}",  
    "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fNMkFCOvMiW2Rh3t]{Paper (one sheet); 2 sp ea}",  
    "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Uv0ilmzbWvqmlCVH]{Waterskin, 2 sp ea}",
  ];

const phAdventuringGear4spTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Wv7HzD6dv1P0q78N]{Basket, 4 sp each}",
  ];

const phAdventuringGear5spTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.419eNv7xp2p7Xlo5]{Blanket, 5 sp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8RXjiddJ6VGyE7vB]{Common Clothes, 5 sp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qMzHmlmha8qMDnEF]{Lamp, 5 sp ea}" , 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9bWTRRDym06PzSAf]{Pouch, 5 sp ea}",  
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f4w4GxBi0nYXmhX4]{Rations (1 day); 5 sp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3uEyuCfnAzGkwAn5]{Sealing Wax, 5 sp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DNOSEAvF4Oh1DlWy]{Tinderbox, 5 sp ea}",
  ];

const phAdventuringGear1GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3c7JXOzsv55gqJS5]{Arrows, (20); 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gBQ8xqTA5f8wP5iu]{Blowgun Needle, (50); 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SItCnYBqhzqBoaWG]{Crossbow Bolt, (20); 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xDK9GQd2iqOGH8Sd]{Sprig of Mistletoe, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PGL6aaM0wE5h0VN5]{Totem, 1 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YSUIp4eFo26YxJr]{Ball Bearings, (1000); 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DVXmyetZuvxbzAwW]{Bedroll, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F6GwSqjErX1u35Re]{Bell, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jlI44g90pp4VazBU]{Block and Tackle, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8tvhh5wqG5FRh3Sf]{Caltrops, (20); 1 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eJtPBiZtr2pp6ynt]{Crossbow Bolt Case, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5mIeX824uMklU3xq]{Map or Scroll Case, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hOzuSDqmOIOx8z3Z]{Fishing Tackle, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.14pNRT4sZy9rgvhb]{Hammer, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4MtQKPn9qMWCFjDA]{Quiver, 1 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8GCEodUsTEEpBlO6]{Robes, 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QXmaarJ4X8P0C1HV]{Hempen Rope (50 ft.); 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RiOeHR2qaYktz5Ys]{Iron Spike, (10); 1 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.meJEfX3gZgtMX4x2]{Vial, 1 gp ea}", 
  ];
const phAdventuringGear2GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ea4xclqsksEQB1QF]{Abacus, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H8YCd689ezlD26aT]{Backpack, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7Yqbqg5EtVW16wfT]{Barrel, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HZp69hhyNZUUCipF]{Glass Bottle, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SsAmWV6YBqeOFihT]{Traveler's Clothes, 2 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.V5UAjT3ed6sDNtgm]{Crowbar, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tfDxZIKDpOkz6pbx]{Grappling Hook, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9G9QGSPgpZDSsm37]{Sledgehammer, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tWJLHIL6ZIZUez9k]{Manacles, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.X5knPtrQAT8GePJ4]{Miner's Pick, 2 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M8xM8BLK4tpUayEE]{Iron Pot, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qWlXDEgqdmdZWoab]{Shovel, 2 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PanSr5EbqlfpSvwK]{Two-Person Tent, 2 gp ea}", 
  ];

const phAdventuringGear3GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aa9KuBy4dst7WIW9]{Horn, 3 gp ea}",
  ];

const phAdventuringGear4GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.srTRzwTfWKO5opOo]{Portable Ram, 4 gp ea}",
  ];

const phAdventuringGear5GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BeKIrNIvNHRPQ4t5]{Staff, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FF1ktpb2YSiyv896]{Wooden Staff, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.paqlMjggWkBIAeCe]{Amulet, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.laVqttkGMW4B9654]{Emblem, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gP1URGq3kVIIFHJ7]{Reliquary, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JvoufrTkSDMsS9Sm]{Chain (10 feet); 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YbuclKfhDL0bU4u]{Chest, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.E2h6sEe6FU2tnU96]{Costume Clothes; 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6rocoBx5jdzG1QQH]{Healer's Kit, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LiOD83I4MIZlpoQQ]{Hunting Trap, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.trmWAdUoR6Y2B7rA]{Hooded Lantern, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HZsvDPmvysQKGzGy]{Steel Mirror, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uuh4UH3Jx5CsFjdA]{Perfume (vial), 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vJvb6fx3JVPmhG8x]{Merchant's Scale, 5 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kdkpSZMUHGXGM15H]{Signet Ring, 5 gp ea}",
  ];

const phAdventuringGear10GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uXOT4fYbgPY8DGdd]{Crystal, 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OojyyGfh91iViuMF]{Rod, 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KA2P6I48iOWlnboO]{Wand, 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t5yP0d7YaKwuKKiH]{Yew Wand, 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dP7jMKyHTTgVb3ii]{Ink Bottle, (1 ounce); 10 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UkWdyJYQTfVX2cJW]{Bullseye Lantern, 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xwUWrV15s9jLnmfZ]{Lock, 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oY8KbpGmB5H2Deoy]{Silk Rope (50 ft.); 10 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtoptPYlB3M43V3p]{Explorer's Pack, 10  gp ea}",
  ];

const phAdventuringGear12GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4Qt996kBClBby8hp]{Dungeoneer's Pack, 12 gp ea}", 
  ];

const phAdventuringGear15GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3OXueEpvDDCVfGFA]{Fine Clothes, 15 gp ea}",
  ];

const phAdventuringGear16GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nbUMn4JYvOtdYl4v]{Burglar's Pack, 16 gp ea}",
  ];

const phAdventuringGear19GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azv3bDGlE0bjcbkX]{Priest's Pack, 19 gp ea}",
  ];

const phAdventuringGear20GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tH5Rn0JVRG1zdmPa]{Orb, 20 gp ea}",
  ];

const phAdventuringGear25GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sx5E6utixHdAbGNb]{Acid (vial); 25 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RMi9efrW9ouHVLI2]{Book, 25 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ugzwHl8vYaPu2GNd]{Climber's Kit, 25 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eZGmdOhaTWMicXPW]{Component Pouch, 25 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WPWszFTGzmdIuDRJ]{Flask of Holy Water, 25 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G7LqGzKR5ts0WlJ9]{Hourglass, 25 gp ea}",
  ];

const phAdventuringGear39GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sD3MCgNioN5kwFks]{Diplomat's Pack, 39 gp ea}",
  ];

  const phAdventuringGear40GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09UBjLaCfG9hN1d9]{Entertainer's Pack, 40 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4jyhf2LFnCQKR8Rl]{Scholar's Pack, 40 gp ea}",
  ];

const phAdventuringGear50GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FvNOwWbh5FXyX4xe]{Alchemist's Fire, 50 gp each}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fc6UfFNOnW80XMzi]{Antitoxin, 50 gp ea}",
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing, 50 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LBajgahniRJbAgDr]{Spellbook, 50 gp ea}",
  ];

const phAdventuringGear100GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PV0sn2Nlr8CNn4W9]{Magnifying Glass, 100 gp ea}", 
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eVbPkYjpl29RE2uW]{Basic Poison, 100 gp ea}",
  ];

const phAdventuringGear1000GTypes = [
  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WCafDVKITxwnlf2x]{Spyglass, 1000 gp ea}",
  ];

  const phAdventuringGearTypes = [
    { name: "Sack, 1 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CNdDj8dsXVpRVpXt]{Sack, 1 cp ea}", 
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Torch, 1 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BnOCLuNWhVvzHLjl]{Torch, 1 cp ea}", 
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Whetstone, 1 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SuQmsJfxyJl2hPcM]{Whetstone, 1 cp ea}", 
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Flask, 2 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lHS63sC6bypENNlR]{Flask, 2 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Tankard, 2 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uw6fINSmZ2j2o57A]{Tankard, 2 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name: "Ink Pen, 2 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uVm7MiB71QblfnoY]{Ink Pen, 2 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Jug, 2 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0ZBWwjFz3nIAXMLW]{Jug, 2 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Pitcher, 2 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nXWdGtzi8DXDLLsL]{Pitcher, 2 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Soap, 2 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.REBWkTKe6lJaIkpn]{Soap, 2 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Sling Bullet, (20); 4 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9SbsMIBZzuhZOqT]{Sling Bullet, (20); 4 gp ea}", 
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Bucket, 5 cp ea",
      uuid:   "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mQVYcHmMSoCUnBnM]{Bucket, 5 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:   "Piton, 5 cp each",
      uuid:   "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TqyvIglHDj5kfohR]{Piton, 5 cp each}",   
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name:  "Pole (10-foot); 5 cp ea",
      uuid:  "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tut1jbW3UCsrUjCG]{Pole (10-foot); 5 cp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name: "Signal Whistle, 5 cp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z67d1DZzqDPmgEwP]{Signal Whistle, 5 cp ea}", 
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name: "Ladder (10-foot); 1 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eQTKbhnpkrtXUfwN]{Ladder (10-foot); 1 sp ea}",  
      image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    { name: "Oil (flask); 1 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.psoZaItkOScMVaHL]{Oil Flask, 1 sp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Parchment (one sheet); 1 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WFQS2vT8ddrFjTJg]{Parchment (one sheet); 1 sp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Mess Kit, 2 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.V13fjV5oSmvbRdgP]{Mess Kit, 2 sp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Paper (one sheet); 2 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fNMkFCOvMiW2Rh3t]{Paper (one sheet); 2 sp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Waterskin, 2 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Uv0ilmzbWvqmlCVH]{Waterskin, 2 sp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Basket, 4 sp each",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Wv7HzD6dv1P0q78N]{Basket, 4 sp each}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Blanket, 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.419eNv7xp2p7Xlo5]{Blanket, 5 sp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Common Clothes, 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8RXjiddJ6VGyE7vB]{Common Clothes, 5 sp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Lamp, 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qMzHmlmha8qMDnEF]{Lamp, 5 sp ea}" ,  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Pouch, 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9bWTRRDym06PzSAf]{Pouch, 5 sp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Ration (1 day); 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.f4w4GxBi0nYXmhX4]{Rations (1 day); 5 sp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Sealing Wax, 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3uEyuCfnAzGkwAn5]{Sealing Wax, 5 sp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Tinderbox, 5 sp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DNOSEAvF4Oh1DlWy]{Tinderbox, 5 sp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Arrow, (20); 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3c7JXOzsv55gqJS5]{Arrows, (20); 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Blowgun Needle, (50); 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gBQ8xqTA5f8wP5iu]{Blowgun Needle, (50); 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Crossbow Bolt, (20); 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SItCnYBqhzqBoaWG]{Crossbow Bolt, (20); 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Sprig of Mistletoe, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xDK9GQd2iqOGH8Sd]{Sprig of Mistletoe, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Totem, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PGL6aaM0wE5h0VN5]{Totem, 1 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Ball Bearings, (1000); 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YSUIp4eFo26YxJr]{Ball Bearings, (1000); 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Bedroll, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DVXmyetZuvxbzAwW]{Bedroll, 1 gp ea}",
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Bell, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F6GwSqjErX1u35Re]{Bell, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Block and Tackle, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jlI44g90pp4VazBU]{Block and Tackle, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Calumet, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8tvhh5wqG5FRh3Sf]{Caltrops, (20); 1 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Crossbow Bolt Case, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eJtPBiZtr2pp6ynt]{Crossbow Bolt Case, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Map or Scroll Case, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5mIeX824uMklU3xq]{Map or Scroll Case, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Fishing Tackle, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hOzuSDqmOIOx8z3Z]{Fishing Tackle, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Hammer, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.14pNRT4sZy9rgvhb]{Hammer, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Quiver, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4MtQKPn9qMWCFjDA]{Quiver, 1 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Robes, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8GCEodUsTEEpBlO6]{Robes, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Hempen Rope, (50 ft.); 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QXmaarJ4X8P0C1HV]{Hempen Rope (50 ft.); 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Iron Spike, (10); 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RiOeHR2qaYktz5Ys]{Iron Spike, (10); 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Vial, 1 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.meJEfX3gZgtMX4x2]{Vial, 1 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Abacus, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ea4xclqsksEQB1QF]{Abacus, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Backpack, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H8YCd689ezlD26aT]{Backpack, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Barrel, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7Yqbqg5EtVW16wfT]{Barrel, 2 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Glass Bottle, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HZp69hhyNZUUCipF]{Glass Bottle, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Traveler's Clothes, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SsAmWV6YBqeOFihT]{Traveler's Clothes, 2 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Crowbar, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.V5UAjT3ed6sDNtgm]{Crowbar, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Grappling Hook, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tfDxZIKDpOkz6pbx]{Grappling Hook, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Sledgehammer, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9G9QGSPgpZDSsm37]{Sledgehammer, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Manacles, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tWJLHIL6ZIZUez9k]{Manacles, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Miner's Pick, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.X5knPtrQAT8GePJ4]{Miner's Pick, 2 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Iron Pot, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M8xM8BLK4tpUayEE]{Iron Pot, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Shovel, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qWlXDEgqdmdZWoab]{Shovel, 2 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Two-Person Tent, 2 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PanSr5EbqlfpSvwK]{Two-Person Tent, 2 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Horn, 3 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aa9KuBy4dst7WIW9]{Horn, 3 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Portable Ram, 4 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.srTRzwTfWKO5opOo]{Portable Ram, 4 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Staff, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BeKIrNIvNHRPQ4t5]{Staff, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Wooden Staff, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FF1ktpb2YSiyv896]{Wooden Staff, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Amulet, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.paqlMjggWkBIAeCe]{Amulet, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Emblem, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.laVqttkGMW4B9654]{Emblem, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Reliquary, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gP1URGq3kVIIFHJ7]{Reliquary, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Chain (10 feet), 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JvoufrTkSDMsS9Sm]{Chain (10 feet); 5 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Chest, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YbuclKfhDL0bU4u]{Chest, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Costume Clothes, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.E2h6sEe6FU2tnU96]{Costume Clothes; 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Healer's Kit, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6rocoBx5jdzG1QQH]{Healer's Kit, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Hunter's Trap, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LiOD83I4MIZlpoQQ]{Hunting Trap, 5 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Hooded Lantern, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.trmWAdUoR6Y2B7rA]{Hooded Lantern, 5 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Steel Mirror, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HZsvDPmvysQKGzGy]{Steel Mirror, 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Perfume (vial), 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uuh4UH3Jx5CsFjdA]{Perfume (vial), 5 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Merchant's Scale, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vJvb6fx3JVPmhG8x]{Merchant's Scale, 5 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Signet Ring, 5 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kdkpSZMUHGXGM15H]{Signet Ring, 5 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Crystal, 10 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uXOT4fYbgPY8DGdd]{Crystal, 10 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Rod, 10 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OojyyGfh91iViuMF]{Rod, 10 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Wand, 10 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KA2P6I48iOWlnboO]{Wand, 10 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Yew Wand, 10 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t5yP0d7YaKwuKKiH]{Yew Wand, 10 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Ink Bottle, (1 ounce); 10 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dP7jMKyHTTgVb3ii]{Ink Bottle, (1 ounce); 10 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "Bullseye Lantern, 10 gp ea",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UkWdyJYQTfVX2cJW]{Bullseye Lantern, 10 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xwUWrV15s9jLnmfZ]{Lock, 10 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oY8KbpGmB5H2Deoy]{Silk Rope (50 ft.); 10 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtoptPYlB3M43V3p]{Explorer's Pack, 10  gp ea}",
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4Qt996kBClBby8hp]{Dungeoneer's Pack, 12 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3OXueEpvDDCVfGFA]{Fine Clothes, 15 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nbUMn4JYvOtdYl4v]{Burglar's Pack, 16 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.azv3bDGlE0bjcbkX]{Priest's Pack, 19 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tH5Rn0JVRG1zdmPa]{Orb, 20 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sx5E6utixHdAbGNb]{Acid (vial); 25 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RMi9efrW9ouHVLI2]{Book, 25 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ugzwHl8vYaPu2GNd]{Climber's Kit, 25 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eZGmdOhaTWMicXPW]{Component Pouch, 25 gp ea}",
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WPWszFTGzmdIuDRJ]{Flask of Holy Water, 25 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G7LqGzKR5ts0WlJ9]{Hourglass, 25 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sD3MCgNioN5kwFks]{Diplomat's Pack, 39 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09UBjLaCfG9hN1d9]{Entertainer's Pack, 40 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.4jyhf2LFnCQKR8Rl]{Scholar's Pack, 40 gp ea}",
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FvNOwWbh5FXyX4xe]{Alchemist's Fire, 50 gp each}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fc6UfFNOnW80XMzi]{Antitoxin, 50 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ytlsBjYsZ7OBSEBs]{Potion of Healing, 50 gp ea}",  
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LBajgahniRJbAgDr]{Spellbook, 50 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PV0sn2Nlr8CNn4W9]{Magnifying Glass, 100 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eVbPkYjpl29RE2uW]{Basic Poison, 100 gp ea}", 
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
    {name: "",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WCafDVKITxwnlf2x]{Spyglass, 1000 gp ea}",
    image: "icons/skills/social/diplomacy-offering-ritual.webp",},
  ];


  async function showInventorysDialog(items) {
    const subResults = items
      .filter((item) => typeof item.item === "function")
      .map((item) => {
        const { roll, item: subResultItem } = item.item();
        if (Array.isArray(subResultItem)) {
          const [minIndex, maxIndex] = subResultItem[""];
          const itemDescriptions = subResultItem.slice(1);
          const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
          return `${roll}: ${itemDescriptions[selectedIndex - 1]}`;
        } else {
          return `${roll}: ${subResultItem}`;
        }
      });
    const formattedItems = subResults.join("<br>");
  
    const dialogContent = `
      <div style="padding:10px;">
        <p>Items:</p>
        <pre style="font-size:12px;max-height:200px;overflow-y:auto;">${JSON.stringify(items, null, 2)}</pre>
        <p>Items Result:</p>
        <div style="border:1px solid black;padding:10px;margin-top:10px;font-size:12px;">
          ${formattedItems}
        </div>
      </div>
    `;
  
    new Dialog({
      title: "Inventory Result",
      content: dialogContent,
      buttons: {
        ok: {
          label: "Ok",
        },
      },
      default: "ok",
    }).render(true);
  }

function rollInventory(min, max, itemTypes) {
  const numItems = generateRandomNumber() % (max - min + 1) + min;
  const items = [];
  for (let i = 0; i < numItems; i++) {
    const Inventory = itemTypes[Math.floor(Math.random() * itemTypes.length)];
    items.push(Inventory);
  }
  return items;
}

async function gsvendorInventoryRich() {
  let items = [];
const secondaryRoll = Math.floor(Math.random() * 100) + 1;
  switch (true) {
      case secondaryRoll >= 1 && secondaryRoll <= 2:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(1, 12, magicItemTableC)];
        items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];
        break;
      case secondaryRoll >= 3 && secondaryRoll <= 5:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(2, 10, magicItemTableC),];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 6 && secondaryRoll <= 8:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 9, magicItemTableC),];
        items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];        
        break;
      case secondaryRoll >= 9 && secondaryRoll <= 11:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(4, 8, magicItemTableC),];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
        break;
      case secondaryRoll >= 12 && secondaryRoll <= 14:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(1, 12, magicItemTableD),];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
        break;
      case secondaryRoll >= 15 && secondaryRoll <= 22:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(2, 10, magicItemTableD),];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 23 && secondaryRoll <= 30:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 9, magicItemTableD)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 31 && secondaryRoll <= 38:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(4, 8, magicItemTableD)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 39 && secondaryRoll <= 46:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(1, 12, magicItemTableE)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 47 && secondaryRoll <= 52:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(2, 10, magicItemTableE)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 53 && secondaryRoll <= 58:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 9, magicItemTableE)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 59 && secondaryRoll <= 63:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(4, 8, magicItemTableE)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 64 && secondaryRoll <= 68:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(1, 9, magicItemTableG)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 69:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(2, 7, magicItemTableG),];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 70:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 5, magicItemTableG),];
        items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 71:
        items = [...items, ...rollInventory(1, 5, HpPotionTypes)];
        items = [...items, ...rollInventory(4, 4, magicItemTableG)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 72:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(1, 9, magicItemTableH)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 73 && secondaryRoll <= 74:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(2, 7, magicItemTableH)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 75 && secondaryRoll <= 76:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 5, magicItemTableH)];
        items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 77 && secondaryRoll <= 78:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(4, 4, magicItemTableH)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 79 && secondaryRoll <= 80:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(1, 9, magicItemTableI)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 81 && secondaryRoll <= 85:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(2, 7, magicItemTableI)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 86 && secondaryRoll <= 90:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 5, magicItemTableI)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 91 && secondaryRoll <= 95:
        items = [...items, ...rollInventory(2, 6, HpPotionTypes)];
        items = [...items, ...rollInventory(4, 4, magicItemTableI)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      case secondaryRoll >= 96 && secondaryRoll <= 100:
        items = [...items, ...rollInventory(3, 7, HpPotionTypes)];
        items = [...items, ...rollInventory(3, 5, magicItemTableH),];
        items = [...items, ...rollInventory(2, 4, magicItemTableI)];
        items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
        break;
      default:
        break;
      }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

    new Dialog({
    title: "Rich General Store Vendor Inventory",
    content: "Rich General Store Inventory Journal Entry Created",
    buttons: buttons,
    default: "ok",
  }).render(true);
}

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `GS Rich Inventory (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });
    
async function gsvendorInventoryComfortable() {
  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
        case secondaryRoll >= 1 && secondaryRoll <= 2:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];
          break;
        case secondaryRoll >= 3 && secondaryRoll <= 5:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 6 && secondaryRoll <= 8:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];        
          break;
        case secondaryRoll >= 9 && secondaryRoll <= 11:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 4, magicItemTableA),];
          items = [...items, ...rollInventory(2, 4, magicItemTableB),];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
          break;
        case secondaryRoll >= 12 && secondaryRoll <= 14:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(1, 4, magicItemTableA),];
          items = [...items, ...rollInventory(1, 6, magicItemTableB),];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
          break;
        case secondaryRoll >= 15 && secondaryRoll <= 22:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(1, 6, magicItemTableA),];
          items = [...items, ...rollInventory(1, 8, magicItemTableB),];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 23 && secondaryRoll <= 30:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 8, magicItemTableC)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 31 && secondaryRoll <= 38:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(4, 8, magicItemTableC)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 39 && secondaryRoll <= 46:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(1, 9, magicItemTableC)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 47 && secondaryRoll <= 52:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 8, magicItemTableC)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 53 && secondaryRoll <= 58:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(3, 6, magicItemTableD)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 59 && secondaryRoll <= 63:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(4, 5, magicItemTableD)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 64 && secondaryRoll <= 68:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(1, 6, magicItemTableD)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 69:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 5, magicItemTableD),];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 70:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(3, 4, magicItemTableE),];
          items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 71:
          items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
          items = [...items, ...rollInventory(3, 3, magicItemTableE)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 72:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(1, 6, magicItemTableE)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 73 && secondaryRoll <= 74:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 5, magicItemTableE)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 75 && secondaryRoll <= 76:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(1, 4, magicItemTableF)];
          items = [...items, ...rollInventory(1, 4, magicItemTableG)];
          items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 77 && secondaryRoll <= 78:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 4, magicItemTableF)];
          items = [...items, ...rollInventory(2, 4, magicItemTableG)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 79 && secondaryRoll <= 80:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(3, 4, magicItemTableF)];
          items = [...items, ...rollInventory(2, 4, magicItemTableG)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 81 && secondaryRoll <= 85:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 4, magicItemTableF)];
          items = [...items, ...rollInventory(3, 4, magicItemTableG)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 86 && secondaryRoll <= 90:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(3, 4, magicItemTableH)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 91 && secondaryRoll <= 95:
          items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
          items = [...items, ...rollInventory(3, 3, magicItemTableH)];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        case secondaryRoll >= 96 && secondaryRoll <= 100:
          items = [...items, ...rollInventory(3, 7, basicPotionTypes)];
          items = [...items, ...rollInventory(2, 4, magicItemTableH),];
          items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
          break;
        default:
          break;
    }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

    new Dialog({
        title: "Comfortable General Store Vendor Inventory",
        content: "Comfortable General Store Inventory, journal entry created.",
        buttons: buttons,
        default: "ok",
      }).render(true);
    
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
                
    const journalEntryName = `GS Comfortable Inventory (${timeStamp})`;
    await JournalEntry.create({
      name: journalEntryName,
      content: `<div style="text-align: right">${messageContent}</div>`, 
      permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
      });
    
      if (!game.user.isGM) {
        await ChatMessage.create({ content: messageContent});
      } else {
        const journalEntry = await game.journal.getName(journalEntryName);
        if (journalEntry) {
          journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
          game.socket.emit("createJournalEntry", { journalEntry });
        }
    }}}
                    
      window.addEventListener('load', function() {
      const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
      const xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
          try {
            const div = document.createElement('div');
            div.innerHTML = xhr.responseText;
            document.body.appendChild(div);
          } catch (e) {
            console.error(e);
              }
          }
          };
          xhr.open('GET', path, true);
          xhr.send();
          });
          
    async function gsvendorInventoryModest() {
      let items = [];
      const secondaryRoll = Math.floor(Math.random() * 100) + 1;
        switch (true) {
            case secondaryRoll >= 1 && secondaryRoll <= 2:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];
              break;
            case secondaryRoll >= 3 && secondaryRoll <= 5:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 6 && secondaryRoll <= 8:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];        
              break;
            case secondaryRoll >= 9 && secondaryRoll <= 11:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableA),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
              break;
            case secondaryRoll >= 12 && secondaryRoll <= 14:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 4, magicItemTableA),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
              break;
            case secondaryRoll >= 15 && secondaryRoll <= 22:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 6, magicItemTableA),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 23 && secondaryRoll <= 30:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 8, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 31 && secondaryRoll <= 38:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(4, 8, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 39 && secondaryRoll <= 46:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 9, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 47 && secondaryRoll <= 52:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 8, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 53 && secondaryRoll <= 58:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 6, magicItemTableC)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 59 && secondaryRoll <= 63:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(4, 5, magicItemTableC)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 64 && secondaryRoll <= 68:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 6, magicItemTableC)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 69:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 5, magicItemTableC),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 70:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 4, magicItemTableD),];
              items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 71:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 3, magicItemTableD)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 72:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 6, magicItemTableD)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 73 && secondaryRoll <= 74:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 5, magicItemTableD)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 75 && secondaryRoll <= 76:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 4, magicItemTableE)];
              items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 77 && secondaryRoll <= 78:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableE)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 79 && secondaryRoll <= 80:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 4, magicItemTableE)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 81 && secondaryRoll <= 85:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableF)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 86 && secondaryRoll <= 90:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 4, magicItemTableF)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 91 && secondaryRoll <= 95:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 3, magicItemTableG)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 96 && secondaryRoll <= 100:
              items = [...items, ...rollInventory(3, 7, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableH),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            default:
              break;
        }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

    new Dialog({
            title: "Modest General Store Vendor Inventory",
            content: "Modest General Store Inventory, journal entry created.",
            buttons: buttons,
            default: "ok",
          }).render(true);
        
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

        
        const journalEntryName = `GS Modest Inventory (${timeStamp})`;
        await JournalEntry.create({
          name: journalEntryName,
          content: `<div style="text-align: right">${messageContent}</div>`, 
          permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
          });
        
          if (!game.user.isGM) {
            await ChatMessage.create({ content: messageContent});
          } else {
            const journalEntry = await game.journal.getName(journalEntryName);
            if (journalEntry) {
              journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
              game.socket.emit("createJournalEntry", { journalEntry });
            }
        }}}
                        
          window.addEventListener('load', function() {
          const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
          const xhr = new XMLHttpRequest();
          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
              try {
                const div = document.createElement('div');
                div.innerHTML = xhr.responseText;
                document.body.appendChild(div);
              } catch (e) {
                console.error(e);
                  }
              }
              };
              xhr.open('GET', path, true);
              xhr.send();
              });
            
        async function gsvendorInventoryPoor() {
      let items = [];
      const secondaryRoll = Math.floor(Math.random() * 100) + 1;
        switch (true) {
            case secondaryRoll >= 1 && secondaryRoll <= 2:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];
              break;
            case secondaryRoll >= 3 && secondaryRoll <= 5:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 6 && secondaryRoll <= 8:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(5, 20, phAdventuringGearTypes)];        
              break;
            case secondaryRoll >= 9 && secondaryRoll <= 11:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableA),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
              break;
            case secondaryRoll >= 12 && secondaryRoll <= 14:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 4, magicItemTableA),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
              break;
            case secondaryRoll >= 15 && secondaryRoll <= 22:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 5, magicItemTableA),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 23 && secondaryRoll <= 30:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 31 && secondaryRoll <= 38:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 6, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 39 && secondaryRoll <= 46:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 7, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 47 && secondaryRoll <= 52:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 6, magicItemTableB)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 53 && secondaryRoll <= 58:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 5, magicItemTableC)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 59 && secondaryRoll <= 63:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(4, 4, magicItemTableC)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 64 && secondaryRoll <= 68:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 5, magicItemTableC)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 69:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableC),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 70:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 4, magicItemTableF),];
              items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 71:
              items = [...items, ...rollInventory(1, 5, basicPotionTypes)];
              items = [...items, ...rollInventory(3, 3, magicItemTableF)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 72:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 6, magicItemTableF)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 73 && secondaryRoll <= 74:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 5, magicItemTableF)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 75 && secondaryRoll <= 76:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 4, magicItemTableF)];
              items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 77 && secondaryRoll <= 78:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 3, magicItemTableG)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 79 && secondaryRoll <= 80:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 3, magicItemTableG)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 81 && secondaryRoll <= 85:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableG)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 86 && secondaryRoll <= 90:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 4, magicItemTableG)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 91 && secondaryRoll <= 95:
              items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
              items = [...items, ...rollInventory(1, 3, magicItemTableG)];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            case secondaryRoll >= 96 && secondaryRoll <= 100:
              items = [...items, ...rollInventory(3, 7, basicPotionTypes)];
              items = [...items, ...rollInventory(2, 4, magicItemTableH),];
              items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
              break;
            default:
              break;
        }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

    new Dialog({
                title: "Poor General Store Vendor Inventory",
                content: "Poor General Store Inventory, journal entry created.",
                buttons: buttons,
                default: "ok",
              }).render(true);
            
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
            
            const journalEntryName = `GS Poor Inventory (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });
    
            async function gsvendorInventoryWretched() {
              let items = [];
              const secondaryRoll = Math.floor(Math.random() * 100) + 1;
                switch (true) {
                    case secondaryRoll >= 1 && secondaryRoll <= 2:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(3, 10, phAdventuringGearTypes)];
                      break;
                    case secondaryRoll >= 3 && secondaryRoll <= 5:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(5, 10, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 6 && secondaryRoll <= 8:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(5, 15, phAdventuringGearTypes)];        
                      break;
                    case secondaryRoll >= 9 && secondaryRoll <= 11:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 3, magicItemTableA),];
                      items = [...items, ...rollInventory(5, 15, phAdventuringGearTypes)];              
                      break;
                    case secondaryRoll >= 12 && secondaryRoll <= 14:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 4, magicItemTableA),];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];              
                      break;
                    case secondaryRoll >= 15 && secondaryRoll <= 22:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 5, magicItemTableA),];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 23 && secondaryRoll <= 30:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 4, magicItemTableB)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 31 && secondaryRoll <= 38:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 6, magicItemTableB)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 39 && secondaryRoll <= 46:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(2, 5, magicItemTableB)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 47 && secondaryRoll <= 52:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 6, magicItemTableB)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 53 && secondaryRoll <= 58:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(2, 5, magicItemTableC)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 59 && secondaryRoll <= 63:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(2, 3, magicItemTableC)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 64 && secondaryRoll <= 68:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 5, magicItemTableC)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 69:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(2, 3, magicItemTableC),];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 70:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 4, magicItemTableF),];
                      items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 71:
                      items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 3, magicItemTableF)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 72:
                      items = [...items, ...rollInventory(2, 6, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 6, magicItemTableF)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 73 && secondaryRoll <= 74:
                      items = [...items, ...rollInventory(2, 6, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 4, magicItemTableF)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 75 && secondaryRoll <= 76:
                      items = [...items, ...rollInventory(2, 6, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 3, magicItemTableF)];
                      items = [...items, ...rollInventory(15, 20, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 77 && secondaryRoll <= 78:
                      items = [...items, ...rollInventory(2, 6, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 2, magicItemTableG)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 79 && secondaryRoll <= 80:
                      items = [...items, ...rollInventory(2, 6, commonPotionTypes)];
                      items = [...items, ...rollInventory(1, 3, magicItemTableG)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 81 && secondaryRoll <= 85:
                      items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
                      items = [...items, ...rollInventory(1, 4, magicItemTableG)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 86 && secondaryRoll <= 90:
                      items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
                      items = [...items, ...rollInventory(2, 3, magicItemTableG)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 91 && secondaryRoll <= 95:
                      items = [...items, ...rollInventory(2, 6, basicPotionTypes)];
                      items = [...items, ...rollInventory(2, 2, magicItemTableG)];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    case secondaryRoll >= 96 && secondaryRoll <= 100:
                      items = [...items, ...rollInventory(3, 7, basicPotionTypes)];
                      items = [...items, ...rollInventory(2, 3, magicItemTableH),];
                      items = [...items, ...rollInventory(10, 15, phAdventuringGearTypes)];      
                      break;
                    default:
                      break;
                }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

  new Dialog({
  title: "Wretched General Store Vendor Inventory",
  content: "Wretched General Store Inventory, journal entry created.",
  buttons: buttons,
  default: "ok",
}).render(true);

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `GS Wretched Inventory (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });


console.log("SF Vendor Inventory Roller is loaded")


const armorItemTableA = [
  { range: [1, 8], item:  () => {
    const armorItemTableAalpha = [
  {
    name: "Cap of Water Breathing",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xcJofwv5umV2togh]{Cap of Water Breathing}",
    image: "icons/equipment/head/hood-cloth-blue.webp"
  },
  {
    name: "Cloak of the Manta Ray",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hGrxC676XmlnS9y0]{Cloak of the Manta Ray}",
    image: "icons/equipment/back/cape-layered-blue-accent.webp"
  },
  {
    name: "Cloak of the Manta Ray",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hGrxC676XmlnS9y0]{Cloak of the Manta Ray}",
    image: "icons/equipment/back/cape-layered-blue-accent.webp"
  },
  {
    name: "Cloak of the Manta Ray",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hGrxC676XmlnS9y0]{Cloak of the Manta Ray}",
    image: "icons/equipment/back/cape-layered-blue-accent.webp"
  },
  {
    name: "Goggles of Night",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XGAWqtmhK6SYBL6A]{Goggles of Night}",
    image: "icons/equipment/head/goggles-leather-blue.webp" 
  },
  {
    name: "Goggles of Night",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XGAWqtmhK6SYBL6A]{Goggles of Night}",
    image: "icons/equipment/head/goggles-leather-blue.webp" 
  },
  { name: "Helm of Comprehending Languages",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rY9sRFQp5CFSfsat]{Helm of Comprehending Languages}",
    image: "icons/magic/defensive/illusion-evasion-echo-purple.webp" },
  ];
  const randomIndex = Math.floor(Math.random() * armorItemTableAalpha.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: armorItemTableAalpha[randomIndex].name,
      uuid: armorItemTableAalpha[randomIndex].uuid,
      image: armorItemTableAalpha[randomIndex].image
    }
  }; 
  }
  },
  { range: [8, 26], item: () => {
    const marinersArmorTypes = [
      {
        name: "Mariner's Padded Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EzOoPK3tqneyK6Yh]{Mariner's Padded Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tU4Knu4VqbeQN6Nn]{Mariner's Leather Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Studded Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cyRLW2TPOIUWrrtR]{Mariner's Studded Leather Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Hide Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qtRpVOkQSAbVmDm0]{Mariner's Hide Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Chain Shirt",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5R8mB9JKe0oW1C64]{Mariner's Chain Shirt}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Scale Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM6O1jBmhk97ilAz]{Mariner's Scale Mail}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Breastplate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m78aGIvd62sQwIPT]{Mariner's Breastplate}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Half Plate Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwKJYLhH2anOjHZP]{Mariner's Half Plate Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Ring Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P36nZk3bDgibLpXq]{Mariner's Ring Mail}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Chain Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fts0Bt0I3aWpgYYZ]{Mariner's Chain Mail}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Splint Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EsrWR1yllXBZLBim]{Mariner's Splint Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
      {
        name: "Mariner's Plate Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eehnkUUtgy2uZNQa]{Mariner's Plate Armor}",
        image: "icons/tools/navigation/sextant-steel-blue.webp"
      },
    ];
  const randomIndex = Math.floor(Math.random() * marinersArmorTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: marinersArmorTypes[randomIndex].name,
      uuid: marinersArmorTypes[randomIndex].uuid,
      image: marinersArmorTypes[randomIndex].image
    }
  }; 
  }
  },
  { range: [27, 50], item: () => {
  const simpleArmorTypes = [
    {
      name: "Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    {
      name: "Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },  
    ];
const randomIndex = Math.floor(Math.random() * simpleArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: simpleArmorTypes[randomIndex].name,
    uuid: simpleArmorTypes[randomIndex].uuid,
    image: simpleArmorTypes[randomIndex].image
  }
}; 
}
},
  { range: [51, 52], item: () => {
    const pOneArmorTypes = [
      { 
        name: "Padded Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.twRJhPtDQe1HceFt]{Padded Armor +1}", 
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      { 
        name: "Leather Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}", 
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      }, 
      { 
        name: "Studded Leather Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}", 
        image: "icons/equipment/chest/breastplate-rivited-red.webp"
      },
      { 
        name: "Hide Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k2B9P3gm2NGjJ1m0]{Hide Armor +1}", 
        image: "icons/equipment/chest/breastplate-scale-leather.webp"
      },
      { 
        name: "Chain Shirt +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name:  "Scale Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Breastplate +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Half Plate +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Ring Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM1dPyKwHw2DyUWA]{Ring Mail +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Chain Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Splint Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}", 
        image: "icons/equipment/chest/breastplate-layered-steel.webp"
      },
      { 
        name: "Plate Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}", 
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
      },
  ];
  const randomIndex = Math.floor(Math.random() * pOneArmorTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: pOneArmorTypes[randomIndex].name,
      uuid: pOneArmorTypes[randomIndex].uuid,
      image: pOneArmorTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [53, 55], item:  () => {
    const armorItemTableAbravo = [
  { 
    name: "Robe of Useful Items",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2ksm2KXCY3vBHTAx]{Robe of Useful Items}",
    image: "icons/equipment/back/mantle-collared-black.webp"
  },
  { 
    name: "Robe of Useful Items",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2ksm2KXCY3vBHTAx]{Robe of Useful Items}",
    image: "icons/equipment/back/mantle-collared-black.webp"
  },
  { 
    name: "Saddle of the Cavalier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yN5CLnYKP1hBJtVf]{Saddle of the Cavalier}",
    image:  "icons/equipment/shoulder/shoulderpad-steel-blue.webp"
  },
];
const randomIndex = Math.floor(Math.random() * armorItemTableAbravo.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: armorItemTableAbravo[randomIndex].name,
    uuid: armorItemTableAbravo[randomIndex].uuid,
    image: armorItemTableAbravo[randomIndex].image
  }
  }; 
  }
  },
  { range: [56, 56], item: () => {
    const protectionScrollTypes = [
      {
        name:"Scroll of Protection (Aberrations)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HFhOuMYm5hAT9zrV]{Scroll of Protection (Aberrtions)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name:"Scroll of Protection (Beasts)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ofVljzBddj5AwZVL]{Scroll of Protection (Beasts)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Celestials)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uKjHqaQlEiVRA5co]{Scroll of Protection (Celestials)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Elementals)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0BOfmF8Zqw3WbS1R]{Scroll of Protection (Elementals)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Fey)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dKLZBP8tCWtkb9a3]{Scroll of Protection (Fey)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Fiends)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7TUH4Jz7alampzRB]{Scroll of Protection (Fiends)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Plants)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ohgMcSdLpTP4b000]{Scroll of Protection (Plants)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
      {
        name: "Scroll of Protection (Undead)",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lktJvTqWCZ1zMwCK]{Scroll of Protection (Undead)}",
        image: "icons/sundries/scrolls/scroll-bound-orange-tan.webp"
      },
  ];
      
    const randomIndex = Math.floor(Math.random() * protectionScrollTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: protectionScrollTypes[randomIndex].name,
      uuid: protectionScrollTypes[randomIndex].uuid,
      image: protectionScrollTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [57, 80], item: () => {
    const simpleArmorTypes = [
      {
        name: "Padded Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      { 
        name: "Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      {
        name: "Studded Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
        image: "icons/equipment/chest/breastplate-rivited-red.webp"
      },
      { 
        name: "Hide Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
        image: "icons/equipment/chest/breastplate-scale-leather.webp"
      },
      { 
        name: "Chain Shirt",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Scale Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Breastplate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Half Plate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Ring Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Chain Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Splint Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
        image: "icons/equipment/chest/breastplate-layered-steel.webp"
      },
      { 
        name: "Plate Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
      },  
      ];      
const randomIndex = Math.floor(Math.random() * simpleArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: simpleArmorTypes[randomIndex].name,
    uuid: simpleArmorTypes[randomIndex].uuid,
    image: simpleArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [81, 100], item: () => {
  const armorTableAshieldTypes = [
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
  {
    name: "Shield",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
    image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
  },
{
    name: "Shield +1",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NgwrqNa6kkgoPW2Q]{Shield +1}",
    image:  "icons/equipment/shield/heater-wooden-brown-notched.webp"
  },
];
const randomIndex = Math.floor(Math.random() * armorTableAshieldTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: armorTableAshieldTypes[randomIndex].name,
    uuid: armorTableAshieldTypes[randomIndex].uuid,
    image: armorTableAshieldTypes[randomIndex].image
  }
}; 
}
},
];

const armorItemTableB = [
  { range: [1, 10], item: () => {
    const simpleArmorTypes = [
      {
        name: "Padded Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      { 
        name: "Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      {
        name: "Studded Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
        image: "icons/equipment/chest/breastplate-rivited-red.webp"
      },
      { 
        name: "Hide Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
        image: "icons/equipment/chest/breastplate-scale-leather.webp"
      },
      { 
        name: "Chain Shirt",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Scale Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Breastplate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Half Plate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Ring Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Chain Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Splint Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
        image: "icons/equipment/chest/breastplate-layered-steel.webp"
      },
      { 
        name: "Plate Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
      },  
      ];      
const randomIndex = Math.floor(Math.random() * simpleArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: simpleArmorTypes[randomIndex].name,
    uuid: simpleArmorTypes[randomIndex].uuid,
    image: simpleArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [11, 20], item: () => {
  const gleamingArmorTypes = [
    {
      name: "Armor of Gleaming, Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jTsnPxvtOp3GZII0]{Armor of Gleaming, Padded Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9eYOEvyJVi0Zd9Gi]{Armor of Gleaming, Leather Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ONOLeGMSs56jcnyS]{Armor of Gleaming, Studded Leather Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ClHRfq0OKkg7hwmi]{Armor of Gleaming, Hide Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NLvYzXAga0x6zxhS]{Armor of Gleaming, Chain Shirt}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JwPZczakd8pKZPcl]{Armor of Gleaming, Scale Mail}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bn96eyEdZsmVDUhL]{Armor of Gleaming, Breastplate}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Armor of Gleaming, Half Plate Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZQLGbQ7etlsaHlnE]{Armor of Gleaming, Ring Mail}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eWD45dhMcr3G5fxr]{Armor of Gleaming, Chain Mail}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KWJb0FSx7j4eHkQe]{Armor of Gleaming, Splint Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eMl1R9U1WhR4PUe0]{Armor of Gleaming, Plate Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
];

const randomIndex = Math.floor(Math.random() * gleamingArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: gleamingArmorTypes[randomIndex].name,
    uuid: gleamingArmorTypes[randomIndex].uuid,
    image: gleamingArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [21, 30], item: () => {
  const castoffArmorTypes = [
    {
      name: "Cast-Off Armor, Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hCvuHhfXC0Vrt4es]{Cast-Off Armor, Padded Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bMDaYvWc4Q0UTGox]{Cast-Off Armor, Leather Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1tCkZDT4MpdzSnkE]{Cast-Off Armor, Studded Leather Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wiDAeN55Nhzzn5fM]{Cast-Off Armor, Hide Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m13Bat750EulEYhI]{Cast-Off Armor, Chain Shirt}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.j21lYE5Wjff48efL]{Cast-Off Armor, Scale Mail}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8WZxo6F7xBQwhUgs]{Cast-Off Armor, Breastplate}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1wQqdtDChZ86aBHg]{Cast-Off Armor, Half Plate Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.at561J7LswdN0WxV]{Cast-Off Armor, Ring Mail}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ULg8VLULACC3rvDD]{Cast-Off Armor, Chain Mail}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UOWlZQxy2Yk6bzph]{Cast-Off Armor, Splint Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Go3TZwD41PJoR7JD]{Cast-Off Armor, Plate Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
];
const randomIndex = Math.floor(Math.random() * castoffArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: castoffArmorTypes[randomIndex].name,
    uuid: castoffArmorTypes[randomIndex].uuid,
    image: castoffArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [31, 31], item: () => {
  const armorAdamantineTypes = [
    { 
      name: "Adamantine Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kjTPoUeomTPWJ9h3]{Adamantine Chain Shirt}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    }, 
    { 
      name: "Adamantine Scale Mail",
      uuid:"@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LdAj2ES9EzfnWcA1]{Adamantine Scale Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DevmObXWP9MfwE2c]{Adamantine Breastplate}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Adamantine Half Plate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.159agyOuBHCl2WKd]{Adamantine Half Plate Armor}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Adamantine Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UpHAWqwifZpiZzns]{Adamantine Ring Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n7fm71CN7qDIBEKk]{Adamantine Chain Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LDuqUcosOK8Bf76S]{Adamantine Splint Armor}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Adamantine Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sP8CV5VNEcY1Yh1Q]{Adamantine Plate Armor}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];
  const randomIndex = Math.floor(Math.random() * armorAdamantineTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: armorAdamantineTypes[randomIndex].name,
      uuid: armorAdamantineTypes[randomIndex].uuid,
      image: armorAdamantineTypes[randomIndex].image
    }
  }; 
  }
  },
{ range: [32, 36], item: () => {
  const marinersArmorTypes = [
    {
      name: "Mariner's Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EzOoPK3tqneyK6Yh]{Mariner's Padded Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tU4Knu4VqbeQN6Nn]{Mariner's Leather Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cyRLW2TPOIUWrrtR]{Mariner's Studded Leather Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qtRpVOkQSAbVmDm0]{Mariner's Hide Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5R8mB9JKe0oW1C64]{Mariner's Chain Shirt}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM6O1jBmhk97ilAz]{Mariner's Scale Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m78aGIvd62sQwIPT]{Mariner's Breastplate}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwKJYLhH2anOjHZP]{Mariner's Half Plate Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P36nZk3bDgibLpXq]{Mariner's Ring Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fts0Bt0I3aWpgYYZ]{Mariner's Chain Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EsrWR1yllXBZLBim]{Mariner's Splint Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eehnkUUtgy2uZNQa]{Mariner's Plate Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
  ];
const randomIndex = Math.floor(Math.random() * marinersArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: marinersArmorTypes[randomIndex].name,
    uuid: marinersArmorTypes[randomIndex].uuid,
    image: marinersArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [37, 50], item: () => {
  const simpleArmorTypes = [
    {
      name: "Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    {
      name: "Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },  
    ];    
const randomIndex = Math.floor(Math.random() * simpleArmorTypes.length);
return { 
roll: randomIndex + 1,
item: {
  name: simpleArmorTypes[randomIndex].name,
  uuid: simpleArmorTypes[randomIndex].uuid,
  image: simpleArmorTypes[randomIndex].image
}
}; 
}
},
{ range: [51, 52], item: () => {
  const pOneArmorTypes = [
    { 
      name: "Padded Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.twRJhPtDQe1HceFt]{Padded Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    }, 
    { 
      name: "Studded Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k2B9P3gm2NGjJ1m0]{Hide Armor +1}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name:  "Scale Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM1dPyKwHw2DyUWA]{Ring Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];
const randomIndex = Math.floor(Math.random() * pOneArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pOneArmorTypes[randomIndex].name,
    uuid: pOneArmorTypes[randomIndex].uuid,
    image: pOneArmorTypes[randomIndex].image
  }
  }; 
  }
  },
{ range: [53, 75], item: () => {
  const simpleArmorTypes = [
    {
      name: "Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    {
      name: "Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },  
    ];    
const randomIndex = Math.floor(Math.random() * simpleArmorTypes.length);
return { 
roll: randomIndex + 1,
item: {
  name: simpleArmorTypes[randomIndex].name,
  uuid: simpleArmorTypes[randomIndex].uuid,
  image: simpleArmorTypes[randomIndex].image
}
}; 
}
},
{ range: [76, 100], item: () => {
  const armorTableBshieldTypes = [
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
      image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
    },
    { 
      name: "Shield +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NgwrqNa6kkgoPW2Q]{Shield +1}",
      image:  "icons/equipment/shield/heater-wooden-brown-notched.webp"
    },  
  ];    
const randomIndex = Math.floor(Math.random() * armorTableBshieldTypes.length);
return { 
roll: randomIndex + 1,
item: {
name: armorTableBshieldTypes[randomIndex].name,
uuid: armorTableBshieldTypes[randomIndex].uuid,
image: armorTableBshieldTypes[randomIndex].image
}
}; 
}
},
];

const armorItemTableC = [
  { range: [1, 10], item: () => {
    const simpleArmorTypes = [
      {
        name: "Padded Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GtKV1b5uqFQqpEni]{Padded Armor}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      { 
        name: "Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WwdpHLXGX5r8uZu5]{Leather Armor}",
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      {
        name: "Studded Leather Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.TIV3B1vbrVHIhQAm]{Studded Leather Armor}", 
        image: "icons/equipment/chest/breastplate-rivited-red.webp"
      },
      { 
        name: "Hide Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n1V07puo0RQxPGuF]{Hide Armor}", 
        image: "icons/equipment/chest/breastplate-scale-leather.webp"
      },
      { 
        name: "Chain Shirt",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p2zChy24ZJdVqMSH]{Chain Shirt}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Scale Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XmnlF5fgIO3tg6TG]{Scale Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Breastplate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.SK2HATQ4abKUlV8i]{Breastplate}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Half Plate",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Half Plate Armor}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Ring Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nsXZejlmgalj4he9]{Ring Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Chain Mail",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rLMflzmxpe8JGTOA]{Chain Mail}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Splint Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cKpJmsJmU8YaiuqG]{Splint Armor}", 
        image: "icons/equipment/chest/breastplate-layered-steel.webp"
      },
      { 
        name: "Plate Armor",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OjkIqlW2UpgFcjZa]{Plate Armor}", 
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
      },  
      ];      
      const randomIndex = Math.floor(Math.random() * simpleArmorTypes.length);
      return { 
        roll: randomIndex + 1,
        item: {
          name: simpleArmorTypes[randomIndex].name,
          uuid: simpleArmorTypes[randomIndex].uuid,
          image: simpleArmorTypes[randomIndex].image
        }
        }; 
        }
        },
{ range: [11, 20], item: () => {
  const gleamingArmorTypes = [
    {
      name: "Armor of Gleaming, Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jTsnPxvtOp3GZII0]{Armor of Gleaming, Padded Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9eYOEvyJVi0Zd9Gi]{Armor of Gleaming, Leather Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ONOLeGMSs56jcnyS]{Armor of Gleaming, Studded Leather Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ClHRfq0OKkg7hwmi]{Armor of Gleaming, Hide Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NLvYzXAga0x6zxhS]{Armor of Gleaming, Chain Shirt}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JwPZczakd8pKZPcl]{Armor of Gleaming, Scale Mail}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bn96eyEdZsmVDUhL]{Armor of Gleaming, Breastplate}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vsgmACFYINloIdPm]{Armor of Gleaming, Half Plate Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZQLGbQ7etlsaHlnE]{Armor of Gleaming, Ring Mail}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eWD45dhMcr3G5fxr]{Armor of Gleaming, Chain Mail}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KWJb0FSx7j4eHkQe]{Armor of Gleaming, Splint Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
    {
      name: "Armor of Gleaming, Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eMl1R9U1WhR4PUe0]{Armor of Gleaming, Plate Armor}",
      image: "icons/skills/social/diplomacy-peace-alliance.webp"
    },
];

const randomIndex = Math.floor(Math.random() * gleamingArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: gleamingArmorTypes[randomIndex].name,
    uuid: gleamingArmorTypes[randomIndex].uuid,
    image: gleamingArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [21, 30], item: () => {
  const castoffArmorTypes = [
    {
      name: "Cast-Off Armor, Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hCvuHhfXC0Vrt4es]{Cast-Off Armor, Padded Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bMDaYvWc4Q0UTGox]{Cast-Off Armor, Leather Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1tCkZDT4MpdzSnkE]{Cast-Off Armor, Studded Leather Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wiDAeN55Nhzzn5fM]{Cast-Off Armor, Hide Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m13Bat750EulEYhI]{Cast-Off Armor, Chain Shirt}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.j21lYE5Wjff48efL]{Cast-Off Armor, Scale Mail}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8WZxo6F7xBQwhUgs]{Cast-Off Armor, Breastplate}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1wQqdtDChZ86aBHg]{Cast-Off Armor, Half Plate Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.at561J7LswdN0WxV]{Cast-Off Armor, Ring Mail}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ULg8VLULACC3rvDD]{Cast-Off Armor, Chain Mail}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UOWlZQxy2Yk6bzph]{Cast-Off Armor, Splint Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
    {
      name: "Cast-Off Armor, Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Go3TZwD41PJoR7JD]{Cast-Off Armor, Plate Armor}",
      image: "icons/skills/movement/figure-running-gray.webp"
    },
];
const randomIndex = Math.floor(Math.random() * castoffArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: castoffArmorTypes[randomIndex].name,
    uuid: castoffArmorTypes[randomIndex].uuid,
    image: castoffArmorTypes[randomIndex].image
  }
}; 
}
},

{ range: [31, 31], item: () => {
  const armorAdamantineTypes = [
    { 
      name: "Adamantine Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kjTPoUeomTPWJ9h3]{Adamantine Chain Shirt}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    }, 
    { 
      name: "Adamantine Scale Mail",
      uuid:"@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LdAj2ES9EzfnWcA1]{Adamantine Scale Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DevmObXWP9MfwE2c]{Adamantine Breastplate}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Adamantine Half Plate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.159agyOuBHCl2WKd]{Adamantine Half Plate Armor}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Adamantine Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UpHAWqwifZpiZzns]{Adamantine Ring Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n7fm71CN7qDIBEKk]{Adamantine Chain Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LDuqUcosOK8Bf76S]{Adamantine Splint Armor}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Adamantine Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sP8CV5VNEcY1Yh1Q]{Adamantine Plate Armor}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];
  const randomIndex = Math.floor(Math.random() * armorAdamantineTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: armorAdamantineTypes[randomIndex].name,
      uuid: armorAdamantineTypes[randomIndex].uuid,
      image: armorAdamantineTypes[randomIndex].image
    }
  }; 
  }
  },
{ range: [32, 36], item: () => {
  const marinersArmorTypes = [
    {
      name: "Mariner's Padded Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EzOoPK3tqneyK6Yh]{Mariner's Padded Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tU4Knu4VqbeQN6Nn]{Mariner's Leather Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Studded Leather Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cyRLW2TPOIUWrrtR]{Mariner's Studded Leather Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Hide Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qtRpVOkQSAbVmDm0]{Mariner's Hide Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.5R8mB9JKe0oW1C64]{Mariner's Chain Shirt}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Scale Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM6O1jBmhk97ilAz]{Mariner's Scale Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m78aGIvd62sQwIPT]{Mariner's Breastplate}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Half Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwKJYLhH2anOjHZP]{Mariner's Half Plate Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P36nZk3bDgibLpXq]{Mariner's Ring Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Fts0Bt0I3aWpgYYZ]{Mariner's Chain Mail}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EsrWR1yllXBZLBim]{Mariner's Splint Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
    {
      name: "Mariner's Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eehnkUUtgy2uZNQa]{Mariner's Plate Armor}",
      image: "icons/tools/navigation/sextant-steel-blue.webp"
    },
];
const randomIndex = Math.floor(Math.random() * marinersArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: marinersArmorTypes[randomIndex].name,
    uuid: marinersArmorTypes[randomIndex].uuid,
    image: marinersArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [37, 50], item: () => {
  const pOneArmorTypes = [
    { 
      name: "Padded Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.twRJhPtDQe1HceFt]{Padded Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    }, 
    { 
      name: "Studded Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k2B9P3gm2NGjJ1m0]{Hide Armor +1}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name:  "Scale Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM1dPyKwHw2DyUWA]{Ring Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];
const randomIndex = Math.floor(Math.random() * pOneArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pOneArmorTypes[randomIndex].name,
    uuid: pOneArmorTypes[randomIndex].uuid,
    image: pOneArmorTypes[randomIndex].image
  }
  }; 
  }
  },
{ range: [51, 52], item: () => {
  const pTwoArmorTypes = [
    {
      name: "Padded Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G9XQPNLlDXkpVxn1]{Padded Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UT8zCwmdXVQlBiyl]{Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Studded Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FZixEM5voQkH84xP]{Studded Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    {
      name: "Hide Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJFqU9COdk4ycFa2]{Hide Armor +2}",
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    {
      name: "Chain Shirt +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FLoBS3UnFnZTSsSx]{Chain Shirt +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Scale Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fO1PuSOtZWLzEHqu]{Scale Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Breastplate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ET8Oo5vaTZqyb7rN]{Breastplate +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Half Plate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Ring Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M28HYDCueaK7J8u8]{Ring Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Chain Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.akjpaK4TYkUZbGrN]{Chain Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Splint Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zIpNJyuOxp2raizE]{Splint Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Plate Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
  ];
const randomIndex = Math.floor(Math.random() * pTwoArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoArmorTypes[randomIndex].name,
    uuid: pTwoArmorTypes[randomIndex].uuid,
    image: pTwoArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [53, 75], item: () => {
  const pOneArmorTypes = [
    { 
      name: "Padded Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.twRJhPtDQe1HceFt]{Padded Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },  
    { 
      name: "Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    }, 
    { 
      name: "Studded Leather Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}", 
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    { 
      name: "Hide Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k2B9P3gm2NGjJ1m0]{Hide Armor +1}", 
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    { 
      name: "Chain Shirt +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name:  "Scale Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Breastplate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Half Plate +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    { 
      name: "Ring Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM1dPyKwHw2DyUWA]{Ring Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Chain Mail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}", 
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    { 
      name: "Splint Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}", 
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    { 
      name: "Plate Armor +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}", 
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];
const randomIndex = Math.floor(Math.random() * pOneArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pOneArmorTypes[randomIndex].name,
    uuid: pOneArmorTypes[randomIndex].uuid,
    image: pOneArmorTypes[randomIndex].image
  }
  }; 
  }
  },
  { range: [76, 99], item: () => {
    const armorTableCshieldTypes = [
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sSs3hSzkKBMNBgTs]{Shield}",
        image: "icons/equipment/shield/oval-wooden-boss-steel.webp"
      },
      { 
        name: "Shield +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NgwrqNa6kkgoPW2Q]{Shield +1}",
        image:  "icons/equipment/shield/heater-wooden-brown-notched.webp"
      },  
    ];    
  const randomIndex = Math.floor(Math.random() * armorTableCshieldTypes.length);
  return { 
  roll: randomIndex + 1,
  item: {
  name: armorTableCshieldTypes[randomIndex].name,
  uuid: armorTableCshieldTypes[randomIndex].uuid,
  image: armorTableCshieldTypes[randomIndex].image
  }
  }; 
  }
  },
  ];

const armorItemTableD = [
  { range: [1, 10], item: () => {
    const pOneArmorTypes = [
      { 
        name: "Padded Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.twRJhPtDQe1HceFt]{Padded Armor +1}", 
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      },  
      { 
        name: "Leather Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dXtZxlh2VKLCo1nA]{Leather Armor +1}", 
        image: "icons/equipment/chest/breastplate-quilted-brown.webp"
      }, 
      { 
        name: "Studded Leather Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.STxsp9Ao3pS2T4gt]{Studded Leather Armor +1}", 
        image: "icons/equipment/chest/breastplate-rivited-red.webp"
      },
      { 
        name: "Hide Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.k2B9P3gm2NGjJ1m0]{Hide Armor +1}", 
        image: "icons/equipment/chest/breastplate-scale-leather.webp"
      },
      { 
        name: "Chain Shirt +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MSO3JxK8578xSh6x]{Chain Shirt +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name:  "Scale Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aDEAwKwttl35dWaB]{Scale Mail +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Breastplate +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.84z9mVy1mCipUWEY]{Breastplate +1}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Half Plate +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dOZkW5MwvsMhnd08]{Half Plate Armor +1}", 
        image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
      },
      { 
        name: "Ring Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NM1dPyKwHw2DyUWA]{Ring Mail +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Chain Mail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Rn9gt6JGULtx9Zvz]{Chain Mail +1}", 
        image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
      },
      { 
        name: "Splint Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HpEEfZg9PRkXnMi4]{Splint Armor +1}", 
        image: "icons/equipment/chest/breastplate-layered-steel.webp"
      },
      { 
        name: "Plate Armor +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fStHPOhuJvwEjzQh]{Plate Armor +1}", 
        image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
      },
  ];
  const randomIndex = Math.floor(Math.random() * pOneArmorTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: pOneArmorTypes[randomIndex].name,
      uuid: pOneArmorTypes[randomIndex].uuid,
      image: pOneArmorTypes[randomIndex].image
    }
    }; 
    }
    },
{ range: [11, 20], item: () => {
  const pTwoArmorTypes = [
    {
      name: "Padded Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G9XQPNLlDXkpVxn1]{Padded Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UT8zCwmdXVQlBiyl]{Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Studded Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FZixEM5voQkH84xP]{Studded Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    {
      name: "Hide Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJFqU9COdk4ycFa2]{Hide Armor +2}",
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    {
      name: "Chain Shirt +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FLoBS3UnFnZTSsSx]{Chain Shirt +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Scale Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fO1PuSOtZWLzEHqu]{Scale Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Breastplate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ET8Oo5vaTZqyb7rN]{Breastplate +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Half Plate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Ring Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M28HYDCueaK7J8u8]{Ring Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Chain Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.akjpaK4TYkUZbGrN]{Chain Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Splint Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zIpNJyuOxp2raizE]{Splint Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Plate Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
  ];
const randomIndex = Math.floor(Math.random() * pTwoArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoArmorTypes[randomIndex].name,
    uuid: pTwoArmorTypes[randomIndex].uuid,
    image: pTwoArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [21, 36], item: () => {
  const armorAdamantineTypes = [
    { 
      name: "Adamantine Chain Shirt",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kjTPoUeomTPWJ9h3]{Adamantine Chain Shirt}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    }, 
    { 
      name: "Adamantine Scale Mail",
      uuid:"@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LdAj2ES9EzfnWcA1]{Adamantine Scale Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Breastplate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DevmObXWP9MfwE2c]{Adamantine Breastplate}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Adamantine Half Plate",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.159agyOuBHCl2WKd]{Adamantine Half Plate Armor}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Adamantine Ring Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UpHAWqwifZpiZzns]{Adamantine Ring Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Chain Mail",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.n7fm71CN7qDIBEKk]{Adamantine Chain Mail}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Adamantine Splint Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LDuqUcosOK8Bf76S]{Adamantine Splint Armor}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Adamantine Plate Armor",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sP8CV5VNEcY1Yh1Q]{Adamantine Plate Armor}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
];
  const randomIndex = Math.floor(Math.random() * armorAdamantineTypes.length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: armorAdamantineTypes[randomIndex].name,
      uuid: armorAdamantineTypes[randomIndex].uuid,
      image: armorAdamantineTypes[randomIndex].image
    }
  }; 
  }
  },
{ range: [37, 50], item: () => {
  const pTwoArmorTypes = [
    {
      name: "Padded Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G9XQPNLlDXkpVxn1]{Padded Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UT8zCwmdXVQlBiyl]{Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Studded Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FZixEM5voQkH84xP]{Studded Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    {
      name: "Hide Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJFqU9COdk4ycFa2]{Hide Armor +2}",
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    {
      name: "Chain Shirt +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FLoBS3UnFnZTSsSx]{Chain Shirt +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Scale Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fO1PuSOtZWLzEHqu]{Scale Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Breastplate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ET8Oo5vaTZqyb7rN]{Breastplate +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Half Plate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Ring Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M28HYDCueaK7J8u8]{Ring Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Chain Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.akjpaK4TYkUZbGrN]{Chain Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Splint Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zIpNJyuOxp2raizE]{Splint Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Plate Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
  ];
const randomIndex = Math.floor(Math.random() * pTwoArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoArmorTypes[randomIndex].name,
    uuid: pTwoArmorTypes[randomIndex].uuid,
    image: pTwoArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [51, 52], item: () => {
  const pThreeArmorTypes = [
    {
      name: "Padded Armor +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XKnDE8DTrJxIkVCF]{Padded Armor +3}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Leather Armor +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZwFCZDgQljlidzns]{Leather Armor +3}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Studded Leather Armor +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.00BggOkChWztQx6R]{Studded Leather Armor +3}",
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    {
      name: "Hide Armor +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IeM5Ha2cg0RA99q3]{Hide Armor +3}",
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    {
      name: "Chain Shirt +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cI0UhWUux8gIzSHn]{Chain Shirt +3}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Scale Mail +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9uT9SXy1Gb1jiiZX]{Scale Mail +3}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Breastplate +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.JDTO996oInbiZGHW]{Breastplate +3}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Half Plate +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xbVpKtrQ6tJsPhXX]{Half Plate Armor +3}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Ring Mail +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KhRhwADrTpol3yTx]{Ring Mail +3}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Chain Mail +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eHGbr3rqRRxdBPLq]{Chain Mail +3}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Splint Armor +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BwC8hZaNjO7IQc6K]{Splint Armor +3}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Plate Armor +3",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.466j8hy4AiENMHVQ]{Plate Armor +3}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
  ];
const randomIndex = Math.floor(Math.random() * pThreeArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pThreeArmorTypes[randomIndex].name,
    uuid: pThreeArmorTypes[randomIndex].uuid,
    image: pThreeArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [53, 75], item: () => {
  const pTwoArmorTypes = [
    {
      name: "Padded Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.G9XQPNLlDXkpVxn1]{Padded Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UT8zCwmdXVQlBiyl]{Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-quilted-brown.webp"
    },
    {
      name: "Studded Leather Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FZixEM5voQkH84xP]{Studded Leather Armor +2}",
      image: "icons/equipment/chest/breastplate-rivited-red.webp"
    },
    {
      name: "Hide Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XJFqU9COdk4ycFa2]{Hide Armor +2}",
      image: "icons/equipment/chest/breastplate-scale-leather.webp"
    },
    {
      name: "Chain Shirt +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FLoBS3UnFnZTSsSx]{Chain Shirt +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Scale Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fO1PuSOtZWLzEHqu]{Scale Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Breastplate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ET8Oo5vaTZqyb7rN]{Breastplate +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Half Plate +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YFarUKR3OrM5raf5]{Half Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel-black.webp"
    },
    {
      name: "Ring Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.M28HYDCueaK7J8u8]{Ring Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Chain Mail +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.akjpaK4TYkUZbGrN]{Chain Mail +2}",
      image: "icons/equipment/chest/breastplate-metal-scaled-grey.webp"
    },
    {
      name: "Splint Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.zIpNJyuOxp2raizE]{Splint Armor +2}",
      image: "icons/equipment/chest/breastplate-layered-steel.webp"
    },
    {
      name: "Plate Armor +2",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VTc5McIjCm40KPIz]{Plate Armor +2}",
      image: "icons/equipment/chest/breastplate-cuirass-steel-grey.webp"
    },
  ];
const randomIndex = Math.floor(Math.random() * pTwoArmorTypes.length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoArmorTypes[randomIndex].name,
    uuid: pTwoArmorTypes[randomIndex].uuid,
    image: pTwoArmorTypes[randomIndex].image
  }
}; 
}
},
{ range: [76, 100], item: () => { 
  const armorTableDshieldTypes = [
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
    name: "Shield +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xzZQIIxXjNJwNqnp]{Shield +2}",
    image: "icons/commodities/tech/metal-blue.webp"
  },
  {
  name: "Shield +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WfqBg3yBNoJQtVEB]{Shield +3}",
    image: "icons/equipment/shield/heater-embossed-gold.webp" 
  },  
];    
const randomIndex = Math.floor(Math.random() * armorTableDshieldTypes.length);
return { 
roll: randomIndex + 1,
item: {
name: armorTableDshieldTypes[randomIndex].name,
uuid: armorTableDshieldTypes[randomIndex].uuid,
image: armorTableDshieldTypes[randomIndex].image
}
}; 
}
},
];

const weaponsItemTableA= [
{ range: [1, 10], item: () => {
  const pOneAmmoTypes = [
     {name: "Ammunition +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yGS0xCYJpePAAWpr]{Ammunition +1, 20 units}", 
      image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
    },  
  ];    
  const randomIndex = Math.floor(Math.random() * pOneAmmoTypes.length);
  return { 
  roll: randomIndex + 1,
  item: {
  name: pOneAmmoTypes[randomIndex].name,
  uuid: pOneAmmoTypes[randomIndex].uuid,
  image: pOneAmmoTypes[randomIndex].image
  }
  }; 
  }
  },
{ range: [11, 35], item: () => {
const basicWeaponTypes = [
  {
    name: "Club",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nfIRTECQIG81CvM4]{Club}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0E565kQUBmndJ1a2]{Dagger}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QRCsxkCwWNwswL9o]{Greatclub}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eO7Fbv5WBk5zvGOc]{Handaxe}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DWLMnODrnHn8IbAG]{Javelin}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XVK6TOL4sGItssAE]{Light Hammer}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ajyq6nGwF7FtLhDQ]{Mace}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.g2dWN7PQiMRYWzyk]{Quarterstaff}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i4NeNZ30ycwPDHMx]{Sickle}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OG4nBBydvmfWYXIk]{Spear}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WayPSq1eSziedayE]{Yklwa}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomeraang",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W2AyhchcGrZ71aqN]{Boomerang}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ddWvQRLmnnIS0eLF]{Light Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3rCO8MTIdPGSW6IJ]{Dart}",
    image: "icons/weapons/thrown/dart-feathered.webp",
  },
  {
    name: "Shortbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GJv6WkD7D2J6rP6M]{Shortbow}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3gynWO9sN4OLGMWD]{Sling}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I0WocDSuNpGJayPb]{Battleaxe}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UrH3sMdnUDckIHJ6]{Flail}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rOG1OM2ihgPjOvFW]{Glaive}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1Lxk6kmoRhG8qQ0u]{Greataxe}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xMkP8BmFzElcsMaR]{Greatsword}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DMejWAc8r8YvDPP1]{Halberd}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RnuxdHUAIgxccVwj]{Lance}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.10ZP2Bu3vnCuYMIB]{Longsword}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DizirD7eqjh8n95A]{Maul}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dX8AxCh9o0A9CkT3]{Morningstar}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tC0kcqZT9HHAO0PD]{Pike}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Tobce1hexTnDk4sV]{Rapier}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fbC0Mg1a73wdFbqO]{Scimitar}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.osLzOwQdPtrK3rQH]{Shortsword}", 
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F65ANO66ckP8FDMa]{Trident}", 
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YdfjN1PIIrSHZii]{War Pick}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F0Df164Xv1gWcYt0]{Warhammer}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QKTyxoO0YDnAsbYe]{Whip}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wNWK6yJMHG9ANqQV]{Blowgun}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qaSro7kFhxD6INbZ]{Hand Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RmP0mYRn2J7K26rX]{Heavy Crossbow}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3cymOVja8jXbzrdT]{Longbow}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aEiM49V8vWpWw7rU]{Net}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * basicWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: basicWeaponTypes[randomIndex].name,
    uuid: basicWeaponTypes[randomIndex].uuid,
    image: basicWeaponTypes[randomIndex].image
  }
}; 
}
},
{ range: [36, 37], item: () => {
  const pOneWeaponTypes = [
    {
      name: "Club +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
      image: "icons/weapons/clubs/club-simple-barbed.webp",
    },
    {
      name: "Dagger +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
      image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
    },
    {
      name: "Greatclub +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
      image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
    },
    {
      name: "Handaxe +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
      image: "icons/weapons/axes/axe-broad-black.webp",
    },
    {
      name: "Javelin +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
      image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
    },
    {
      name: "Light Hammer +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
      image: "icons/weapons/hammers/hammer-war-spiked.webp",
    },
    {
      name: "Mace +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
      image: "icons/weapons/maces/mace-round-spiked-black.webp",
    },
    {
      name: "Quarterstaff +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
      image: "icons/weapons/staves/staff-simple-gold.webp",
    },
    {
      name: "Sickle +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
      image: "icons/weapons/sickles/sickle-curved.webp",
    },
    {
      name: "Spear +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
      image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
    },
    {
      name: "Yklwa +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
      image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
    },
    {
      name: "Boomerang +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
      image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
    },
    {
      name: "Light Crossbow +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
      image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
    },
    {
      name: "Dart +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
      image: "icons/weapons/thrown/dagger-simple.webp",
    },
    {
      name: "Shortbow +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
      image: "icons/weapons/bows/shortbow-recurve.webp",
    },
    {
      name: "Sling +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
      image: "icons/weapons/slings/slingshot-wood.webp",
    },
    {
      name: "Battleaxe +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
      image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
    },
    {
      name: "Flail +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
      image: "icons/weapons/maces/flail-ball-grey.webp",
    },
    {
      name: "Glaive +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
      image: "icons/weapons/polearms/glaive-simple.webp",
    },
    {
      name: "Greataxe +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
      image: "icons/weapons/axes/axe-double.webp",
    },
    {
      name: "Greatsword +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
      image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
    },
    {
      name: "Halberd +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
      image: "icons/weapons/polearms/halberd-worn-steel.webp",
    },
    {
      name: "Lance +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
      image: "icons/skills/targeting/target-strike-triple-blue.webp",
    },
    {
      name: "Longsword +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
      image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
    },
    {
      name: "Maul +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
      image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
    },
    {
      name: "Morningstar +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
      image: "icons/weapons/maces/mace-round-spiked-black.webp",
    },
    {
      name: "Pike +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
      image: "icons/weapons/polearms/spear-simple-engraved.webp",
    },
    {
      name: "Rapier +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
      image: "icons/skills/melee/sword-twirl-orange.webp",
    },
    {
      name: "Scimitar +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
      image: "icons/weapons/swords/sword-katana.webp",
    },
    {
      name: "Shortsword +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
      image: "icons/weapons/swords/sword-guard-brown.webp",
    },
    {
      name: "Trident +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
      image: "icons/weapons/polearms/trident-silver-blue.webp",
    },
    {
      name: "War Pick +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
      image: "icons/weapons/axes/pickaxe-double-brown.webp",
    },
    {
      name: "Warhammer +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
      image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
    },
    {
      name: "Whip +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
      image: "icons/weapons/misc/whip-red-yellow.webp",
    },
    {
      name: "Blowgun +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
      image: "icons/weapons/staves/staff-simple-brown.webp",
    },
    {
      name: "Hand Crossbow +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
      image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
    },
    {
      name: "Heavy Crossbow +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
      image: "icons/weapons/crossbows/crossbow-purple.webp",
    },
    {
      name: "Longbow +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
      image: "icons/weapons/bows/longbow-leather-green.webp",
    },
    {
      name: "Net +1",
      uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
      image: "icons/tools/fishing/net-simple-tan.webp",
    },

      ];
        
    
  const randomIndex = Math.floor(Math.random() * pOneWeaponTypes .length);
  return { 
    roll: randomIndex + 1,
    item: {
      name: pOneWeaponTypes[randomIndex].name,
      uuid: pOneWeaponTypes[randomIndex].uuid,
      image: pOneWeaponTypes[randomIndex].image
    }
  }; 
  }
  },
  { range: [38, 85], item: () => {
const basicWeaponTypes = [
  {
    name: "Club",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nfIRTECQIG81CvM4]{Club}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0E565kQUBmndJ1a2]{Dagger}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QRCsxkCwWNwswL9o]{Greatclub}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eO7Fbv5WBk5zvGOc]{Handaxe}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DWLMnODrnHn8IbAG]{Javelin}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XVK6TOL4sGItssAE]{Light Hammer}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ajyq6nGwF7FtLhDQ]{Mace}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.g2dWN7PQiMRYWzyk]{Quarterstaff}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i4NeNZ30ycwPDHMx]{Sickle}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OG4nBBydvmfWYXIk]{Spear}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WayPSq1eSziedayE]{Yklwa}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomeraang",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W2AyhchcGrZ71aqN]{Boomerang}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ddWvQRLmnnIS0eLF]{Light Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3rCO8MTIdPGSW6IJ]{Dart}",
    image: "icons/weapons/thrown/dart-feathered.webp",
  },
  {
    name: "Shortbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GJv6WkD7D2J6rP6M]{Shortbow}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3gynWO9sN4OLGMWD]{Sling}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I0WocDSuNpGJayPb]{Battleaxe}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UrH3sMdnUDckIHJ6]{Flail}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rOG1OM2ihgPjOvFW]{Glaive}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1Lxk6kmoRhG8qQ0u]{Greataxe}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xMkP8BmFzElcsMaR]{Greatsword}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DMejWAc8r8YvDPP1]{Halberd}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RnuxdHUAIgxccVwj]{Lance}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.10ZP2Bu3vnCuYMIB]{Longsword}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DizirD7eqjh8n95A]{Maul}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dX8AxCh9o0A9CkT3]{Morningstar}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tC0kcqZT9HHAO0PD]{Pike}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Tobce1hexTnDk4sV]{Rapier}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fbC0Mg1a73wdFbqO]{Scimitar}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.osLzOwQdPtrK3rQH]{Shortsword}", 
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F65ANO66ckP8FDMa]{Trident}", 
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YdfjN1PIIrSHZii]{War Pick}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F0Df164Xv1gWcYt0]{Warhammer}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QKTyxoO0YDnAsbYe]{Whip}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wNWK6yJMHG9ANqQV]{Blowgun}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qaSro7kFhxD6INbZ]{Hand Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RmP0mYRn2J7K26rX]{Heavy Crossbow}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3cymOVja8jXbzrdT]{Longbow}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aEiM49V8vWpWw7rU]{Net}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * basicWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: basicWeaponTypes[randomIndex].name,
    uuid: basicWeaponTypes[randomIndex].uuid,
    image: basicWeaponTypes[randomIndex].image
  }
}; 
}
},      
{ range: [86, 99], item: () => {
    const pOneWeaponTypes = [
      {
        name: "Club +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
        image: "icons/weapons/clubs/club-simple-barbed.webp",
      },
      {
        name: "Dagger +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
        image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
      },
      {
        name: "Greatclub +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
        image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
      },
      {
        name: "Handaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
        image: "icons/weapons/axes/axe-broad-black.webp",
      },
      {
        name: "Javelin +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
        image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
      },
      {
        name: "Light Hammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
        image: "icons/weapons/hammers/hammer-war-spiked.webp",
      },
      {
        name: "Mace +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Quarterstaff +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
        image: "icons/weapons/staves/staff-simple-gold.webp",
      },
      {
        name: "Sickle +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
        image: "icons/weapons/sickles/sickle-curved.webp",
      },
      {
        name: "Spear +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Yklwa +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Boomerang +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
        image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
      },
      {
        name: "Light Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Dart +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
        image: "icons/weapons/thrown/dagger-simple.webp",
      },
      {
        name: "Shortbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
        image: "icons/weapons/bows/shortbow-recurve.webp",
      },
      {
        name: "Sling +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
        image: "icons/weapons/slings/slingshot-wood.webp",
      },
      {
        name: "Battleaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
        image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
      },
      {
        name: "Flail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
        image: "icons/weapons/maces/flail-ball-grey.webp",
      },
      {
        name: "Glaive +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
        image: "icons/weapons/polearms/glaive-simple.webp",
      },
      {
        name: "Greataxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
        image: "icons/weapons/axes/axe-double.webp",
      },
      {
        name: "Greatsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
        image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
      },
      {
        name: "Halberd +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
        image: "icons/weapons/polearms/halberd-worn-steel.webp",
      },
      {
        name: "Lance +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
        image: "icons/skills/targeting/target-strike-triple-blue.webp",
      },
      {
        name: "Longsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
        image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
      },
      {
        name: "Maul +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
        image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
      },
      {
        name: "Morningstar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Pike +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
        image: "icons/weapons/polearms/spear-simple-engraved.webp",
      },
      {
        name: "Rapier +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
        image: "icons/skills/melee/sword-twirl-orange.webp",
      },
      {
        name: "Scimitar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
        image: "icons/weapons/swords/sword-katana.webp",
      },
      {
        name: "Shortsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
        image: "icons/weapons/swords/sword-guard-brown.webp",
      },
      {
        name: "Trident +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
        image: "icons/weapons/polearms/trident-silver-blue.webp",
      },
      {
        name: "War Pick +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
        image: "icons/weapons/axes/pickaxe-double-brown.webp",
      },
      {
        name: "Warhammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
        image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
      },
      {
        name: "Whip +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
      },
      {
        name: "Blowgun +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
        image: "icons/weapons/staves/staff-simple-brown.webp",
      },
      {
        name: "Hand Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Heavy Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-purple.webp",
      },
      {
        name: "Longbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
        image: "icons/weapons/bows/longbow-leather-green.webp",
      },
      {
        name: "Net +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
        image: "icons/tools/fishing/net-simple-tan.webp",
      },

        ];
          
      
    const randomIndex = Math.floor(Math.random() * pOneWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pOneWeaponTypes[randomIndex].name,
        uuid: pOneWeaponTypes[randomIndex].uuid,
        image: pOneWeaponTypes[randomIndex].image
      }
    }; 
    }
    },
{ range: [100, 100], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},
]

const weaponsItemTableB= [
  { range: [1, 10], item: () => {
    const pTwoAmmoTypes = [
       {name: "Ammunition +2",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZRo6IoRMYun1OYJU]{Ammunition +2, 20 units}", 
        image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
      },  
    ];    
    const randomIndex = Math.floor(Math.random() * pTwoAmmoTypes.length);
    return { 
    roll: randomIndex + 1,
    item: {
    name: pTwoAmmoTypes[randomIndex].name,
    uuid: pTwoAmmoTypes[randomIndex].uuid,
    image: pTwoAmmoTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [11, 35], item: () => {
    const pOneWeaponTypes = [
      {
        name: "Club +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
        image: "icons/weapons/clubs/club-simple-barbed.webp",
      },
      {
        name: "Dagger +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
        image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
      },
      {
        name: "Greatclub +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
        image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
      },
      {
        name: "Handaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
        image: "icons/weapons/axes/axe-broad-black.webp",
      },
      {
        name: "Javelin +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
        image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
      },
      {
        name: "Light Hammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
        image: "icons/weapons/hammers/hammer-war-spiked.webp",
      },
      {
        name: "Mace +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Quarterstaff +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
        image: "icons/weapons/staves/staff-simple-gold.webp",
      },
      {
        name: "Sickle +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
        image: "icons/weapons/sickles/sickle-curved.webp",
      },
      {
        name: "Spear +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Yklwa +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Boomerang +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
        image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
      },
      {
        name: "Light Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Dart +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
        image: "icons/weapons/thrown/dagger-simple.webp",
      },
      {
        name: "Shortbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
        image: "icons/weapons/bows/shortbow-recurve.webp",
      },
      {
        name: "Sling +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
        image: "icons/weapons/slings/slingshot-wood.webp",
      },
      {
        name: "Battleaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
        image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
      },
      {
        name: "Flail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
        image: "icons/weapons/maces/flail-ball-grey.webp",
      },
      {
        name: "Glaive +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
        image: "icons/weapons/polearms/glaive-simple.webp",
      },
      {
        name: "Greataxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
        image: "icons/weapons/axes/axe-double.webp",
      },
      {
        name: "Greatsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
        image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
      },
      {
        name: "Halberd +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
        image: "icons/weapons/polearms/halberd-worn-steel.webp",
      },
      {
        name: "Lance +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
        image: "icons/skills/targeting/target-strike-triple-blue.webp",
      },
      {
        name: "Longsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
        image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
      },
      {
        name: "Maul +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
        image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
      },
      {
        name: "Morningstar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Pike +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
        image: "icons/weapons/polearms/spear-simple-engraved.webp",
      },
      {
        name: "Rapier +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
        image: "icons/skills/melee/sword-twirl-orange.webp",
      },
      {
        name: "Scimitar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
        image: "icons/weapons/swords/sword-katana.webp",
      },
      {
        name: "Shortsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
        image: "icons/weapons/swords/sword-guard-brown.webp",
      },
      {
        name: "Trident +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
        image: "icons/weapons/polearms/trident-silver-blue.webp",
      },
      {
        name: "War Pick +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
        image: "icons/weapons/axes/pickaxe-double-brown.webp",
      },
      {
        name: "Warhammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
        image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
      },
      {
        name: "Whip +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
      },
      {
        name: "Blowgun +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
        image: "icons/weapons/staves/staff-simple-brown.webp",
      },
      {
        name: "Hand Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Heavy Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-purple.webp",
      },
      {
        name: "Longbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
        image: "icons/weapons/bows/longbow-leather-green.webp",
      },
      {
        name: "Net +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
        image: "icons/tools/fishing/net-simple-tan.webp",
      },

        ];
          
      
    const randomIndex = Math.floor(Math.random() * pOneWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pOneWeaponTypes[randomIndex].name,
        uuid: pOneWeaponTypes[randomIndex].uuid,
        image: pOneWeaponTypes[randomIndex].image
      }
    }; 
    }
    },
{ range: [36, 37], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},  
{ range: [38, 55], item: () => {
const basicWeaponTypes = [
  {
    name: "Club",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nfIRTECQIG81CvM4]{Club}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0E565kQUBmndJ1a2]{Dagger}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QRCsxkCwWNwswL9o]{Greatclub}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eO7Fbv5WBk5zvGOc]{Handaxe}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DWLMnODrnHn8IbAG]{Javelin}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XVK6TOL4sGItssAE]{Light Hammer}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ajyq6nGwF7FtLhDQ]{Mace}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.g2dWN7PQiMRYWzyk]{Quarterstaff}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i4NeNZ30ycwPDHMx]{Sickle}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OG4nBBydvmfWYXIk]{Spear}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WayPSq1eSziedayE]{Yklwa}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomeraang",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W2AyhchcGrZ71aqN]{Boomerang}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ddWvQRLmnnIS0eLF]{Light Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3rCO8MTIdPGSW6IJ]{Dart}",
    image: "icons/weapons/thrown/dart-feathered.webp",
  },
  {
    name: "Shortbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GJv6WkD7D2J6rP6M]{Shortbow}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3gynWO9sN4OLGMWD]{Sling}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I0WocDSuNpGJayPb]{Battleaxe}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UrH3sMdnUDckIHJ6]{Flail}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rOG1OM2ihgPjOvFW]{Glaive}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1Lxk6kmoRhG8qQ0u]{Greataxe}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xMkP8BmFzElcsMaR]{Greatsword}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DMejWAc8r8YvDPP1]{Halberd}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RnuxdHUAIgxccVwj]{Lance}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.10ZP2Bu3vnCuYMIB]{Longsword}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DizirD7eqjh8n95A]{Maul}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dX8AxCh9o0A9CkT3]{Morningstar}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tC0kcqZT9HHAO0PD]{Pike}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Tobce1hexTnDk4sV]{Rapier}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fbC0Mg1a73wdFbqO]{Scimitar}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.osLzOwQdPtrK3rQH]{Shortsword}", 
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F65ANO66ckP8FDMa]{Trident}", 
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YdfjN1PIIrSHZii]{War Pick}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F0Df164Xv1gWcYt0]{Warhammer}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QKTyxoO0YDnAsbYe]{Whip}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wNWK6yJMHG9ANqQV]{Blowgun}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qaSro7kFhxD6INbZ]{Hand Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RmP0mYRn2J7K26rX]{Heavy Crossbow}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3cymOVja8jXbzrdT]{Longbow}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aEiM49V8vWpWw7rU]{Net}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * basicWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: basicWeaponTypes[randomIndex].name,
    uuid: basicWeaponTypes[randomIndex].uuid,
    image: basicWeaponTypes[randomIndex].image
  }
}; 
}
},          
{ range: [56, 99], item: () => {
    const pOneWeaponTypes = [
      {
        name: "Club +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
        image: "icons/weapons/clubs/club-simple-barbed.webp",
      },
      {
        name: "Dagger +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
        image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
      },
      {
        name: "Greatclub +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
        image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
      },
      {
        name: "Handaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
        image: "icons/weapons/axes/axe-broad-black.webp",
      },
      {
        name: "Javelin +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
        image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
      },
      {
        name: "Light Hammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
        image: "icons/weapons/hammers/hammer-war-spiked.webp",
      },
      {
        name: "Mace +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Quarterstaff +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
        image: "icons/weapons/staves/staff-simple-gold.webp",
      },
      {
        name: "Sickle +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
        image: "icons/weapons/sickles/sickle-curved.webp",
      },
      {
        name: "Spear +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Yklwa +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Boomerang +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
        image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
      },
      {
        name: "Light Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Dart +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
        image: "icons/weapons/thrown/dagger-simple.webp",
      },
      {
        name: "Shortbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
        image: "icons/weapons/bows/shortbow-recurve.webp",
      },
      {
        name: "Sling +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
        image: "icons/weapons/slings/slingshot-wood.webp",
      },
      {
        name: "Battleaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
        image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
      },
      {
        name: "Flail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
        image: "icons/weapons/maces/flail-ball-grey.webp",
      },
      {
        name: "Glaive +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
        image: "icons/weapons/polearms/glaive-simple.webp",
      },
      {
        name: "Greataxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
        image: "icons/weapons/axes/axe-double.webp",
      },
      {
        name: "Greatsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
        image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
      },
      {
        name: "Halberd +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
        image: "icons/weapons/polearms/halberd-worn-steel.webp",
      },
      {
        name: "Lance +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
        image: "icons/skills/targeting/target-strike-triple-blue.webp",
      },
      {
        name: "Longsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
        image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
      },
      {
        name: "Maul +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
        image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
      },
      {
        name: "Morningstar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Pike +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
        image: "icons/weapons/polearms/spear-simple-engraved.webp",
      },
      {
        name: "Rapier +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
        image: "icons/skills/melee/sword-twirl-orange.webp",
      },
      {
        name: "Scimitar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
        image: "icons/weapons/swords/sword-katana.webp",
      },
      {
        name: "Shortsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
        image: "icons/weapons/swords/sword-guard-brown.webp",
      },
      {
        name: "Trident +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
        image: "icons/weapons/polearms/trident-silver-blue.webp",
      },
      {
        name: "War Pick +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
        image: "icons/weapons/axes/pickaxe-double-brown.webp",
      },
      {
        name: "Warhammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
        image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
      },
      {
        name: "Whip +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
      },
      {
        name: "Blowgun +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
        image: "icons/weapons/staves/staff-simple-brown.webp",
      },
      {
        name: "Hand Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Heavy Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-purple.webp",
      },
      {
        name: "Longbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
        image: "icons/weapons/bows/longbow-leather-green.webp",
      },
      {
        name: "Net +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
        image: "icons/tools/fishing/net-simple-tan.webp",
      },

        ];
          
      
    const randomIndex = Math.floor(Math.random() * pOneWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pOneWeaponTypes[randomIndex].name,
        uuid: pOneWeaponTypes[randomIndex].uuid,
        image: pOneWeaponTypes[randomIndex].image
      }
    }; 
    }
    },    
{ range: [100, 100], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},  
];

  const weaponsItemTableC= [
    { range: [1, 10], item: () => {
      const pTwoAmmoTypes = [
         {name: "Ammunition +2",
          uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZRo6IoRMYun1OYJU]{Ammunition +2, 20 units}", 
          image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
        },  
      ];    
      const randomIndex = Math.floor(Math.random() * pTwoAmmoTypes.length);
      return { 
      roll: randomIndex + 1,
      item: {
      name: pTwoAmmoTypes[randomIndex].name,
      uuid: pTwoAmmoTypes[randomIndex].uuid,
      image: pTwoAmmoTypes[randomIndex].image
      }
      }; 
      }
      },
    { range: [11, 35], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},    
{ range: [36, 37], item: () => {
const pThreeWeaponTypes = [
  {
    name: "Club +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HdC66U61pDOknaux]{Club +3}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bWI5i4RbyGKT6Eiq]{Dagger +3}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mkyltDYnuzNU3kmF]{Greatclub +3}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cmnBssaWWzWWm70C]{Handaxe +3}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FhtjbeBeP4q5vTyc]{Javelin +3}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y08Al2dMN8he1hFK]{Light Hammer +3}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2CQnAvn06bncXPBt]{Mace +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BmWnprrj0QWQ1BL3]{Quarterstaff +3}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AHn15T1TOuDFS0GH]{Sickle +3}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.62EaozKvcA0aSy2q]{Spear +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p5gg8Rs2nHOBJmny]{Yklwa +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KMss63oWVZm0tPVp]{Boomerang +3}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.amRx3jOYlPeXEiAN]{Light Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.izF3kmyFEVI5TWhp]{Dart +3}",
    image: "icons/weapons/thrown/dagger-ringed-steel.webp",
  },
  {
    name: "Shortbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.egJhGFU3v5OfjPNS]{Shortbow +3}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3WqP3r2emnumyUF]{Sling +3}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kNlvoSTcdMqxJPmI]{Battleaxe +3}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wgBKZNeRN1XsE9I7]{Flail +3}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rc9nkN6YOD7ogtEi]{Glaive +3}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAa2EG5kzmqxcp46]{Greataxe +3}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RfEZvwcLwe6Ih0LQ]{Greatsword +3}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EU78dSbnr91QWZ7g]{Halberd +3}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r97KnMO7Zxgfdh3P]{Lance +3}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H6SIiRIig7OMM2Z0]{Longsword +3}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P8f9o36qxagW2uRW]{Maul +3}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dghpiMWDSUXtQf6X]{Morningstar +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YH1o1Wa4gcdN3fh]{Pike +3}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YevPP0DZXgAcLmzv]{Rapier +3}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wK9ImkAeG3Lzxa0]{Scimitar +3}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uIHXYhnOwETlA5lT]{Shortsword +3}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9fFB1uaGJvcXTf7]{Trident +3}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nrvAo3TznyQrHS1t]{War Pick +3}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.setcTdSZ09rmsqMn]{Warhammer +3}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jcQqI0pxLD2nNNQ4]{Whip +3}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HQJ8tiyyrJJSUSyF]{Blowgun +3}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oG4rvCuMstgl4Nez]{Hand Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sj4zEvuGcSV6anKm]{Heavy Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8W6ULfSqzuHh6Peg]{Longbow +3}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iIuNqnpWCHrLEKWj]{Net +3}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
      
      const randomIndex = Math.floor(Math.random() * pThreeWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pThreeWeaponTypes[randomIndex].name,
        uuid: pThreeWeaponTypes[randomIndex].uuid,
        image: pThreeWeaponTypes[randomIndex].image
      }
    }; 
    }
    },    
{ range: [38, 55], item: () => {
const basicWeaponTypes = [
  {
    name: "Club",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nfIRTECQIG81CvM4]{Club}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0E565kQUBmndJ1a2]{Dagger}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QRCsxkCwWNwswL9o]{Greatclub}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.eO7Fbv5WBk5zvGOc]{Handaxe}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DWLMnODrnHn8IbAG]{Javelin}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XVK6TOL4sGItssAE]{Light Hammer}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Ajyq6nGwF7FtLhDQ]{Mace}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.g2dWN7PQiMRYWzyk]{Quarterstaff}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.i4NeNZ30ycwPDHMx]{Sickle}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OG4nBBydvmfWYXIk]{Spear}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WayPSq1eSziedayE]{Yklwa}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomeraang",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.W2AyhchcGrZ71aqN]{Boomerang}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ddWvQRLmnnIS0eLF]{Light Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3rCO8MTIdPGSW6IJ]{Dart}",
    image: "icons/weapons/thrown/dart-feathered.webp",
  },
  {
    name: "Shortbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.GJv6WkD7D2J6rP6M]{Shortbow}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3gynWO9sN4OLGMWD]{Sling}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.I0WocDSuNpGJayPb]{Battleaxe}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UrH3sMdnUDckIHJ6]{Flail}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rOG1OM2ihgPjOvFW]{Glaive}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1Lxk6kmoRhG8qQ0u]{Greataxe}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.xMkP8BmFzElcsMaR]{Greatsword}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DMejWAc8r8YvDPP1]{Halberd}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RnuxdHUAIgxccVwj]{Lance}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.10ZP2Bu3vnCuYMIB]{Longsword}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.DizirD7eqjh8n95A]{Maul}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dX8AxCh9o0A9CkT3]{Morningstar}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tC0kcqZT9HHAO0PD]{Pike}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Tobce1hexTnDk4sV]{Rapier}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fbC0Mg1a73wdFbqO]{Scimitar}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.osLzOwQdPtrK3rQH]{Shortsword}", 
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F65ANO66ckP8FDMa]{Trident}", 
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2YdfjN1PIIrSHZii]{War Pick}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.F0Df164Xv1gWcYt0]{Warhammer}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.QKTyxoO0YDnAsbYe]{Whip}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wNWK6yJMHG9ANqQV]{Blowgun}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qaSro7kFhxD6INbZ]{Hand Crossbow}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RmP0mYRn2J7K26rX]{Heavy Crossbow}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3cymOVja8jXbzrdT]{Longbow}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.aEiM49V8vWpWw7rU]{Net}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },
 
    ];
  
const randomIndex = Math.floor(Math.random() * basicWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: basicWeaponTypes[randomIndex].name,
    uuid: basicWeaponTypes[randomIndex].uuid,
    image: basicWeaponTypes[randomIndex].image
  }
}; 
}
},    
{ range: [56, 99], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},    
{ range: [100, 100], item: () => {
const pThreeWeaponTypes = [
  {
    name: "Club +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HdC66U61pDOknaux]{Club +3}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bWI5i4RbyGKT6Eiq]{Dagger +3}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mkyltDYnuzNU3kmF]{Greatclub +3}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cmnBssaWWzWWm70C]{Handaxe +3}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FhtjbeBeP4q5vTyc]{Javelin +3}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y08Al2dMN8he1hFK]{Light Hammer +3}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2CQnAvn06bncXPBt]{Mace +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BmWnprrj0QWQ1BL3]{Quarterstaff +3}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AHn15T1TOuDFS0GH]{Sickle +3}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.62EaozKvcA0aSy2q]{Spear +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p5gg8Rs2nHOBJmny]{Yklwa +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KMss63oWVZm0tPVp]{Boomerang +3}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.amRx3jOYlPeXEiAN]{Light Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.izF3kmyFEVI5TWhp]{Dart +3}",
    image: "icons/weapons/thrown/dagger-ringed-steel.webp",
  },
  {
    name: "Shortbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.egJhGFU3v5OfjPNS]{Shortbow +3}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3WqP3r2emnumyUF]{Sling +3}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kNlvoSTcdMqxJPmI]{Battleaxe +3}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wgBKZNeRN1XsE9I7]{Flail +3}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rc9nkN6YOD7ogtEi]{Glaive +3}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAa2EG5kzmqxcp46]{Greataxe +3}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RfEZvwcLwe6Ih0LQ]{Greatsword +3}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EU78dSbnr91QWZ7g]{Halberd +3}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r97KnMO7Zxgfdh3P]{Lance +3}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H6SIiRIig7OMM2Z0]{Longsword +3}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P8f9o36qxagW2uRW]{Maul +3}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dghpiMWDSUXtQf6X]{Morningstar +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YH1o1Wa4gcdN3fh]{Pike +3}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YevPP0DZXgAcLmzv]{Rapier +3}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wK9ImkAeG3Lzxa0]{Scimitar +3}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uIHXYhnOwETlA5lT]{Shortsword +3}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9fFB1uaGJvcXTf7]{Trident +3}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nrvAo3TznyQrHS1t]{War Pick +3}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.setcTdSZ09rmsqMn]{Warhammer +3}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jcQqI0pxLD2nNNQ4]{Whip +3}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HQJ8tiyyrJJSUSyF]{Blowgun +3}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oG4rvCuMstgl4Nez]{Hand Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sj4zEvuGcSV6anKm]{Heavy Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8W6ULfSqzuHh6Peg]{Longbow +3}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iIuNqnpWCHrLEKWj]{Net +3}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
      
      const randomIndex = Math.floor(Math.random() * pThreeWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pThreeWeaponTypes[randomIndex].name,
        uuid: pThreeWeaponTypes[randomIndex].uuid,
        image: pThreeWeaponTypes[randomIndex].image
      }
    }; 
    }
    },    
  ];

const weaponsItemTableD= [
  { range: [1, 10], item: () => {
    const pThreeAmmoTypes = [
       {name: "Ammunition +3",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.OQBQJ0xtLvILTh5V]{Ammunition +3, 20 units}", 
        image: "icons/weapons/ammunition/bullets-cartridge-shell-gray.webp"
      },  
    ];    
    const randomIndex = Math.floor(Math.random() * pThreeAmmoTypes.length);
    return { 
    roll: randomIndex + 1,
    item: {
    name: pThreeAmmoTypes[randomIndex].name,
    uuid: pThreeAmmoTypes[randomIndex].uuid,
    image: pThreeAmmoTypes[randomIndex].image
    }
    }; 
    }
    },
  { range: [11, 35], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},    
{ range: [30, 40], item: () => {
const pThreeWeaponTypes = [
  {
    name: "Club +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HdC66U61pDOknaux]{Club +3}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bWI5i4RbyGKT6Eiq]{Dagger +3}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mkyltDYnuzNU3kmF]{Greatclub +3}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cmnBssaWWzWWm70C]{Handaxe +3}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FhtjbeBeP4q5vTyc]{Javelin +3}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y08Al2dMN8he1hFK]{Light Hammer +3}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2CQnAvn06bncXPBt]{Mace +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BmWnprrj0QWQ1BL3]{Quarterstaff +3}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AHn15T1TOuDFS0GH]{Sickle +3}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.62EaozKvcA0aSy2q]{Spear +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p5gg8Rs2nHOBJmny]{Yklwa +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KMss63oWVZm0tPVp]{Boomerang +3}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.amRx3jOYlPeXEiAN]{Light Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.izF3kmyFEVI5TWhp]{Dart +3}",
    image: "icons/weapons/thrown/dagger-ringed-steel.webp",
  },
  {
    name: "Shortbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.egJhGFU3v5OfjPNS]{Shortbow +3}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3WqP3r2emnumyUF]{Sling +3}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kNlvoSTcdMqxJPmI]{Battleaxe +3}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wgBKZNeRN1XsE9I7]{Flail +3}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rc9nkN6YOD7ogtEi]{Glaive +3}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAa2EG5kzmqxcp46]{Greataxe +3}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RfEZvwcLwe6Ih0LQ]{Greatsword +3}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EU78dSbnr91QWZ7g]{Halberd +3}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r97KnMO7Zxgfdh3P]{Lance +3}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H6SIiRIig7OMM2Z0]{Longsword +3}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P8f9o36qxagW2uRW]{Maul +3}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dghpiMWDSUXtQf6X]{Morningstar +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YH1o1Wa4gcdN3fh]{Pike +3}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YevPP0DZXgAcLmzv]{Rapier +3}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wK9ImkAeG3Lzxa0]{Scimitar +3}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uIHXYhnOwETlA5lT]{Shortsword +3}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9fFB1uaGJvcXTf7]{Trident +3}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nrvAo3TznyQrHS1t]{War Pick +3}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.setcTdSZ09rmsqMn]{Warhammer +3}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jcQqI0pxLD2nNNQ4]{Whip +3}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HQJ8tiyyrJJSUSyF]{Blowgun +3}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oG4rvCuMstgl4Nez]{Hand Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sj4zEvuGcSV6anKm]{Heavy Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8W6ULfSqzuHh6Peg]{Longbow +3}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iIuNqnpWCHrLEKWj]{Net +3}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
      
      const randomIndex = Math.floor(Math.random() * pThreeWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pThreeWeaponTypes[randomIndex].name,
        uuid: pThreeWeaponTypes[randomIndex].uuid,
        image: pThreeWeaponTypes[randomIndex].image
      }
    }; 
    }
    },    
{ range: [40, 55], item: () => {
    const pOneWeaponTypes = [
      {
        name: "Club +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fCRftM4QxEDkeu0a]{Club +1}",
        image: "icons/weapons/clubs/club-simple-barbed.webp",
      },
      {
        name: "Dagger +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.59pjg8FGM4GG4Fdd]{Dagger +1}",
        image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
      },
      {
        name: "Greatclub +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dwGxrGqkn2ppNaqs]{Greatclub +1}",
        image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
      },
      {
        name: "Handaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Qfi5Rsuun3reqYmf]{Handaxe +1}",
        image: "icons/weapons/axes/axe-broad-black.webp",
      },
      {
        name: "Javelin +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.idtlcnIWgwVdvp31]{Javelin +1}",
        image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
      },
      {
        name: "Light Hammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q24QnImAicnT9Byd]{Light Hammer +1}",
        image: "icons/weapons/hammers/hammer-war-spiked.webp",
      },
      {
        name: "Mace +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jf0XMx2vfEZzZuD7]{Mace +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Quarterstaff +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.t8L7B0JWamsvxhui]{Quarterstaff +1}",
        image: "icons/weapons/staves/staff-simple-gold.webp",
      },
      {
        name: "Sickle +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.asUgQFrF1xYeNhtW]{Sickle +1}",
        image: "icons/weapons/sickles/sickle-curved.webp",
      },
      {
        name: "Spear +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WNdN2mBF3O7ZNcMp]{Spear +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Yklwa +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Nhl6NhYAPSP4bjEo]{Yklwa +1}",
        image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
      },
      {
        name: "Boomerang +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2dKKVU7dtSzmKlud]{Boomerang +1}",
        image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
      },
      {
        name: "Light Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kHjpHTKex95ULxUX]{Light Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Dart +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.giU3yyZXvErjf78D]{Dart +1}",
        image: "icons/weapons/thrown/dagger-simple.webp",
      },
      {
        name: "Shortbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gYDMk3LWikIP5PmA]{Shortbow +1}",
        image: "icons/weapons/bows/shortbow-recurve.webp",
      },
      {
        name: "Sling +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6I5lt8KheTsAE4Zr]{Sling +1}",
        image: "icons/weapons/slings/slingshot-wood.webp",
      },
      {
        name: "Battleaxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.UAXu4MNvAvaKz9JO]{Battleaxe +1}",
        image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
      },
      {
        name: "Flail +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.0LVFLPmsu1b2vf8E]{Flail +1}",
        image: "icons/weapons/maces/flail-ball-grey.webp",
      },
      {
        name: "Glaive +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.09i8r1UmzDSKiZ9g]{Glaive +1}",
        image: "icons/weapons/polearms/glaive-simple.webp",
      },
      {
        name: "Greataxe +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qhdGVfT5j6u46mtk]{Greataxe +1}",
        image: "icons/weapons/axes/axe-double.webp",
      },
      {
        name: "Greatsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kBVK2IiZYRkEYtcM]{Greatsword +1}",
        image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
      },
      {
        name: "Halberd +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nl7cc7Z1HpSHbUdQ]{Halberd +1}",
        image: "icons/weapons/polearms/halberd-worn-steel.webp",
      },
      {
        name: "Lance +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l88FXiodYofrJT8a]{Lance +1}",
        image: "icons/skills/targeting/target-strike-triple-blue.webp",
      },
      {
        name: "Longsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.IPkf0XNowClwXnjQ]{Longsword +1}",
        image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
      },
      {
        name: "Maul +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EveBprZPBjfZqXLt]{Maul +1}",
        image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
      },
      {
        name: "Morningstar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PKpftwMAn88gfLi7]{Morningstar +1}",
        image: "icons/weapons/maces/mace-round-spiked-black.webp",
      },
      {
        name: "Pike +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.yoFff2zdTloKx1if]{Pike +1}",
        image: "icons/weapons/polearms/spear-simple-engraved.webp",
      },
      {
        name: "Rapier +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.S7AhpCPDBGUBbg7b]{Rapier +1}",
        image: "icons/skills/melee/sword-twirl-orange.webp",
      },
      {
        name: "Scimitar +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VGtyTdVLoWls8FL5]{Scimitar +1}",
        image: "icons/weapons/swords/sword-katana.webp",
      },
      {
        name: "Shortsword +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sl6yiYSlqkHiVVSN]{Shortsword +1}",
        image: "icons/weapons/swords/sword-guard-brown.webp",
      },
      {
        name: "Trident +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.vuThcmO7MYlw5b9f]{Trident +1}",
        image: "icons/weapons/polearms/trident-silver-blue.webp",
      },
      {
        name: "War Pick +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.l2T46xCqUbJvKE7A]{War Pick +1}",
        image: "icons/weapons/axes/pickaxe-double-brown.webp",
      },
      {
        name: "Warhammer +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8N1GqcdroUpmM9dS]{Warhammer +1}",
        image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
      },
      {
        name: "Whip +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.lcqqW2vGF6P8nJ77]{Whip +1}",
        image: "icons/weapons/misc/whip-red-yellow.webp",
      },
      {
        name: "Blowgun +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.N8XNP3vjVZmM2r9S]{Blowgun +1}",
        image: "icons/weapons/staves/staff-simple-brown.webp",
      },
      {
        name: "Hand Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.MnX9soPEMNsCtpv7]{Hand Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
      },
      {
        name: "Heavy Crossbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ijDzcDXfJAdj2uED]{Heavy Crossbow +1}",
        image: "icons/weapons/crossbows/crossbow-purple.webp",
      },
      {
        name: "Longbow +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.A2i08i8gAFscm6hZ]{Longbow +1}",
        image: "icons/weapons/bows/longbow-leather-green.webp",
      },
      {
        name: "Net +1",
        uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rJKXDPikXSYXYgb5]{Net +1}",
        image: "icons/tools/fishing/net-simple-tan.webp",
      },

        ];
          
      
    const randomIndex = Math.floor(Math.random() * pOneWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pOneWeaponTypes[randomIndex].name,
        uuid: pOneWeaponTypes[randomIndex].uuid,
        image: pOneWeaponTypes[randomIndex].image
      }
    }; 
    }
    },      
{ range: [56, 89], item: () => {
const pTwoWeaponTypes = [
  {
    name: "Club +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gyJ0imAckcWtCjyv]{Club +2}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Lr8aRsnia8hftPAb]{Dagger +2}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Or3kVfJ0Fbr33ARS]{Greatclub +2}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LZcpcR21nte4Yoe2]{Handaxe +2}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.gV671PZGnYoVZefN]{Javelin +2}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.XIpJkxbySJxm6hoU]{Light Hammer +2}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.m1hJnK7CHsaJB26v]{Mace +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.7kVZo4DLBq22406E]{Quarterstaff +2}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uRoHwk1c8e5xJjkV]{Sickle +2}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HeDP6dL9daVT3uj2]{Spear +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.sqMcAK93KbnQlEGr]{Yklwa +2}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.LRkI1iObOMlNVZrW]{Boomerang +2}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.x12sDhylcf8843fT]{Light Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EWdfUQriSabqDESm]{Dart +2}",
    image: "icons/weapons/thrown/dagger-ringed-guard.webp",
  },
  {
    name: "Shortbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.tt4WokZBZMGqgYm5]{Shortbow +2}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.9qOAoFw9dTXhJ1w0]{Sling +2}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cQ94oKUZN8FDAI8U]{Battleaxe +2}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z0lIRURcyDYt1kLK]{Flail +2}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Mt2WB1W9nDWO4d16]{Glaive +2}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hdUzXzVPonOQzW81]{Greataxe +2}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8LZBOY5USLZ4ngDq]{Greatsword +2}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.6ndqUhOySYVVQ5on]{Halberd +2}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.CVMGOJWTO6TCybrH]{Lance +2}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bcv7J9culilK68zp]{Longsword +2}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.1kihEfn9QppB34ee]{Maul +2}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.NrHboku9vJO5FGiY]{Morningstar +2}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.qcEiSj67zfbLvYdJ]{Pike +2}", 
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uLY74ppOrTaWKwer]{Rapier +2}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.VHYy3ZsJNPUo1SIx]{Scimitar +2}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.b2l2ubCGSnmiTrm8]{Shortsword +2}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EkTpM4Wbsrdqflzl]{Trident +2}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RbC0UCqAnQcIPIXZ]{War Pick +2}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KvIlZssYEtQ4bvSE]{Warhammer +2}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.WlPzuxaVnYzxzDEC]{Whip +2}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.fu7DJcrYWfGMeVt9]{Blowgun +2}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3Q6rw9kAMf6F1SW5]{Hand Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8wXB18E0oPAYFkqc]{Heavy Crossbow +2}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.ZcvU9rRb573NOywv]{Longbow +2}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +2",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.hHX5qXva1ScCpBpL]{Net +2}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
  
const randomIndex = Math.floor(Math.random() * pTwoWeaponTypes .length);
return { 
  roll: randomIndex + 1,
  item: {
    name: pTwoWeaponTypes[randomIndex].name,
    uuid: pTwoWeaponTypes[randomIndex].uuid,
    image: pTwoWeaponTypes[randomIndex].image
  }
}; 
}
},    
{ range: [90, 100], item: () => {
const pThreeWeaponTypes = [
  {
    name: "Club +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HdC66U61pDOknaux]{Club +3}",
    image: "icons/weapons/clubs/club-simple-barbed.webp",
  },
  {
    name: "Dagger +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.bWI5i4RbyGKT6Eiq]{Dagger +3}",
    image: "icons/weapons/daggers/dagger-jeweled-purple.webp",
  },
  {
    name: "Greatclub +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.mkyltDYnuzNU3kmF]{Greatclub +3}",
    image: "icons/weapons/maces/mace-spiked-steel-grey.webp",
  },
  {
    name: "Handaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.cmnBssaWWzWWm70C]{Handaxe +3}",
    image: "icons/weapons/axes/axe-broad-black.webp",
  },
  {
    name: "Javelin +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.FhtjbeBeP4q5vTyc]{Javelin +3}",
    image: "icons/weapons/ammunition/arrows-bodkin-yellow-red.webp",
  },
  {
    name: "Light Hammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Y08Al2dMN8he1hFK]{Light Hammer +3}",
    image: "icons/weapons/hammers/hammer-war-spiked.webp",
  },
  {
    name: "Mace +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2CQnAvn06bncXPBt]{Mace +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Quarterstaff +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.BmWnprrj0QWQ1BL3]{Quarterstaff +3}",
    image: "icons/weapons/staves/staff-simple-gold.webp",
  },
  {
    name: "Sickle +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.AHn15T1TOuDFS0GH]{Sickle +3}",
    image: "icons/weapons/sickles/sickle-curved.webp",
  },
  {
    name: "Spear +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.62EaozKvcA0aSy2q]{Spear +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Yklwa +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.p5gg8Rs2nHOBJmny]{Yklwa +3}",
    image: "icons/weapons/polearms/spear-flared-worn-grey.webp",
  },
  {
    name: "Boomerang +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.KMss63oWVZm0tPVp]{Boomerang +3}",
    image: "icons/skills/targeting/crosshair-mark-rough-pink.webp",
  },
  {
    name: "Light Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.amRx3jOYlPeXEiAN]{Light Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Dart +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.izF3kmyFEVI5TWhp]{Dart +3}",
    image: "icons/weapons/thrown/dagger-ringed-steel.webp",
  },
  {
    name: "Shortbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.egJhGFU3v5OfjPNS]{Shortbow +3}",
    image: "icons/weapons/bows/shortbow-recurve.webp",
  },
  {
    name: "Sling +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.q3WqP3r2emnumyUF]{Sling +3}",
    image: "icons/weapons/slings/slingshot-wood.webp",
  },
  {
    name: "Battleaxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.kNlvoSTcdMqxJPmI]{Battleaxe +3}",
    image: "icons/weapons/polearms/halberd-crescent-engraved-steel.webp",
  },
  {
    name: "Flail +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.wgBKZNeRN1XsE9I7]{Flail +3}",
    image: "icons/weapons/maces/flail-ball-grey.webp",
  },
  {
    name: "Glaive +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.rc9nkN6YOD7ogtEi]{Glaive +3}",
    image: "icons/weapons/polearms/glaive-simple.webp",
  },
  {
    name: "Greataxe +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.PAa2EG5kzmqxcp46]{Greataxe +3}",
    image: "icons/weapons/axes/axe-double.webp",
  },
  {
    name: "Greatsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.RfEZvwcLwe6Ih0LQ]{Greatsword +3}",
    image: "icons/weapons/swords/greatsword-guard-gem-blue.webp",
  },
  {
    name: "Halberd +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.EU78dSbnr91QWZ7g]{Halberd +3}",
    image: "icons/weapons/polearms/halberd-worn-steel.webp",
  },
  {
    name: "Lance +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.r97KnMO7Zxgfdh3P]{Lance +3}",
    image: "icons/skills/targeting/target-strike-triple-blue.webp",
  },
  {
    name: "Longsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.H6SIiRIig7OMM2Z0]{Longsword +3}",
    image: "icons/weapons/swords/greatsword-crossguard-steel.webp",
  },
  {
    name: "Maul +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.P8f9o36qxagW2uRW]{Maul +3}",
    image: "icons/weapons/maces/mace-spiked-wood-grey.webp",
  },
  {
    name: "Morningstar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.dghpiMWDSUXtQf6X]{Morningstar +3}",
    image: "icons/weapons/maces/mace-round-spiked-black.webp",
  },
  {
    name: "Pike +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.3YH1o1Wa4gcdN3fh]{Pike +3}",
    image: "icons/weapons/polearms/spear-simple-engraved.webp",
  },
  {
    name: "Rapier +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.YevPP0DZXgAcLmzv]{Rapier +3}",
    image: "icons/skills/melee/sword-twirl-orange.webp",
  },
  {
    name: "Scimitar +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.2wK9ImkAeG3Lzxa0]{Scimitar +3}",
    image: "icons/weapons/swords/sword-katana.webp",
  },
  {
    name: "Shortsword +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.uIHXYhnOwETlA5lT]{Shortsword +3}",
    image: "icons/weapons/swords/sword-guard-brown.webp",
  },
  {
    name: "Trident +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.z9fFB1uaGJvcXTf7]{Trident +3}",
    image: "icons/weapons/polearms/trident-silver-blue.webp",
  },
  {
    name: "War Pick +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.nrvAo3TznyQrHS1t]{War Pick +3}",
    image: "icons/weapons/axes/pickaxe-double-brown.webp",
  },
  {
    name: "Warhammer +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.setcTdSZ09rmsqMn]{Warhammer +3}",
    image: "icons/weapons/hammers/hammer-drilling-spiked.webp",
  },
  {
    name: "Whip +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.jcQqI0pxLD2nNNQ4]{Whip +3}",
    image: "icons/weapons/misc/whip-red-yellow.webp",
  },
  {
    name: "Blowgun +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.HQJ8tiyyrJJSUSyF]{Blowgun +3}",
    image: "icons/weapons/staves/staff-simple-brown.webp",
  },
  {
    name: "Hand Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.oG4rvCuMstgl4Nez]{Hand Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-simple-brown.webp",
  },
  {
    name: "Heavy Crossbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.Sj4zEvuGcSV6anKm]{Heavy Crossbow +3}",
    image: "icons/weapons/crossbows/crossbow-purple.webp",
  },
  {
    name: "Longbow +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.8W6ULfSqzuHh6Peg]{Longbow +3}",
    image: "icons/weapons/bows/longbow-leather-green.webp",
  },
  {
    name: "Net +3",
    uuid: "@UUID[Compendium.Sparks-Forge-CR-Loot-Roller-with-Vendors.Sparks Forge Items.iIuNqnpWCHrLEKWj]{Net +3}",
    image: "icons/tools/fishing/net-simple-tan.webp",
  },

    ];
      
      const randomIndex = Math.floor(Math.random() * pThreeWeaponTypes .length);
    return { 
      roll: randomIndex + 1,
      item: {
        name: pThreeWeaponTypes[randomIndex].name,
        uuid: pThreeWeaponTypes[randomIndex].uuid,
        image: pThreeWeaponTypes[randomIndex].image
      }
    }; 
    }
    },    
  ];

    async function WeaponsAndArmorVendorInventoryWretched() {
      let items = [];
    const secondaryRoll = Math.floor(Math.random() * 100) + 1;
      switch (true) {
          case secondaryRoll >= 1 && secondaryRoll <= 2:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableA)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
            break;
          case secondaryRoll >= 3 && secondaryRoll <= 5:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableA)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
            break;
          case secondaryRoll >= 6 && secondaryRoll <= 8:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableA)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
            break;
          case secondaryRoll >= 9 && secondaryRoll <= 11:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableA)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
            break;
          case secondaryRoll >= 12 && secondaryRoll <= 14:
            if (Math.random() <= 0.125) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.125) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableB)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
            break;
          case secondaryRoll >= 15 && secondaryRoll <= 22:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableB)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
            break;
          case secondaryRoll >= 23 && secondaryRoll <= 30:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableB)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
            break;
          case secondaryRoll >= 31 && secondaryRoll <= 38:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableB)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
            break;
          case secondaryRoll >= 39 && secondaryRoll <= 46:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 1, armorItemTableB)];
            items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
            break;
          case secondaryRoll >= 47 && secondaryRoll <= 52:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableA)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
            break;
          case secondaryRoll >= 53 && secondaryRoll <= 58:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableA)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
            break;
          case secondaryRoll >= 59 && secondaryRoll <= 63:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableB)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
            break;
          case secondaryRoll >= 64 && secondaryRoll <= 68:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableB)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
            break;
          case secondaryRoll >= 69:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableB)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
            break;
          case secondaryRoll >= 70:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableB)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
            break;
          case secondaryRoll >= 71:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(2, 2, armorItemTableA)];
            items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
            break;
          case secondaryRoll >= 72:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 3, armorItemTableB)];
            items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
            break;
          case secondaryRoll >= 73 && secondaryRoll <= 74:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(2, 2, armorItemTableA)];
            items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
            break;
          case secondaryRoll >= 75 && secondaryRoll <= 76:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableB)];
            items = [...items, ...rollInventory(0, 2, weaponsItemTableB)];
            break;
          case secondaryRoll >= 77 && secondaryRoll <= 78:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(2, 2, armorItemTableA)];
            items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
            break;
          case secondaryRoll >= 79 && secondaryRoll <= 80:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 3, armorItemTableB)];
            items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
            break;
          case secondaryRoll >= 81 && secondaryRoll <= 85:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, armorItemTableA)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, armorItemTableB)];
            }
            items = [...items, ...rollInventory(2, 5, armorItemTableA)];
            items = [...items, ...rollInventory(2, 5, weaponsItemTableA)];
            break;

          case secondaryRoll >= 86 && secondaryRoll <= 90:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, armorItemTableB)];
            }
            items = [...items, ...rollInventory(1, 2, armorItemTableB)];
            items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
            break;
          case secondaryRoll >= 91 && secondaryRoll <= 95:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, armorItemTableB)];
            }
            items = [...items, ...rollInventory(3, 4, armorItemTableA)];
            items = [...items, ...rollInventory(3, 4, weaponsItemTableA)];
            break;
          case secondaryRoll >= 96 && secondaryRoll <= 100:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
            }          
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, armorItemTableA)];
            }
            items = [...items, ...rollInventory(1, 3, armorItemTableB)];
            items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
            break;
          default:
            break;
          }
 
const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
    uuid,
    image,
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };
new Dialog({
            title: "W&A Wretched Inventory",
            content: "W&A Wretched Inventory, journal entry created.",
            buttons: buttons,
            default: "ok",
          }).render(true);
        
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
        
        const journalEntryName = `W&A Wretched Inventory (${timeStamp})`;
        await JournalEntry.create({
          name: journalEntryName,
          content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
          permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
      });
              
        if (!game.user.isGM) {
          await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
        } else {
          const journalEntry = await game.journal.getName(journalEntryName);
          if (journalEntry) {
            journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
            game.socket.emit("createJournalEntry", { journalEntry });
          }
        }}}
        
        window.addEventListener('load', function() {
          const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
          const xhr = new XMLHttpRequest();
          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
              try {
                const div = document.createElement('div');
                div.innerHTML = xhr.responseText;
                document.body.appendChild(div);
              } catch (e) {
                console.error(e);
              }
            }
          };
          xhr.open('GET', path, true);
          xhr.send();
        });

        async function WeaponsAndArmorVendorInventoryPoor() {
          let items = [];
        const secondaryRoll = Math.floor(Math.random() * 100) + 1;
          switch (true) {
              case secondaryRoll >= 1 && secondaryRoll <= 2:
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                items = [...items, ...rollInventory(2, 4, armorItemTableA)];
                items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
                break;
              case secondaryRoll >= 3 && secondaryRoll <= 5:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                items = [...items, ...rollInventory(1, 3, armorItemTableA)];
                items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
                break;
              case secondaryRoll >= 6 && secondaryRoll <= 8:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                items = [...items, ...rollInventory(1, 4, armorItemTableA)];
                items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
                break;
              case secondaryRoll >= 9 && secondaryRoll <= 11:
                if (Math.random() <= 0.75) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.75) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                break;
              case secondaryRoll >= 12 && secondaryRoll <= 14:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 4, armorItemTableA)];
                items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
                break;
              case secondaryRoll >= 15 && secondaryRoll <= 22:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(1, 6, armorItemTableA)];
                items = [...items, ...rollInventory(1, 6, weaponsItemTableA)];
                break;
              case secondaryRoll >= 23 && secondaryRoll <= 30:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(1, 4, armorItemTableB)];
                items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
                break;
              case secondaryRoll >= 31 && secondaryRoll <= 38:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                items = [...items, ...rollInventory(1, 3, armorItemTableB)];
                items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
                break;
              case secondaryRoll >= 39 && secondaryRoll <= 46:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                items = [...items, ...rollInventory(1, 4, armorItemTableB)];
                items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
                break;
              case secondaryRoll >= 47 && secondaryRoll <= 52:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 4, armorItemTableA)];
                items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
                break;
              case secondaryRoll >= 53 && secondaryRoll <= 58:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                items = [...items, ...rollInventory(1, 2, armorItemTableB)];
                items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
                break;
              case secondaryRoll >= 59 && secondaryRoll <= 63:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 6, weaponsItemTableA)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 6, armorItemTableA)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 6, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 2, armorItemTableB)];
                items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
                break;
              case secondaryRoll >= 64 && secondaryRoll <= 68:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 4, armorItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 4, armorItemTableB)];
                }
                items = [...items, ...rollInventory(1, 2, armorItemTableB)];
                items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
                break;
              case secondaryRoll >= 69:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(1, 3, armorItemTableB)];
                items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
                break;
              case secondaryRoll >= 70:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 6, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 6, armorItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 6, armorItemTableB)];
                }
                items = [...items, ...rollInventory(1, 3, armorItemTableB)];
                items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
                break;
              case secondaryRoll >= 71:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 2, armorItemTableA)];
                items = [...items, ...rollInventory(2, 3, weaponsItemTableB)];
                break;
              case secondaryRoll >= 72:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 3, armorItemTableB)];
                items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
                break;
              case secondaryRoll >= 73 && secondaryRoll <= 74:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 2, armorItemTableA)];
                items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
                break;
              case secondaryRoll >= 75 && secondaryRoll <= 76:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(4, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(4, 10, armorItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 2, armorItemTableB)];
                items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
                break;
              case secondaryRoll >= 77 && secondaryRoll <= 78:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 3, armorItemTableA)];
                items = [...items, ...rollInventory(2, 3, weaponsItemTableA)];
                break;
              case secondaryRoll >= 79 && secondaryRoll <= 80:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(3, 3, armorItemTableA)];
                items = [...items, ...rollInventory(3, 3, weaponsItemTableA)];
                break;
              case secondaryRoll >= 81 && secondaryRoll <= 85:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                }
                items = [...items, ...rollInventory(1, 2, armorItemTableB)];
                items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
                break;
    
              case secondaryRoll >= 86 && secondaryRoll <= 90:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 4, armorItemTableB)];
                items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
                break;
              case secondaryRoll >= 91 && secondaryRoll <= 95:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(3, 4, armorItemTableA)];
                items = [...items, ...rollInventory(3, 4, weaponsItemTableA)];
                break;
              case secondaryRoll >= 96 && secondaryRoll <= 100:
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                }          
                if (Math.random() <= 0.25) {
                  items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                }
                items = [...items, ...rollInventory(2, 5, armorItemTableB)];
                items = [...items, ...rollInventory(2, 5, weaponsItemTableB)];
                break;
              default:
                break;
              }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
    uuid,
    image,
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };
new Dialog({
title: "W&A Poor Inventory",
content: "W&A Poor Inventory, journal entry created.",
buttons: buttons,
default: "ok",
}).render(true);
            
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
            
const journalEntryName = `W&A Poor Inventory (${timeStamp})`;
await JournalEntry.create({
name: journalEntryName,
content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});
                      
if (!game.user.isGM) {
await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
const journalEntry = await game.journal.getName(journalEntryName);
if (journalEntry) {
journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
game.socket.emit("createJournalEntry", { journalEntry });
}
}}}
            
window.addEventListener('load', function() {
const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
const xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
if (xhr.readyState === 4 && xhr.status === 200) {
try {
const div = document.createElement('div');
div.innerHTML = xhr.responseText;
document.body.appendChild(div);
} catch (e) {
console.error(e);
}
}
};
xhr.open('GET', path, true);
xhr.send();
});
    
 async function WeaponsAndArmorVendorInventoryModest() {
  let items = [];
    const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
    case secondaryRoll >= 1 && secondaryRoll <= 2:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(1, 1, armorItemTableA)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 1, armorItemTableB)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
    break;
    case secondaryRoll >= 3 && secondaryRoll <= 5:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(1, 1, armorItemTableA)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 1, armorItemTableB)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
    break;
    case secondaryRoll >= 6 && secondaryRoll <= 8:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(1, 1, armorItemTableA)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 1, armorItemTableB)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
    break;
    case secondaryRoll >= 9 && secondaryRoll <= 11:
    if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 12 && secondaryRoll <= 14:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 15 && secondaryRoll <= 22:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 23 && secondaryRoll <= 30:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 31 && secondaryRoll <= 38:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 39 && secondaryRoll <= 46:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 47 && secondaryRoll <= 52:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 53 && secondaryRoll <= 58:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 59 && secondaryRoll <= 63:
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 64 && secondaryRoll <= 68:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.2) {
   items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 69:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 2, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 2, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 2, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 2, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 4, armorItemTableA)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 4, armorItemTableB)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 70:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
                    }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 71:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 33, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
    break;
    case secondaryRoll >= 72:
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 6, armorItemTableA)];
    items = [...items, ...rollInventory(1, 6, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
    break;
    case secondaryRoll >= 73 && secondaryRoll <= 74:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, armorItemTableA)];
                    }
    items = [...items, ...rollInventory(2, 4, armorItemTableA)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 4, armorItemTableB)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 75 && secondaryRoll <= 76:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(4, 10, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(4, 10, armorItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 77 && secondaryRoll <= 78:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(0, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(0, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 79 && secondaryRoll <= 80:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 81 && secondaryRoll <= 85:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 86 && secondaryRoll <= 90:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 91 && secondaryRoll <= 95:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 96 && secondaryRoll <= 100:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 3, weaponsItemTableB)];
                    }          
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 3, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(2, 3, armorItemTableA)];
    items = [...items, ...rollInventory(2, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 3, armorItemTableB)];
    items = [...items, ...rollInventory(2, 3, weaponsItemTableB)];
    break;
    default:
    break;
                  }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
    uuid,
    image,
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };
new Dialog({

                    title: "W&A Modest Inventory",
                    content: "W&A Modest Inventory, journal entry created.",
                    buttons: buttons,
                    default: "ok",
                  }).render(true);
                
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

                
                const journalEntryName = `W&A Modest Inventory (${timeStamp})`;
                await JournalEntry.create({
                  name: journalEntryName,
                  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
                  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
              });
                              
                if (!game.user.isGM) {
                  await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
                } else {
                  const journalEntry = await game.journal.getName(journalEntryName);
                  if (journalEntry) {
                    journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
                    game.socket.emit("createJournalEntry", { journalEntry });
                  }
                }}}
                
                window.addEventListener('load', function() {
                  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
                  const xhr = new XMLHttpRequest();
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                      try {
                        const div = document.createElement('div');
                        div.innerHTML = xhr.responseText;
                        document.body.appendChild(div);
                      } catch (e) {
                        console.error(e);
                      }
                    }
                  };
                  xhr.open('GET', path, true);
                  xhr.send();
                });
 async function WeaponsAndArmorVendorInventoryComfortable() {
  let items = [];
    const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
    case secondaryRoll >= 1 && secondaryRoll <= 2:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 1, armorItemTableA)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 1, armorItemTableB)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
    break;
    case secondaryRoll >= 3 && secondaryRoll <= 5:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 1, armorItemTableA)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 1, armorItemTableB)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
    break;
    case secondaryRoll >= 6 && secondaryRoll <= 8:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 1, armorItemTableA)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 1, armorItemTableB)];
    items = [...items, ...rollInventory(1, 1, weaponsItemTableB)];
    break;
    case secondaryRoll >= 9 && secondaryRoll <= 11:
    if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 12 && secondaryRoll <= 14:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 15 && secondaryRoll <= 22:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 23 && secondaryRoll <= 30:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 31 && secondaryRoll <= 38:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 39 && secondaryRoll <= 46:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 47 && secondaryRoll <= 52:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 53 && secondaryRoll <= 58:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 59 && secondaryRoll <= 63:
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 64 && secondaryRoll <= 68:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.2) {
   items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 69:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 4, armorItemTableA)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 4, armorItemTableB)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 70:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 71:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
    break;
    case secondaryRoll >= 72:
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 6, armorItemTableA)];
    items = [...items, ...rollInventory(1, 6, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
    break;
    case secondaryRoll >= 73 && secondaryRoll <= 74:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 4, armorItemTableA)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 4, armorItemTableB)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 75 && secondaryRoll <= 76:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 77 && secondaryRoll <= 78:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(0, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(0, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 79 && secondaryRoll <= 80:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 81 && secondaryRoll <= 85:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 86 && secondaryRoll <= 90:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableC)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 91 && secondaryRoll <= 95:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableC)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 96 && secondaryRoll <= 100:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 3, weaponsItemTableC)];
                    }          
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 3, armorItemTableA)];
    items = [...items, ...rollInventory(2, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 3, armorItemTableB)];
    items = [...items, ...rollInventory(2, 3, weaponsItemTableB)];
    break;
    default:
    break;
                  }
const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
    uuid,
    image,
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };
new Dialog({
  title: "W&A Comfortable Inventory",
  content: "W&A Comfortable Inventory, journal entry created.",
  buttons: buttons,
  default: "ok",
  }).render(true);

  const now = new Date();
  const year = now.getFullYear().toString().substring(2);
  const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                    ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                    :${now.getSeconds().toString().padStart(2, '0')}`;
    
  const journalEntryName = `W&A Comfortable Inventory (${timeStamp})`;
  await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });
                
async function WeaponsAndArmorVendorInventoryRich() {
  let items = [];
    const secondaryRoll = Math.floor(Math.random() * 100) + 1;
    switch (true) {
    case secondaryRoll >= 1 && secondaryRoll <= 2:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 3 && secondaryRoll <= 5:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 6 && secondaryRoll <= 8:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 9 && secondaryRoll <= 11:
    if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 12 && secondaryRoll <= 14:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 15 && secondaryRoll <= 22:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 2, armorItemTableA)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 2, armorItemTableB)];
    items = [...items, ...rollInventory(1, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 23 && secondaryRoll <= 30:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 31 && secondaryRoll <= 38:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 2, armorItemTableA)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 2, armorItemTableB)];
    items = [...items, ...rollInventory(2, 2, weaponsItemTableB)];
    break;
    case secondaryRoll >= 39 && secondaryRoll <= 46:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 3, armorItemTableA)];
    items = [...items, ...rollInventory(2, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 3, armorItemTableB)];
    items = [...items, ...rollInventory(2, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 47 && secondaryRoll <= 52:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 53 && secondaryRoll <= 58:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 59 && secondaryRoll <= 63:
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 64 && secondaryRoll <= 68:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
                    }
    if (Math.random() <= 0.2) {
   items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 69:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(2, 2, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 4, armorItemTableA)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 4, armorItemTableB)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 70:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 6, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 6, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 71:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 5, armorItemTableA)];
    items = [...items, ...rollInventory(1, 5, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 5, armorItemTableB)];
    items = [...items, ...rollInventory(1, 5, weaponsItemTableB)];
    break;
    case secondaryRoll >= 72:
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 6, armorItemTableA)];
    items = [...items, ...rollInventory(1, 6, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 6, armorItemTableB)];
    items = [...items, ...rollInventory(1, 6, weaponsItemTableB)];
    break;
    case secondaryRoll >= 73 && secondaryRoll <= 74:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 4, armorItemTableA)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 4, armorItemTableB)];
    items = [...items, ...rollInventory(2, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 75 && secondaryRoll <= 76:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 77 && secondaryRoll <= 78:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(0, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(0, 4, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 3, armorItemTableA)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 3, armorItemTableB)];
    items = [...items, ...rollInventory(1, 3, weaponsItemTableB)];
    break;
    case secondaryRoll >= 79 && secondaryRoll <= 80:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 81 && secondaryRoll <= 85:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 3, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 86 && secondaryRoll <= 90:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableC)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableA)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 91 && secondaryRoll <= 95:
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, weaponsItemTableC)];
                    }
    if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(1, 4, armorItemTableA)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableC)];
    items = [...items, ...rollInventory(1, 4, armorItemTableB)];
    items = [...items, ...rollInventory(1, 4, weaponsItemTableB)];
    break;
    case secondaryRoll >= 96 && secondaryRoll <= 100:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 3, weaponsItemTableC)];
                    }          
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(2, 3, armorItemTableC)];
                    }
    items = [...items, ...rollInventory(2, 5, armorItemTableA)];
    items = [...items, ...rollInventory(2, 5, weaponsItemTableA)];
    items = [...items, ...rollInventory(2, 5, armorItemTableB)];
    items = [...items, ...rollInventory(2, 5, weaponsItemTableB)];
    break;
    default:
    break;
                  }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
    uuid,
    image,
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };
new Dialog({

                    title: "W&A Rich Vendor Inventory",
                    content: "W&A Rich Vendor Inventory, journal entry created.",
                    buttons: buttons,
                    default: "ok",
                  }).render(true);
                
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;
                
                const journalEntryName = `W&A Rich Vendor Inventory (${timeStamp})`;
                await JournalEntry.create({
                  name: journalEntryName,
                  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
                  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
              });
                              
                if (!game.user.isGM) {
                  await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
                } else {
                  const journalEntry = await game.journal.getName(journalEntryName);
                  if (journalEntry) {
                    journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
                    game.socket.emit("createJournalEntry", { journalEntry });
                  }
                }}}
                
                window.addEventListener('load', function() {
                  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
                  const xhr = new XMLHttpRequest();
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                      try {
                        const div = document.createElement('div');
                        div.innerHTML = xhr.responseText;
                        document.body.appendChild(div);
                      } catch (e) {
                        console.error(e);
                      }
                    }
                  };
                  xhr.open('GET', path, true);
                  xhr.send();
                });
                
    async function ApothicaryvendorInventoryWretched() {
      let items = [];
    const secondaryRoll = Math.floor(Math.random() * 100) + 1;
      switch (true) {
          case secondaryRoll >= 1 && secondaryRoll <= 2:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            break;
          case secondaryRoll >= 3 && secondaryRoll <= 5:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 6 && secondaryRoll <= 8:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 9 && secondaryRoll <= 11:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 12 && secondaryRoll <= 14:
            if (Math.random() <= 0.125) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.125) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 15 && secondaryRoll <= 22:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 23 && secondaryRoll <= 30:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 31 && secondaryRoll <= 38:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 39 && secondaryRoll <= 46:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 47 && secondaryRoll <= 52:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 53 && secondaryRoll <= 58:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 59 && secondaryRoll <= 63:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 64 && secondaryRoll <= 68:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 69:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 70:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 71:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 72:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
            items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 73 && secondaryRoll <= 74:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 75 && secondaryRoll <= 76:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(0, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 77 && secondaryRoll <= 78:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 79 && secondaryRoll <= 80:
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 81 && secondaryRoll <= 85:
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.2) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(2, 5, commonPotionTypes)];
            items = [...items, ...rollInventory(2, 5, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 86 && secondaryRoll <= 90:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 91 && secondaryRoll <= 95:
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.25) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(3, 4, commonPotionTypes)];
            items = [...items, ...rollInventory(3, 4, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          case secondaryRoll >= 96 && secondaryRoll <= 100:
            if (Math.random() <= 0.5) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }          
            if (Math.random() <= 0.1) {
              items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
            }
            items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
            items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
            break;
          default:
            break;
          }

const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

          new Dialog({
            title: "Apothicary Wretched Inventory",
            content: "Apothicary Wretched Inventory, journal entry created.",
            buttons: buttons,
            default: "ok",
          }).render(true);
        
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `Apothicary Wretched Vendor (${timeStamp})`;
  await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });

        async function ApothicaryvendorInventoryPoor() {
          let items = [];
        const secondaryRoll = Math.floor(Math.random() * 100) + 1;
          switch (true) {
              case secondaryRoll >= 1 && secondaryRoll <= 2:
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                break;
              case secondaryRoll >= 3 && secondaryRoll <= 5:
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 6 && secondaryRoll <= 8:
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 9 && secondaryRoll <= 11:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 12 && secondaryRoll <= 14:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 15 && secondaryRoll <= 22:
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 23 && secondaryRoll <= 30:
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 31 && secondaryRoll <= 38:
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 39 && secondaryRoll <= 46:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 47 && secondaryRoll <= 52:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 53 && secondaryRoll <= 58:
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 59 && secondaryRoll <= 63:
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 1, rarePotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 1, rarePotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 64 && secondaryRoll <= 68:
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, rarePotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, rarePotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 69:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, rarePotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, rarePotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 70:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, rarePotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 2, rarePotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 71:
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 3, rarePotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 3, rarePotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 72:
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 73 && secondaryRoll <= 74:
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 75 && secondaryRoll <= 76:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 77 && secondaryRoll <= 78:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 79 && secondaryRoll <= 80:
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.1) {
                  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
                items = [...items, ...rollInventory(1, 5, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 81 && secondaryRoll <= 85:
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.2) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 3, starterHpPotionTypes)];
                break;
    
              case secondaryRoll >= 86 && secondaryRoll <= 90:
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.3) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 91 && secondaryRoll <= 95:
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                if (Math.random() <= 0.4) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
                items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
                items = [...items, ...rollInventory(2, 5, starterHpPotionTypes)];
                break;
              case secondaryRoll >= 96 && secondaryRoll <= 100:
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }          
                if (Math.random() <= 0.5) {
                  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
                items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
                items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
                items = [...items, ...rollInventory(2, 5, starterHpPotionTypes)];
                break;
              default:
                break;
              }
const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

  new Dialog({
    title: "Apothicary Poor Inventory",
    content: "Apothicary Poor Inventory, journal entry created.",
    buttons: buttons,
    default: "ok",
  }).render(true);
            
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

  const journalEntryName = `Apothicary Poor Vendor (${timeStamp})`;
  await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });

async function ApothicaryvendorInventoryComfortable() {
  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
  switch (true) {
  case secondaryRoll >= 1 && secondaryRoll <= 2:
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 3 && secondaryRoll <= 5:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
    tems = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
  case secondaryRoll >= 6 && secondaryRoll <= 8:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 9 && secondaryRoll <= 11:
  if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 12 && secondaryRoll <= 14:
  if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 15 && secondaryRoll <= 22:
  if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10,  rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
    items = [...items, ...rollInventory(1, 10, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 6, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 6, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 23 && secondaryRoll <= 30:
  if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 31 && secondaryRoll <= 38:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 10, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 39 && secondaryRoll <= 46:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 10, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 47 && secondaryRoll <= 52:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 53 && secondaryRoll <= 58:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 59 && secondaryRoll <= 63:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 64 && secondaryRoll <= 68:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 4, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 4, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 69:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 70:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 71:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(2, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(2, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(2, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(2, 5, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
                break;
  case secondaryRoll >= 72:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 73 && secondaryRoll <= 74:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 75 && secondaryRoll <= 76:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5,rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 77 && secondaryRoll <= 78:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 79 && secondaryRoll <= 80:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 81 && secondaryRoll <= 85:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                break;
              case secondaryRoll >= 86 && secondaryRoll <= 90:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 91 && secondaryRoll <= 95:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 1, veryRarePotionTypes)];
                break;
  case secondaryRoll >= 96 && secondaryRoll <= 100:
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }          
  if (Math.random() <= 0.25) {
  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
  items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
  items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, veryRarePotionTypes)];
  break;
  default:
  break;
              }
 
const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({ uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

  new Dialog({
    title: "Apothicary Comfortable Inventory",
    content: "Apothicary Comfortable Inventory, journal entry created.",
    buttons: buttons,
    default: "ok",
  }).render(true);
            
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

  const journalEntryName = `Apothicary Comfortable Vendor (${timeStamp})`;
  await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });

async function ApothicaryvendorInventoryModest() {
  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
  switch (true) {
  case secondaryRoll >= 1 && secondaryRoll <= 2:
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    if (Math.random() <= 0.2) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 3 && secondaryRoll <= 5:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    tems = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
  case secondaryRoll >= 6 && secondaryRoll <= 8:
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 9 && secondaryRoll <= 11:
  if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
  if (Math.random() <= 0.75) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 12 && secondaryRoll <= 14:
  if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
  if (Math.random() <= 0.5) {
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
    items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 15 && secondaryRoll <= 22:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 6, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 6, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 23 && secondaryRoll <= 30:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 31 && secondaryRoll <= 38:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 39 && secondaryRoll <= 46:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 47 && secondaryRoll <= 52:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 53 && secondaryRoll <= 58:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 59 && secondaryRoll <= 63:
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 6, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 6, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
    }
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
    }
    items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 64 && secondaryRoll <= 68:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
    }
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 69:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 70:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 6, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 6, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 71:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, rarePotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, rarePotionTypes)];
    }
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, starterHpPotionTypes)];
    break;
  case secondaryRoll >= 72:
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.4) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 73 && secondaryRoll <= 74:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 75 && secondaryRoll <= 76:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(4, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(4, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 10, commonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 77 && secondaryRoll <= 78:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 79 && secondaryRoll <= 80:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 81 && secondaryRoll <= 85:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 10, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
    break;
                
  case secondaryRoll >= 86 && secondaryRoll <= 90:
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    break;
  case secondaryRoll >= 91 && secondaryRoll <= 95:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    if (Math.random() <= 0.5) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, veryRarePotionTypes)];
    break;
  case secondaryRoll >= 96 && secondaryRoll <= 100:
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }          
    if (Math.random() <= 0.25) {
      items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    }
    items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 2, veryRarePotionTypes)];
    break;
  default:
    break;
  }
                    
  const subResults = items.map((item) => {
  if (typeof item.item === "function") {
    const { roll, item: subResultItem } = item.item();
    const name = subResultItem?.name;
    const uuid = subResultItem?.uuid;
    const image = subResultItem?.image;
    if (Array.isArray(subResultItem)) {
      const [minIndex, maxIndex] = subResultItem[""];
      const itemDescriptions = subResultItem.slice(1);
      const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
      return {
        roll,
        description: itemDescriptions[selectedIndex - 1],
        name: item.name ? item.name : 'N/A',
        uuid: item.uuid ? item.uuid : 'N/A',
        image: item.image ? item.image : 'N/A',
      };
    } else {
      return {
        roll,
        description: subResultItem,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  } else {
    const { description, name, uuid, image } = item;
    return {
      description,
      name: name ? name : 'N/A',
      uuid: uuid ? uuid : 'N/A',
      image: image ? image : 'N/A',
    };
  }
});

const formattedItems = subResults.map(subResult => {
  const { roll, uuid, image } = subResult;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
}).join("; ");

const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
  const { uuid, image } = item;
  const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
  return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
});

const messageContent = `Inventory:;${JSON.stringify(
  items.map(({uuid, image}) => ({
  })),
  null,
  2
)}<br>${formattedItems}<br>${nonSubItems.join()}`;

if (typeof showItemsDialog === 'function') {
  const itemBox = document.createElement("div");
  itemBox.style.border = "1px solid black";
  itemBox.style.padding = "10px";
  itemBox.style.marginTop = "10px";
  itemBox.style.textAlign = "right"; 
  itemBox.innerHTML = messageContent;

  const buttons = {
    ok: {
      label: "OK",
    },
  };

  new Dialog({
    title: "Apothicary Modest Inventory",
    content: "Apothicary Modest Inventory, journal entry created.",
    buttons: buttons,
    default: "ok",
  }).render(true);

const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

const journalEntryName = `Apothicary Modest Vendor (${timeStamp})`;
await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right;">${messageContent.replaceAll('"range"', "<br>").replaceAll('",', "<br>")}</div>`,
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
});
                      
if (!game.user.isGM) {
  await ChatMessage.create({ content: messageContent.replaceAll('"range"', "<br>").replaceAll('" }, {', "<br>") });
} else {
  const journalEntry = await game.journal.getName(journalEntryName);
  if (journalEntry) {
    journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
    game.socket.emit("createJournalEntry", { journalEntry });
  }
}}}

window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
      }
    }
  };
  xhr.open('GET', path, true);
  xhr.send();
});

async function ApothicaryvendorInventoryRich() {
  let items = [];
  const secondaryRoll = Math.floor(Math.random() * 100) + 1;
  switch (true) {
  case secondaryRoll >= 1 && secondaryRoll <= 2:
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    if (Math.random() <= 0.3) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 3 && secondaryRoll <= 5:
    if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
    tems = [...items, ...rollInventory(1, 3, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, starterHpPotionTypes)];
                break;
  case secondaryRoll >= 6 && secondaryRoll <= 8:
    if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 9 && secondaryRoll <= 11:
  if (Math.random() <= 0.8) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.8) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 5, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 12 && secondaryRoll <= 14:
  if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(2, 4, uncommonPotionTypes)];
    items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 15 && secondaryRoll <= 22:
  if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 10,  rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
    items = [...items, ...rollInventory(1, 10, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 6, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 6, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 1, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 23 && secondaryRoll <= 30:
  if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
    items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
    items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
    items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
    items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 31 && secondaryRoll <= 38:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 10, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 39 && secondaryRoll <= 46:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 10, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 47 && secondaryRoll <= 52:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(2, 4, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 53 && secondaryRoll <= 58:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 59 && secondaryRoll <= 63:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 64 && secondaryRoll <= 68:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 4, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 4, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 69:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 70:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 71:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(2, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(2, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(2, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(2, 5, rarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, rarePotionTypes)];
                break;
  case secondaryRoll >= 72:
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.5) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 73 && secondaryRoll <= 74:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 6, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(2, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 75 && secondaryRoll <= 76:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5,rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 77 && secondaryRoll <= 78:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 79 && secondaryRoll <= 80:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, commonPotionTypes)];
  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 81 && secondaryRoll <= 85:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, uncommonPotionTypes)];
                break;
              case secondaryRoll >= 86 && secondaryRoll <= 90:
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 3, uncommonPotionTypes)];
                break;
  case secondaryRoll >= 91 && secondaryRoll <= 95:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, rarePotionTypes)];
                }
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  if (Math.random() <= 0.6) {
  items = [...items, ...rollInventory(1, 5, veryRarePotionTypes)];
                }
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 4, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 1, veryRarePotionTypes)];
                break;
  case secondaryRoll >= 96 && secondaryRoll <= 100:
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }          
  if (Math.random() <= 0.4) {
  items = [...items, ...rollInventory(1, 5, uncommonPotionTypes)];
                }
  items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
  items = [...items, ...rollInventory(2, 5, uncommonPotionTypes)];
  items = [...items, ...rollInventory(1, 2, veryRarePotionTypes)];
  break;
  default:
  break;
  }
        
  const subResults = items.map((item) => {
    if (typeof item.item === "function") {
      const { roll, item: subResultItem } = item.item();
      const name = subResultItem?.name;
      const uuid = subResultItem?.uuid;
      const image = subResultItem?.image;
      if (Array.isArray(subResultItem)) {
        const [minIndex, maxIndex] = subResultItem[""];
        const itemDescriptions = subResultItem.slice(1);
        const selectedIndex = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);
        return {
          roll,
          description: itemDescriptions[selectedIndex - 1],
          name: item.name ? item.name : 'N/A',
          uuid: item.uuid ? item.uuid : 'N/A',
          image: item.image ? item.image : 'N/A',
        };
      } else {
        return {
          roll,
          description: subResultItem,
          name: name ? name : 'N/A',
          uuid: uuid ? uuid : 'N/A',
          image: image ? image : 'N/A',
        };
      }
    } else {
      const { description, name, uuid, image } = item;
      return {
        description,
        name: name ? name : 'N/A',
        uuid: uuid ? uuid : 'N/A',
        image: image ? image : 'N/A',
      };
    }
  });
  
  const formattedItems = subResults.map(subResult => {
    const { roll, uuid, image } = subResult;
    const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
    return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}${roll ? `: ${roll}` : ""}</div></span>`;
  }).join("; ");
  
  const nonSubItems = items.filter(item => typeof item.item !== "function").map(item => {
    const { uuid, image } = item;
    const imgTag = image ? `<img src="${image}" width="35" height="35">` : '';
    return `<span style="display: flex; align-items: right;"><div style="margin-right: 10px;">${imgTag}</div><div>${uuid}</div></span>`;
  });
  
  const messageContent = `Inventory:;${JSON.stringify(
    items.map(({uuid, image}) => ({
    })),
    null,
    2
  )}<br>${formattedItems}<br>${nonSubItems.join()}`;
  
  if (typeof showItemsDialog === 'function') {
    const itemBox = document.createElement("div");
    itemBox.style.border = "1px solid black";
    itemBox.style.padding = "10px";
    itemBox.style.marginTop = "10px";
    itemBox.style.textAlign = "right"; 
    itemBox.innerHTML = messageContent;
  
    const buttons = {
      ok: {
        label: "OK",
      },
    };
        
  new Dialog({
  title: "Apothicary Rich Inventory",
  content: "Apothicary Rich Inventory, journal entry created.",
  buttons: buttons,
  default: "ok",
  }).render(true);
            
const now = new Date();
const year = now.getFullYear().toString().substring(2);
const timeStamp = `${year}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}
                  ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}
                  :${now.getSeconds().toString().padStart(2, '0')}`;

  const journalEntryName = `Apothicary Rich Vendor (${timeStamp})`;
  await JournalEntry.create({
  name: journalEntryName,
  content: `<div style="text-align: right">${messageContent}</div>`, 
  permission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
  });

  if (!game.user.isGM) {
    await ChatMessage.create({ content: messageContent});
  } else {
    const journalEntry = await game.journal.getName(journalEntryName);
    if (journalEntry) {
      journalEntry.update({ "permission.default": CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER });
      game.socket.emit("createJournalEntry", { journalEntry });
    }
}}}
                
  window.addEventListener('load', function() {
  const path = 'modules/Sparks-Forge-CR-Loot-Roller-with-Vendors/templates/Sparks-Forge-CR-Loot-Roller-TB.html';
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      try {
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        document.body.appendChild(div);
      } catch (e) {
        console.error(e);
          }
      }
      };
      xhr.open('GET', path, true);
      xhr.send();
      });

function showBlackMarketVendorButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return; {
    const rollContainer = document.getElementById("black-market-roll-container");
    rollContainer.style.display = rollContainer.style.display === "none" ? "block" : "none";
  }
}
function toggleBlackMarketButtons() {
  if (!GMOnlyDisabled && !game.user.isGM) return; {
    const container = document.getElementById("black-market-buttons-container");
    if (container.style.display === "none") {
      container.style.display = "block";
      } else {
      container.style.display = "none";
      }
  }
}
function rollBMVendorInventory(wealthRange) {
  let bmInventory;
        switch (wealthRange) {
          case "Wretched":
            bmInventory = bMvendorInventoryWretched();
            break;
          case "Poor":
            bmInventory = bMvendorInventoryPoor();
            break;
          case "Modest":
            bmInventory = bMvendorInventoryModest();
            break;
          case "Comfortable":
            bmInventory = bMvendorInventoryComfortable();
            break;
          case "Rich":
            bmInventory = bMvendorInventoryRich();
            break;
          case "Wealthy":
            bmInventory = bMvendorInventoryWealthy();
            break;
          default:
            break;
        }
        const messageContent = generateBMvendorInventoryInventory(wealthRange, FnVSInventory);
        ChatMessage.create({ content: messageContent });
      }
